
SDCardTestStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008ac4  08008ac4  00018ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b74  08008b74  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b7c  08008b7c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f94  20000084  08008c08  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002018  08008c08  00022018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017deb  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003702  00000000  00000000  00037ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cd  00000000  00000000  0003cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026760  00000000  00000000  0003dc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2c6  00000000  00000000  0006439d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7426  00000000  00000000  00081663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060ec  00000000  00000000  00168a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008aac 	.word	0x08008aac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008aac 	.word	0x08008aac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000df8:	b40f      	push	{r0, r1, r2, r3}
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	2164      	movs	r1, #100	; 0x64
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <myprintf+0x44>)
 8000e0e:	f007 f9bb 	bl	8008188 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <myprintf+0x44>)
 8000e14:	f7ff f9fc 	bl	8000210 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	4905      	ldr	r1, [pc, #20]	; (8000e3c <myprintf+0x44>)
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <myprintf+0x48>)
 8000e28:	f005 f8c3 	bl	8005fb2 <HAL_UART_Transmit>

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e36:	b004      	add	sp, #16
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20001e24 	.word	0x20001e24
 8000e40:	20000250 	.word	0x20000250

08000e44 <FindPeak>:
volatile int signal_buffer_in_queue = 1;
volatile int gidxB = 0;
volatile int gidxA = 0;

int FindPeak(uint32_t *sig)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	int fidxA = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

	if((sig[0] < sig[1]) && (sig[2] < sig[1]))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d209      	bcs.n	8000e72 <FindPeak+0x2e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3308      	adds	r3, #8
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3304      	adds	r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d201      	bcs.n	8000e72 <FindPeak+0x2e>
	{
		return 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <FindPeak+0x30>
	}
	else
	{
		return 0;
 8000e72:	2300      	movs	r3, #0
	}
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <kalman_filter>:
static float P_k_k1 = 0.5;
static float kalman_adc_old=0;
static int kalman_adc_int = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e92:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <kalman_filter+0xe0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <kalman_filter+0xe4>)
 8000ea2:	ed93 7a00 	vldr	s14, [r3]
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <kalman_filter+0xe8>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <kalman_filter+0xec>)
 8000eb2:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <kalman_filter+0xec>)
 8000eb8:	edd3 6a00 	vldr	s13, [r3]
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <kalman_filter+0xec>)
 8000ebe:	ed93 7a00 	vldr	s14, [r3]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <kalman_filter+0xf0>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <kalman_filter+0xf4>)
 8000ed2:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <kalman_filter+0xe0>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <kalman_filter+0xf4>)
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef6:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <kalman_filter+0xf4>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <kalman_filter+0xec>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <kalman_filter+0xe4>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <kalman_filter+0xe4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <kalman_filter+0xec>)
 8000f1e:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <kalman_filter+0xf8>)
 8000f2c:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <kalman_filter+0xe0>)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <kalman_filter+0xfc>)
 8000f44:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4e:	ee17 3a90 	vmov	r3, s15
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20001e00 	.word	0x20001e00
 8000f64:	20001df8 	.word	0x20001df8
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20001dfc 	.word	0x20001dfc
 8000f78:	20001df4 	.word	0x20001df4
 8000f7c:	20001e04 	.word	0x20001e04

08000f80 <endWriting>:
		return -1;
	}
}

int endWriting(FIL *fil)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if(log_file_opened == 0)
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <endWriting+0x2c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <endWriting+0x16>
	{
		return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e006      	b.n	8000fa4 <endWriting+0x24>
	}

	f_close(fil);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f007 f845 	bl	8008026 <f_close>

	log_file_opened = 0;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <endWriting+0x2c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20001df0 	.word	0x20001df0

08000fb0 <HAL_ADC_ConvCpltCallback>:

	return (((max - min)/2) + min);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000fb8:	4b95      	ldr	r3, [pc, #596]	; (8001210 <HAL_ADC_ConvCpltCallback+0x260>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
	ad1 = adraw[0]; // HAL_ADC_GetValue(&hadc1);
 8000fbe:	4b95      	ldr	r3, [pc, #596]	; (8001214 <HAL_ADC_ConvCpltCallback+0x264>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b94      	ldr	r3, [pc, #592]	; (8001218 <HAL_ADC_ConvCpltCallback+0x268>)
 8000fc6:	601a      	str	r2, [r3, #0]
	ad2 = adraw[1]; // HAL_ADC_GetValue(&hadc1);
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <HAL_ADC_ConvCpltCallback+0x264>)
 8000fca:	885b      	ldrh	r3, [r3, #2]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b93      	ldr	r3, [pc, #588]	; (800121c <HAL_ADC_ConvCpltCallback+0x26c>)
 8000fd0:	601a      	str	r2, [r3, #0]
	conv_rate++;
 8000fd2:	4b93      	ldr	r3, [pc, #588]	; (8001220 <HAL_ADC_ConvCpltCallback+0x270>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a91      	ldr	r2, [pc, #580]	; (8001220 <HAL_ADC_ConvCpltCallback+0x270>)
 8000fda:	6013      	str	r3, [r2, #0]

	//insert_new_value(sawtooth_buf, (int32_t)ad1);
	//insert_new_value(signal_buf, (int32_t)ad2);

	if(rx_flagA == 0)
 8000fdc:	4b91      	ldr	r3, [pc, #580]	; (8001224 <HAL_ADC_ConvCpltCallback+0x274>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 8163 	bne.w	80012ac <HAL_ADC_ConvCpltCallback+0x2fc>
	{
		if(gidxB == 200)
 8000fe6:	4b90      	ldr	r3, [pc, #576]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2bc8      	cmp	r3, #200	; 0xc8
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_ConvCpltCallback+0x5a>
		{
			if(signal_buffer_in_queue == 1)
 8000fee:	4b8f      	ldr	r3, [pc, #572]	; (800122c <HAL_ADC_ConvCpltCallback+0x27c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d103      	bne.n	8000ffe <HAL_ADC_ConvCpltCallback+0x4e>
			{
				signal_buffer_in_queue = 2;
 8000ff6:	4b8d      	ldr	r3, [pc, #564]	; (800122c <HAL_ADC_ConvCpltCallback+0x27c>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_ConvCpltCallback+0x54>
			}
			else
			{
				signal_buffer_in_queue = 1;
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_ADC_ConvCpltCallback+0x27c>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
			}
			gidxB = 0;
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
		}

		if(gidxB > 5)
 800100a:	4b87      	ldr	r3, [pc, #540]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b05      	cmp	r3, #5
 8001010:	dd1f      	ble.n	8001052 <HAL_ADC_ConvCpltCallback+0xa2>
		{
			if(gmaxA < kalman_buf1[gidxB])
 8001012:	4b85      	ldr	r3, [pc, #532]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a86      	ldr	r2, [pc, #536]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 8001018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101c:	4b85      	ldr	r3, [pc, #532]	; (8001234 <HAL_ADC_ConvCpltCallback+0x284>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	dd06      	ble.n	8001032 <HAL_ADC_ConvCpltCallback+0x82>
			{
				gmaxA = kalman_buf1[gidxB];
 8001024:	4b80      	ldr	r3, [pc, #512]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a81      	ldr	r2, [pc, #516]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	4a81      	ldr	r2, [pc, #516]	; (8001234 <HAL_ADC_ConvCpltCallback+0x284>)
 8001030:	6013      	str	r3, [r2, #0]
			}

			if(gminA > kalman_buf1[gidxB])
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7e      	ldr	r2, [pc, #504]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 8001038:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800103c:	4b7e      	ldr	r3, [pc, #504]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	da06      	bge.n	8001052 <HAL_ADC_ConvCpltCallback+0xa2>
			{
				gminA = kalman_buf1[gidxB];
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a79      	ldr	r2, [pc, #484]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	4a7a      	ldr	r2, [pc, #488]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 8001050:	6013      	str	r3, [r2, #0]
			}
		}

		if(gidxB == 195)
 8001052:	4b75      	ldr	r3, [pc, #468]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2bc3      	cmp	r3, #195	; 0xc3
 8001058:	d10d      	bne.n	8001076 <HAL_ADC_ConvCpltCallback+0xc6>
		{
			midlineA = (((gmaxA - gminA)/2) + gminA);
 800105a:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_ADC_ConvCpltCallback+0x284>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b76      	ldr	r3, [pc, #472]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	0fda      	lsrs	r2, r3, #31
 8001066:	4413      	add	r3, r2
 8001068:	105b      	asrs	r3, r3, #1
 800106a:	461a      	mov	r2, r3
 800106c:	4b72      	ldr	r3, [pc, #456]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4413      	add	r3, r2
 8001072:	4a72      	ldr	r2, [pc, #456]	; (800123c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001074:	6013      	str	r3, [r2, #0]
		}

		if(signal_buffer_in_queue == 1)
 8001076:	4b6d      	ldr	r3, [pc, #436]	; (800122c <HAL_ADC_ConvCpltCallback+0x27c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d170      	bne.n	8001160 <HAL_ADC_ConvCpltCallback+0x1b0>
		{
			signal_buf1[gidxB] = ad1;
 800107e:	4b66      	ldr	r3, [pc, #408]	; (8001218 <HAL_ADC_ConvCpltCallback+0x268>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b69      	ldr	r3, [pc, #420]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4611      	mov	r1, r2
 8001088:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <HAL_ADC_ConvCpltCallback+0x290>)
 800108a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sawtooth_buf1[gidxB] = ad2;
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_ADC_ConvCpltCallback+0x26c>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4611      	mov	r1, r2
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_ADC_ConvCpltCallback+0x294>)
 800109a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			kalman_buf1[gidxB] = kalman_filter(signal_buf1[gidxB]);
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a67      	ldr	r2, [pc, #412]	; (8001240 <HAL_ADC_ConvCpltCallback+0x290>)
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fee9 	bl	8000e80 <kalman_filter>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4a5e      	ldr	r2, [pc, #376]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(gidxB==0)
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <HAL_ADC_ConvCpltCallback+0x124>
			{
				gminA = kalman_buf1[0];
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 80010ca:	6013      	str	r3, [r2, #0]
				gmaxA = kalman_buf1[0];
 80010cc:	4b58      	ldr	r3, [pc, #352]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a58      	ldr	r2, [pc, #352]	; (8001234 <HAL_ADC_ConvCpltCallback+0x284>)
 80010d2:	6013      	str	r3, [r2, #0]
			}

			if((gidxB >= 5) && (gidxB < 190))
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	dd39      	ble.n	8001150 <HAL_ADC_ConvCpltCallback+0x1a0>
 80010dc:	4b52      	ldr	r3, [pc, #328]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2bbd      	cmp	r3, #189	; 0xbd
 80010e2:	dc35      	bgt.n	8001150 <HAL_ADC_ConvCpltCallback+0x1a0>
			{

				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 80010ee:	4413      	add	r3, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fea7 	bl	8000e44 <FindPeak>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_ADC_ConvCpltCallback+0x18e>
 80010fc:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b03      	subs	r3, #3
 8001102:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_ADC_ConvCpltCallback+0x280>)
 8001104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_ADC_ConvCpltCallback+0x28c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	dd16      	ble.n	800113e <HAL_ADC_ConvCpltCallback+0x18e>
				{
					if(dripOff == 0)
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <HAL_ADC_ConvCpltCallback+0x298>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <HAL_ADC_ConvCpltCallback+0x17e>
					{
						peaks_buff1[gidxB] = 2000;
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_ADC_ConvCpltCallback+0x29c>)
 800111e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						dripOff = 20;
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_ADC_ConvCpltCallback+0x298>)
 8001128:	2214      	movs	r2, #20
 800112a:	601a      	str	r2, [r3, #0]
					if(dripOff == 0)
 800112c:	e00f      	b.n	800114e <HAL_ADC_ConvCpltCallback+0x19e>
					}
					else
					{
						peaks_buff1[gidxB] = 500;
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_ADC_ConvCpltCallback+0x29c>)
 8001134:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(dripOff == 0)
 800113c:	e007      	b.n	800114e <HAL_ADC_ConvCpltCallback+0x19e>
					}
				}
				else
				{
					peaks_buff1[gidxB] = 500;
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a42      	ldr	r2, [pc, #264]	; (800124c <HAL_ADC_ConvCpltCallback+0x29c>)
 8001144:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 800114c:	e0a0      	b.n	8001290 <HAL_ADC_ConvCpltCallback+0x2e0>
 800114e:	e09f      	b.n	8001290 <HAL_ADC_ConvCpltCallback+0x2e0>
				}
			}
			else
			{
				peaks_buff1[gidxB] = 500;
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3d      	ldr	r2, [pc, #244]	; (800124c <HAL_ADC_ConvCpltCallback+0x29c>)
 8001156:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800115a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800115e:	e097      	b.n	8001290 <HAL_ADC_ConvCpltCallback+0x2e0>
			}
		}
		else
		{
			signal_buf2[gidxB] = ad1;
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_ConvCpltCallback+0x268>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4611      	mov	r1, r2
 800116a:	4a39      	ldr	r2, [pc, #228]	; (8001250 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800116c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sawtooth_buf2[gidxB] = ad2;
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_ADC_ConvCpltCallback+0x26c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4611      	mov	r1, r2
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800117c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			kalman_buf2[gidxB] = kalman_filter(signal_buf2[gidxB]);
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fe78 	bl	8000e80 <kalman_filter>
 8001190:	4602      	mov	r2, r0
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4611      	mov	r1, r2
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800119a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(gidxB==0)
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d107      	bne.n	80011b6 <HAL_ADC_ConvCpltCallback+0x206>
			{
				gminA = kalman_buf2[0];
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_ADC_ConvCpltCallback+0x288>)
 80011ac:	6013      	str	r3, [r2, #0]
				gmaxA = kalman_buf2[0];
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_ADC_ConvCpltCallback+0x284>)
 80011b4:	6013      	str	r3, [r2, #0]
			}

			if((gidxB >= 5) && (gidxB < 190))
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	dd61      	ble.n	8001282 <HAL_ADC_ConvCpltCallback+0x2d2>
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2bbd      	cmp	r3, #189	; 0xbd
 80011c4:	dc5d      	bgt.n	8001282 <HAL_ADC_ConvCpltCallback+0x2d2>
			{
				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3b03      	subs	r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80011d0:	4413      	add	r3, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe36 	bl	8000e44 <FindPeak>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d048      	beq.n	8001270 <HAL_ADC_ConvCpltCallback+0x2c0>
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3b03      	subs	r3, #3
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80011e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_ADC_ConvCpltCallback+0x28c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd3e      	ble.n	8001270 <HAL_ADC_ConvCpltCallback+0x2c0>
				{
					if(dripOff == 0)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_ADC_ConvCpltCallback+0x298>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d132      	bne.n	8001260 <HAL_ADC_ConvCpltCallback+0x2b0>
					{
						peaks_buff2[gidxB] = 2000;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_ADC_ConvCpltCallback+0x278>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_ADC_ConvCpltCallback+0x2ac>)
 8001200:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						dripOff = 20;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_ADC_ConvCpltCallback+0x298>)
 800120a:	2214      	movs	r2, #20
 800120c:	601a      	str	r2, [r3, #0]
					if(dripOff == 0)
 800120e:	e037      	b.n	8001280 <HAL_ADC_ConvCpltCallback+0x2d0>
 8001210:	200002a8 	.word	0x200002a8
 8001214:	20000294 	.word	0x20000294
 8001218:	200002b0 	.word	0x200002b0
 800121c:	200002b4 	.word	0x200002b4
 8001220:	200002ac 	.word	0x200002ac
 8001224:	200002a4 	.word	0x200002a4
 8001228:	20001bb8 	.word	0x20001bb8
 800122c:	20000000 	.word	0x20000000
 8001230:	20000f38 	.word	0x20000f38
 8001234:	20001e08 	.word	0x20001e08
 8001238:	20001e0c 	.word	0x20001e0c
 800123c:	20001e10 	.word	0x20001e10
 8001240:	200008f8 	.word	0x200008f8
 8001244:	200002b8 	.word	0x200002b8
 8001248:	20001e14 	.word	0x20001e14
 800124c:	20001578 	.word	0x20001578
 8001250:	20000c18 	.word	0x20000c18
 8001254:	200005d8 	.word	0x200005d8
 8001258:	20001258 	.word	0x20001258
 800125c:	20001898 	.word	0x20001898
					}
					else
					{
						peaks_buff2[gidxB] = 500;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x314>)
 8001266:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800126a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(dripOff == 0)
 800126e:	e007      	b.n	8001280 <HAL_ADC_ConvCpltCallback+0x2d0>
					}
				}
				else
				{
					peaks_buff2[gidxB] = 500;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x314>)
 8001276:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800127a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 800127e:	e007      	b.n	8001290 <HAL_ADC_ConvCpltCallback+0x2e0>
 8001280:	e006      	b.n	8001290 <HAL_ADC_ConvCpltCallback+0x2e0>
				}
			}
			else
			{
				peaks_buff2[gidxB] = 500;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x314>)
 8001288:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
		}
		gidxB++;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x310>)
 8001298:	6013      	str	r3, [r2, #0]
		if(dripOff > 0)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x318>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dd04      	ble.n	80012ac <HAL_ADC_ConvCpltCallback+0x2fc>
		{
			dripOff--;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x318>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x318>)
 80012aa:	6013      	str	r3, [r2, #0]
		}
	}

	// HAL_ADC_Start_IT(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adraw, adcChannelCount);
 80012ac:	2302      	movs	r3, #2
 80012ae:	461a      	mov	r2, r3
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <HAL_ADC_ConvCpltCallback+0x31c>)
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x320>)
 80012b4:	f001 f880 	bl	80023b8 <HAL_ADC_Start_DMA>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20001bb8 	.word	0x20001bb8
 80012c4:	20001898 	.word	0x20001898
 80012c8:	20001e14 	.word	0x20001e14
 80012cc:	20000294 	.word	0x20000294
 80012d0:	200000a0 	.word	0x200000a0

080012d4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t __t2_cntr = 0;
uint32_t __dripA = 0;
uint32_t flag_saving_interval = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d131      	bne.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		if(__t2_cntr < 3)
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d805      	bhi.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			__t2_cntr++;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e002      	b.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		}
		else
		{
			__t2_cntr = 0;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
		}

		if(__dripA > 0)
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			__dripA++;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800130e:	6013      	str	r3, [r2, #0]

			if(__dripA > 1500) // 500uS
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001318:	4293      	cmp	r3, r2
 800131a:	d905      	bls.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				flag_FallingEdge = 0;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
				__dripA = 0;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
			}
		}

		if(flag_saving_interval > 0)
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			if(flag_saving_interval == 1)
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x6a>
			{
				endWriting(&log_file);
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800133a:	f7ff fe21 	bl	8000f80 <endWriting>
			}
			flag_saving_interval--;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001346:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200001c0 	.word	0x200001c0
 8001354:	20001e18 	.word	0x20001e18
 8001358:	20001e1c 	.word	0x20001e1c
 800135c:	20001bbc 	.word	0x20001bbc
 8001360:	20001e20 	.word	0x20001e20
 8001364:	20001bc0 	.word	0x20001bc0

08001368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10b      	bne.n	8001390 <HAL_UART_RxCpltCallback+0x28>
	{
		if(uart2_raw[0] == 'a')
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b61      	cmp	r3, #97	; 0x61
 800137e:	d107      	bne.n	8001390 <HAL_UART_RxCpltCallback+0x28>
		{
			rx_flagA = 1;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_UART_RxCpltCallback+0x44>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_UART_RxCpltCallback+0x3c>)
 800138c:	f004 fea3 	bl	80060d6 <HAL_UART_Receive_IT>
		}
	}
	HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	4905      	ldr	r1, [pc, #20]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001396:	f004 fe9e 	bl	80060d6 <HAL_UART_Receive_IT>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000250 	.word	0x20000250
 80013a8:	20000298 	.word	0x20000298
 80013ac:	200002a4 	.word	0x200002a4

080013b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	;
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80013ca:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint32_t a_shot = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	uint32_t b_shot = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

	int lidxA = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fe01 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8db 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 fb27 	bl	8001a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ea:	f000 fb05 	bl	80019f8 <MX_DMA_Init>
  MX_SPI2_Init();
 80013ee:	f000 fa07 	bl	8001800 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80013f2:	f000 fad7 	bl	80019a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80013f6:	f005 fdfd 	bl	8006ff4 <MX_FATFS_Init>
  MX_ADC1_Init();
 80013fa:	f000 f945 	bl	8001688 <MX_ADC1_Init>
  MX_RTC_Init();
 80013fe:	f000 f9a3 	bl	8001748 <MX_RTC_Init>
  MX_TIM1_Init();
 8001402:	f000 fa33 	bl	800186c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001406:	f000 fa81 	bl	800190c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	//HAL_ADC_Start_IT(&hadc1);
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adraw, adcChannelCount);
 800140a:	2302      	movs	r3, #2
 800140c:	461a      	mov	r2, r3
 800140e:	494e      	ldr	r1, [pc, #312]	; (8001548 <main+0x184>)
 8001410:	484e      	ldr	r0, [pc, #312]	; (800154c <main+0x188>)
 8001412:	f000 ffd1 	bl	80023b8 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim1);
 8001416:	484e      	ldr	r0, [pc, #312]	; (8001550 <main+0x18c>)
 8001418:	f004 f954 	bl	80056c4 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 800141c:	484d      	ldr	r0, [pc, #308]	; (8001554 <main+0x190>)
 800141e:	f004 f951 	bl	80056c4 <HAL_TIM_Base_Start>

    HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	494c      	ldr	r1, [pc, #304]	; (8001558 <main+0x194>)
 8001426:	484d      	ldr	r0, [pc, #308]	; (800155c <main+0x198>)
 8001428:	f004 fe55 	bl	80060d6 <HAL_UART_Receive_IT>

    //myprintf("\r\n~ ADC Peak Detector ~\r\n\r\n");

    HAL_Delay(500); //a short delay is important to let the SD card settle
 800142c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001430:	f000 fe4a 	bl	80020c8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t millis = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

    while(1)
    {
    	millis = HAL_GetTick();
 800143a:	f000 fe39 	bl	80020b0 <HAL_GetTick>
 800143e:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470

		if(HAL_GetTick() > (a_shot + 500))
 8001442:	f000 fe35 	bl	80020b0 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800144c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001450:	429a      	cmp	r2, r3
 8001452:	d9f2      	bls.n	800143a <main+0x76>
		{
		  a_shot = HAL_GetTick();
 8001454:	f000 fe2c 	bl	80020b0 <HAL_GetTick>
 8001458:	f8c7 047c 	str.w	r0, [r7, #1148]	; 0x47c
//			  crate = conv_rate;
//			  conv_rate = 0;
//
//		  }

		  float t = millis/1000.0;
 800145c:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8001460:	f7ff f870 	bl	8000544 <__aeabi_ui2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <main+0x19c>)
 800146a:	f7ff fa0f 	bl	800088c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff faf1 	bl	8000a5c <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8001480:	6013      	str	r3, [r2, #0]
		  if(rx_flagA == 1)
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <main+0x1a0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d1d7      	bne.n	800143a <main+0x76>
		  {
			  if(adcConversionComplete == 1)
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <main+0x1a4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d14e      	bne.n	8001530 <main+0x16c>
			  {
				  adcConversionComplete = 0;
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <main+0x1a4>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
				  for(lidxA=0;lidxA<200;lidxA++)
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800149e:	e043      	b.n	8001528 <main+0x164>
				  {
					  //myprintf("A0:%d, A1:%d\n", signal_buf[lidxA], sawtooth_buf[lidxA]);
					  if(signal_buffer_in_queue == 2)
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <main+0x1a8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d11d      	bne.n	80014e4 <main+0x120>
					  {
						  //myprintf("A0:%d\n", signal_buf1[lidxA]);
						  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf1[lidxA], sawtooth_buf1[lidxA], kalman_buf1[lidxA], peaks_buff1[lidxA], midlineA); //GetMidLine(kalman_buf1, 200));
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <main+0x1ac>)
 80014aa:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014b2:	4a30      	ldr	r2, [pc, #192]	; (8001574 <main+0x1b0>)
 80014b4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <main+0x1b4>)
 80014be:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <main+0x1b8>)
 80014c8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	4a2b      	ldr	r2, [pc, #172]	; (8001580 <main+0x1bc>)
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	9201      	str	r2, [sp, #4]
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4623      	mov	r3, r4
 80014da:	4602      	mov	r2, r0
 80014dc:	4829      	ldr	r0, [pc, #164]	; (8001584 <main+0x1c0>)
 80014de:	f7ff fc8b 	bl	8000df8 <myprintf>
 80014e2:	e01c      	b.n	800151e <main+0x15a>
					  }
					  else
					  {
						  //myprintf("A0:%d\n", signal_buf2[lidxA]);
						  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf2[lidxA], sawtooth_buf2[lidxA], kalman_buf2[lidxA], peaks_buff2[lidxA], midlineA); // GetMidLine(kalman_buf2, 200));
 80014e4:	4a28      	ldr	r2, [pc, #160]	; (8001588 <main+0x1c4>)
 80014e6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <main+0x1c8>)
 80014f0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <main+0x1cc>)
 80014fa:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001502:	4a24      	ldr	r2, [pc, #144]	; (8001594 <main+0x1d0>)
 8001504:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <main+0x1bc>)
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	4602      	mov	r2, r0
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <main+0x1c0>)
 800151a:	f7ff fc6d 	bl	8000df8 <myprintf>
				  for(lidxA=0;lidxA<200;lidxA++)
 800151e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8001528:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800152c:	2bc7      	cmp	r3, #199	; 0xc7
 800152e:	ddb7      	ble.n	80014a0 <main+0xdc>
					  }
				  }
			  }
			  HAL_Delay(2500);
 8001530:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001534:	f000 fdc8 	bl	80020c8 <HAL_Delay>
			  gidxB = 0; // Fresh Copy of ADC
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <main+0x1d4>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
			  rx_flagA = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <main+0x1a0>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    	millis = HAL_GetTick();
 8001544:	e779      	b.n	800143a <main+0x76>
 8001546:	bf00      	nop
 8001548:	20000294 	.word	0x20000294
 800154c:	200000a0 	.word	0x200000a0
 8001550:	200001c0 	.word	0x200001c0
 8001554:	20000208 	.word	0x20000208
 8001558:	20000298 	.word	0x20000298
 800155c:	20000250 	.word	0x20000250
 8001560:	408f4000 	.word	0x408f4000
 8001564:	200002a4 	.word	0x200002a4
 8001568:	200002a8 	.word	0x200002a8
 800156c:	20000000 	.word	0x20000000
 8001570:	200008f8 	.word	0x200008f8
 8001574:	200002b8 	.word	0x200002b8
 8001578:	20000f38 	.word	0x20000f38
 800157c:	20001578 	.word	0x20001578
 8001580:	20001e10 	.word	0x20001e10
 8001584:	08008b0c 	.word	0x08008b0c
 8001588:	20000c18 	.word	0x20000c18
 800158c:	200005d8 	.word	0x200005d8
 8001590:	20001258 	.word	0x20001258
 8001594:	20001898 	.word	0x20001898
 8001598:	20001bb8 	.word	0x20001bb8

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	; 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	2234      	movs	r2, #52	; 0x34
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 fdfa 	bl	80081a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <SystemClock_Config+0xe4>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <SystemClock_Config+0xe4>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <SystemClock_Config+0xe4>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <SystemClock_Config+0xe8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <SystemClock_Config+0xe8>)
 80015e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <SystemClock_Config+0xe8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015f8:	2309      	movs	r3, #9
 80015fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001606:	2301      	movs	r3, #1
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001618:	23b4      	movs	r3, #180	; 0xb4
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f831 	bl	8004694 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001638:	f000 fa64 	bl	8001b04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800163c:	f002 f966 	bl	800390c <HAL_PWREx_EnableOverDrive>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001646:	f000 fa5d 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2105      	movs	r1, #5
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f99f 	bl	80039ac <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001674:	f000 fa46 	bl	8001b04 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <MX_ADC1_Init+0xb4>)
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <MX_ADC1_Init+0xb8>)
 800169e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <MX_ADC1_Init+0xb4>)
 80016a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <MX_ADC1_Init+0xb4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <MX_ADC1_Init+0xb4>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <MX_ADC1_Init+0xb4>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_ADC1_Init+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_ADC1_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_ADC1_Init+0xb4>)
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <MX_ADC1_Init+0xbc>)
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_ADC1_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_ADC1_Init+0xb4>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_ADC1_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_ADC1_Init+0xb4>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016e8:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_ADC1_Init+0xb4>)
 80016ea:	f000 fd11 	bl	8002110 <HAL_ADC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 fa06 	bl	8001b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001700:	2302      	movs	r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_ADC1_Init+0xb4>)
 800170a:	f000 ff83 	bl	8002614 <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001714:	f000 f9f6 	bl	8001b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001718:	2301      	movs	r3, #1
 800171a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800171c:	2302      	movs	r3, #2
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_ADC1_Init+0xb4>)
 8001726:	f000 ff75 	bl	8002614 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001730:	f000 f9e8 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000a0 	.word	0x200000a0
 8001740:	40012000 	.word	0x40012000
 8001744:	0f000001 	.word	0x0f000001

08001748 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <MX_RTC_Init+0xb0>)
 8001762:	4a26      	ldr	r2, [pc, #152]	; (80017fc <MX_RTC_Init+0xb4>)
 8001764:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_RTC_Init+0xb0>)
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_RTC_Init+0xb0>)
 800176e:	227f      	movs	r2, #127	; 0x7f
 8001770:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_RTC_Init+0xb0>)
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_RTC_Init+0xb0>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_RTC_Init+0xb0>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_RTC_Init+0xb0>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800178a:	481b      	ldr	r0, [pc, #108]	; (80017f8 <MX_RTC_Init+0xb0>)
 800178c:	f003 fa20 	bl	8004bd0 <HAL_RTC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001796:	f000 f9b5 	bl	8001b04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800179a:	2312      	movs	r3, #18
 800179c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 800179e:	2338      	movs	r3, #56	; 0x38
 80017a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2201      	movs	r2, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	480f      	ldr	r0, [pc, #60]	; (80017f8 <MX_RTC_Init+0xb0>)
 80017ba:	f003 fa7f 	bl	8004cbc <HAL_RTC_SetTime>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80017c4:	f000 f99e 	bl	8001b04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80017cc:	2308      	movs	r3, #8
 80017ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x8;
 80017d0:	2308      	movs	r3, #8
 80017d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2201      	movs	r2, #1
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_RTC_Init+0xb0>)
 80017e0:	f003 fb06 	bl	8004df0 <HAL_RTC_SetDate>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80017ea:	f000 f98b 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000148 	.word	0x20000148
 80017fc:	40002800 	.word	0x40002800

08001800 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_SPI2_Init+0x64>)
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <MX_SPI2_Init+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SPI2_Init+0x64>)
 800180c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001810:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_SPI2_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_SPI2_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_SPI2_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_SPI2_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_SPI2_Init+0x64>)
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_SPI2_Init+0x64>)
 8001834:	2230      	movs	r2, #48	; 0x30
 8001836:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_SPI2_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_SPI2_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_SPI2_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_SPI2_Init+0x64>)
 800184c:	220a      	movs	r2, #10
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_SPI2_Init+0x64>)
 8001852:	f003 fbf2 	bl	800503a <HAL_SPI_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800185c:	f000 f952 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000168 	.word	0x20000168
 8001868:	40003800 	.word	0x40003800

0800186c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM1_Init+0x98>)
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <MX_TIM1_Init+0x9c>)
 800188c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_TIM1_Init+0x98>)
 8001890:	2206      	movs	r2, #6
 8001892:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_TIM1_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_TIM1_Init+0x98>)
 800189c:	220a      	movs	r2, #10
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_TIM1_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_TIM1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_TIM1_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <MX_TIM1_Init+0x98>)
 80018b4:	f003 feb6 	bl	8005624 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80018be:	f000 f921 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM1_Init+0x98>)
 80018d0:	f004 f868 	bl	80059a4 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80018da:	f000 f913 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018de:	2320      	movs	r3, #32
 80018e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e6:	463b      	mov	r3, r7
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_TIM1_Init+0x98>)
 80018ec:	f004 fa84 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80018f6:	f000 f905 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001c0 	.word	0x200001c0
 8001908:	40010000 	.word	0x40010000

0800190c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_TIM2_Init+0x94>)
 800192a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001932:	2210      	movs	r2, #16
 8001934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_TIM2_Init+0x94>)
 800193e:	2210      	movs	r2, #16
 8001940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_TIM2_Init+0x94>)
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001950:	f003 fe68 	bl	8005624 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 f8d3 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <MX_TIM2_Init+0x94>)
 800196c:	f004 f81a 	bl	80059a4 <HAL_TIM_ConfigClockSource>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001976:	f000 f8c5 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800197a:	2320      	movs	r3, #32
 800197c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001988:	f004 fa36 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001992:	f000 f8b7 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000208 	.word	0x20000208

080019a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <MX_USART2_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019dc:	f004 fa9c 	bl	8005f18 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f000 f88d 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000250 	.word	0x20000250
 80019f4:	40004400 	.word	0x40004400

080019f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2038      	movs	r0, #56	; 0x38
 8001a20:	f001 f98d 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a24:	2038      	movs	r0, #56	; 0x38
 8001a26:	f001 f9a6 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_GPIO_Init+0xc0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4815      	ldr	r0, [pc, #84]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001aa8:	f001 ff16 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4813      	ldr	r0, [pc, #76]	; (8001b00 <MX_GPIO_Init+0xc8>)
 8001ab2:	f001 ff11 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001ace:	f001 fd6f 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ada:	2302      	movs	r3, #2
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_GPIO_Init+0xc8>)
 8001aea:	f001 fd61 	bl	80035b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <Error_Handler+0x8>
	...

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_ADC_MspInit+0xec>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d15f      	bne.n	8001c42 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_ADC_MspInit+0xf0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4821      	ldr	r0, [pc, #132]	; (8001c54 <HAL_ADC_MspInit+0xf4>)
 8001bce:	f001 fcef 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_ADC_MspInit+0xfc>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c16:	4810      	ldr	r0, [pc, #64]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c18:	f001 f8c8 	bl	8002dac <HAL_DMA_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c22:	f7ff ff6f 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_ADC_MspInit+0xf8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	2012      	movs	r0, #18
 8001c38:	f001 f881 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c3c:	2012      	movs	r0, #18
 8001c3e:	f001 f89a 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40012000 	.word	0x40012000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	200000e8 	.word	0x200000e8
 8001c5c:	40026410 	.word	0x40026410

08001c60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09a      	sub	sp, #104	; 0x68
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	225c      	movs	r2, #92	; 0x5c
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fa97 	bl	80081a4 <memset>
  if(hrtc->Instance==RTC)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_RTC_MspInit+0x4c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c80:	2320      	movs	r3, #32
 8001c82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 ffa6 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c9a:	f7ff ff33 	bl	8001b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_RTC_MspInit+0x50>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3768      	adds	r7, #104	; 0x68
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40002800 	.word	0x40002800
 8001cb0:	42470e3c 	.word	0x42470e3c

08001cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_SPI_MspInit+0x84>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_SPI_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d20:	2305      	movs	r3, #5
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_SPI_MspInit+0x8c>)
 8001d2c:	f001 fc40 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40003800 	.word	0x40003800
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020400 	.word	0x40020400

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_TIM_Base_MspInit+0x70>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d116      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2019      	movs	r0, #25
 8001d78:	f000 ffe1 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d7c:	2019      	movs	r0, #25
 8001d7e:	f000 fffa 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d82:	e012      	b.n	8001daa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d10d      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_TIM_Base_MspInit+0x74>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_UART_MspInit+0x94>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d133      	bne.n	8001e46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x98>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e26:	2307      	movs	r3, #7
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <HAL_UART_MspInit+0x9c>)
 8001e32:	f001 fbbd 	bl	80035b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2026      	movs	r0, #38	; 0x26
 8001e3c:	f000 ff7f 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e40:	2026      	movs	r0, #38	; 0x26
 8001e42:	f000 ff98 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40004400 	.word	0x40004400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f8ee 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <ADC_IRQHandler+0x10>)
 8001eb6:	f000 f96e 	bl	8002196 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000a0 	.word	0x200000a0

08001ec4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001eca:	f003 fc63 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200001c0 	.word	0x200001c0

08001ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <USART2_IRQHandler+0x10>)
 8001ede:	f004 f92b 	bl	8006138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000250 	.word	0x20000250

08001eec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DMA2_Stream0_IRQHandler+0x10>)
 8001ef2:	f001 f8f3 	bl	80030dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000e8 	.word	0x200000e8

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f006 f940 	bl	80081b4 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20020000 	.word	0x20020000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20001e88 	.word	0x20001e88
 8001f68:	20002018 	.word	0x20002018

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fac:	4c0b      	ldr	r4, [pc, #44]	; (8001fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fba:	f7ff ffd7 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f006 f8ff 	bl	80081c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff f9ff 	bl	80013c4 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001fd4:	08008b84 	.word	0x08008b84
  ldr r2, =_sbss
 8001fd8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001fdc:	20002018 	.word	0x20002018

08001fe0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <CAN1_RX0_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 fe8b 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fd7a 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fea3 	bl	8002d92 <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 fe6b 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000010 	.word	0x20000010
 8002080:	20000018 	.word	0x20000018
 8002084:	20000014 	.word	0x20000014

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000018 	.word	0x20000018
 80020ac:	20001e8c 	.word	0x20001e8c

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20001e8c 	.word	0x20001e8c

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000018 	.word	0x20000018

08002110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e033      	b.n	800218e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fd16 	bl	8001b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fb88 	bl	8002878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d049      	beq.n	8002260 <HAL_ADC_IRQHandler+0xca>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d046      	beq.n	8002260 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d12b      	bne.n	8002250 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d127      	bne.n	8002250 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002218:	2b00      	cmp	r3, #0
 800221a:	d119      	bne.n	8002250 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0220 	bic.w	r2, r2, #32
 800222a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe fead 	bl	8000fb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f06f 0212 	mvn.w	r2, #18
 800225e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d057      	beq.n	8002326 <HAL_ADC_IRQHandler+0x190>
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d054      	beq.n	8002326 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d139      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d12b      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d124      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11d      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fc2c 	bl	8002b74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 020c 	mvn.w	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <HAL_ADC_IRQHandler+0x1d6>
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10d      	bne.n	800236c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f945 	bl	80025ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0201 	mvn.w	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800237a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_ADC_IRQHandler+0x218>
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f043 0202 	orr.w	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0220 	mvn.w	r2, #32
 800239c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f92e 	bl	8002600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0220 	mvn.w	r2, #32
 80023ac:	601a      	str	r2, [r3, #0]
  }
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Start_DMA+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0e9      	b.n	80025aa <HAL_ADC_Start_DMA+0x1f2>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d018      	beq.n	800241e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_ADC_Start_DMA+0x1fc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6d      	ldr	r2, [pc, #436]	; (80025b8 <HAL_ADC_Start_DMA+0x200>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3b01      	subs	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242c:	d107      	bne.n	800243e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800243c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 80a1 	bne.w	8002590 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d106      	bne.n	800249c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f023 0206 	bic.w	r2, r3, #6
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
 800249a:	e002      	b.n	80024a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024aa:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_ADC_Start_DMA+0x204>)
 80024ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	4a43      	ldr	r2, [pc, #268]	; (80025c0 <HAL_ADC_Start_DMA+0x208>)
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	4a42      	ldr	r2, [pc, #264]	; (80025c4 <HAL_ADC_Start_DMA+0x20c>)
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_ADC_Start_DMA+0x210>)
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	334c      	adds	r3, #76	; 0x4c
 80024fa:	4619      	mov	r1, r3
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f000 fd02 	bl	8002f08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12a      	bne.n	8002566 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <HAL_ADC_Start_DMA+0x214>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d015      	beq.n	8002546 <HAL_ADC_Start_DMA+0x18e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <HAL_ADC_Start_DMA+0x218>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d105      	bne.n	8002530 <HAL_ADC_Start_DMA+0x178>
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_ADC_Start_DMA+0x204>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_ADC_Start_DMA+0x21c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d136      	bne.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_ADC_Start_DMA+0x204>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d130      	bne.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d129      	bne.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	e020      	b.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_ADC_Start_DMA+0x214>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d11b      	bne.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d114      	bne.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e00b      	b.n	80025a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000010 	.word	0x20000010
 80025b8:	431bde83 	.word	0x431bde83
 80025bc:	40012300 	.word	0x40012300
 80025c0:	08002a71 	.word	0x08002a71
 80025c4:	08002b2b 	.word	0x08002b2b
 80025c8:	08002b47 	.word	0x08002b47
 80025cc:	40012000 	.word	0x40012000
 80025d0:	40012100 	.word	0x40012100
 80025d4:	40012200 	.word	0x40012200

080025d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e113      	b.n	8002858 <HAL_ADC_ConfigChannel+0x244>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b09      	cmp	r3, #9
 800263e:	d925      	bls.n	800268c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	3b1e      	subs	r3, #30
 8002656:	2207      	movs	r2, #7
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	4603      	mov	r3, r0
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4403      	add	r3, r0
 800267e:	3b1e      	subs	r3, #30
 8002680:	409a      	lsls	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	e022      	b.n	80026d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	2207      	movs	r2, #7
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4403      	add	r3, r0
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d824      	bhi.n	8002724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	3b05      	subs	r3, #5
 80026ec:	221f      	movs	r2, #31
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	400a      	ands	r2, r1
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b05      	subs	r3, #5
 8002716:	fa00 f203 	lsl.w	r2, r0, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	635a      	str	r2, [r3, #52]	; 0x34
 8002722:	e04c      	b.n	80027be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d824      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b23      	subs	r3, #35	; 0x23
 800273e:	221f      	movs	r2, #31
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43da      	mvns	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	400a      	ands	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b23      	subs	r3, #35	; 0x23
 8002768:	fa00 f203 	lsl.w	r2, r0, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
 8002774:	e023      	b.n	80027be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b41      	subs	r3, #65	; 0x41
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b41      	subs	r3, #65	; 0x41
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_ADC_ConfigChannel+0x250>)
 80027c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_ADC_ConfigChannel+0x254>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10f      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d8>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d10b      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_ADC_ConfigChannel+0x254>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12b      	bne.n	800284e <HAL_ADC_ConfigChannel+0x23a>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_ADC_ConfigChannel+0x258>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x1f4>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b11      	cmp	r3, #17
 8002806:	d122      	bne.n	800284e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_ADC_ConfigChannel+0x258>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_ADC_ConfigChannel+0x25c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_ADC_ConfigChannel+0x260>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	0c9a      	lsrs	r2, r3, #18
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002840:	e002      	b.n	8002848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3b01      	subs	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f9      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40012300 	.word	0x40012300
 8002868:	40012000 	.word	0x40012000
 800286c:	10000012 	.word	0x10000012
 8002870:	20000010 	.word	0x20000010
 8002874:	431bde83 	.word	0x431bde83

08002878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002880:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <ADC_Init+0x1f0>)
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	431a      	orrs	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <ADC_Init+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800291e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e00f      	b.n	8002976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0202 	bic.w	r2, r2, #2
 8002984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7e1b      	ldrb	r3, [r3, #24]
 8002990:	005a      	lsls	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	3b01      	subs	r3, #1
 80029d0:	035a      	lsls	r2, r3, #13
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e007      	b.n	80029ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	051a      	lsls	r2, r3, #20
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a2e:	025a      	lsls	r2, r3, #9
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	029a      	lsls	r2, r3, #10
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40012300 	.word	0x40012300
 8002a6c:	0f000001 	.word	0x0f000001

08002a70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d13c      	bne.n	8002b04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d12b      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d127      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d119      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0220 	bic.w	r2, r2, #32
 8002ad6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7fe fa57 	bl	8000fb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b02:	e00e      	b.n	8002b22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff fd75 	bl	8002600 <HAL_ADC_ErrorCallback>
}
 8002b16:	e004      	b.n	8002b22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fd4d 	bl	80025d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff fd4a 	bl	8002600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff29 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d50:	f7ff ff3e 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff ff8e 	bl	8002c7c <NVIC_EncodePriority>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff31 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <SysTick_Config>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff f97a 	bl	80020b0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e099      	b.n	8002efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de8:	e00f      	b.n	8002e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dea:	f7ff f961 	bl	80020b0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d908      	bls.n	8002e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e078      	b.n	8002efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e8      	bne.n	8002dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_DMA_Init+0x158>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0307 	bic.w	r3, r3, #7
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d117      	bne.n	8002ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb01 	bl	80034b8 <DMA_CheckFifoParam>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e016      	b.n	8002efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fab8 	bl	800344c <DMA_CalcBaseAndBitshift>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	223f      	movs	r2, #63	; 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	f010803f 	.word	0xf010803f

08002f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Start_IT+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e040      	b.n	8002fb0 <HAL_DMA_Start_IT+0xa8>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12f      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa4a 	bl	80033f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	223f      	movs	r2, #63	; 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0216 	orr.w	r2, r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc6:	f7ff f873 	bl	80020b0 <HAL_GetTick>
 8002fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d008      	beq.n	8002fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e052      	b.n	8003090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0216 	bic.w	r2, r2, #22
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_DMA_Abort+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0208 	bic.w	r2, r2, #8
 8003028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303a:	e013      	b.n	8003064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303c:	f7ff f838 	bl	80020b0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b05      	cmp	r3, #5
 8003048:	d90c      	bls.n	8003064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e015      	b.n	8003090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e4      	bne.n	800303c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	223f      	movs	r2, #63	; 0x3f
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00c      	b.n	80030d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2205      	movs	r2, #5
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e8:	4b8e      	ldr	r3, [pc, #568]	; (8003324 <HAL_DMA_IRQHandler+0x248>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a8e      	ldr	r2, [pc, #568]	; (8003328 <HAL_DMA_IRQHandler+0x24c>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2208      	movs	r2, #8
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01a      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0204 	bic.w	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	2208      	movs	r2, #8
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2204      	movs	r2, #4
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	2204      	movs	r2, #4
 80031a2:	409a      	lsls	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2210      	movs	r2, #16
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d043      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03c      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	2210      	movs	r2, #16
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d024      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
 800320a:	e01f      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
 800321c:	e016      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0208 	bic.w	r2, r2, #8
 800323a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2220      	movs	r2, #32
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 808f 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8087 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2220      	movs	r2, #32
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d136      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x1da>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	223f      	movs	r2, #63	; 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d07e      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
        }
        return;
 80032f2:	e079      	b.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01d      	beq.n	800333e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	2b00      	cmp	r3, #0
 8003316:	d031      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e02c      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
 8003322:	bf00      	nop
 8003324:	20000010 	.word	0x20000010
 8003328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d023      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e01e      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0210 	bic.w	r2, r2, #16
 800335a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2205      	movs	r2, #5
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d307      	bcc.n	80033c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f2      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x2cc>
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e000      	b.n	80033ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e8:	bf00      	nop
    }
  }
}
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800340c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d108      	bne.n	8003430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800342e:	e007      	b.n	8003440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3b10      	subs	r3, #16
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <DMA_CalcBaseAndBitshift+0x64>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d909      	bls.n	800348e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	; 0x58
 800348c:	e007      	b.n	800349e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	aaaaaaab 	.word	0xaaaaaaab
 80034b4:	08008b38 	.word	0x08008b38

080034b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d856      	bhi.n	8003586 <DMA_CheckFifoParam+0xce>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <DMA_CheckFifoParam+0x28>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003503 	.word	0x08003503
 80034e8:	080034f1 	.word	0x080034f1
 80034ec:	08003587 	.word	0x08003587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d046      	beq.n	800358a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e043      	b.n	800358a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800350a:	d140      	bne.n	800358e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e03d      	b.n	800358e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351a:	d121      	bne.n	8003560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d837      	bhi.n	8003592 <DMA_CheckFifoParam+0xda>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <DMA_CheckFifoParam+0x70>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	0800353f 	.word	0x0800353f
 8003530:	08003539 	.word	0x08003539
 8003534:	08003551 	.word	0x08003551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e030      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d025      	beq.n	8003596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e022      	b.n	8003596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003558:	d11f      	bne.n	800359a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355e:	e01c      	b.n	800359a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d903      	bls.n	800356e <DMA_CheckFifoParam+0xb6>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d003      	beq.n	8003574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800356c:	e018      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      break;
 8003572:	e015      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e00b      	b.n	800359e <DMA_CheckFifoParam+0xe6>
      break;
 8003586:	bf00      	nop
 8003588:	e00a      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e008      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e006      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
    }
  } 
  
  return status; 
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e165      	b.n	8003898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8154 	bne.w	8003892 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d005      	beq.n	8003602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d130      	bne.n	8003664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0201 	and.w	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d017      	beq.n	80036a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80ae 	beq.w	8003892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_GPIO_Init+0x300>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_GPIO_Init+0x300>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b5a      	ldr	r3, [pc, #360]	; (80038b0 <HAL_GPIO_Init+0x300>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_GPIO_Init+0x308>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x21a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4e      	ldr	r2, [pc, #312]	; (80038bc <HAL_GPIO_Init+0x30c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x216>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4d      	ldr	r2, [pc, #308]	; (80038c0 <HAL_GPIO_Init+0x310>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x212>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4c      	ldr	r2, [pc, #304]	; (80038c4 <HAL_GPIO_Init+0x314>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x20e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <HAL_GPIO_Init+0x318>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x20a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4a      	ldr	r2, [pc, #296]	; (80038cc <HAL_GPIO_Init+0x31c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x206>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a49      	ldr	r2, [pc, #292]	; (80038d0 <HAL_GPIO_Init+0x320>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x202>
 80037ae:	2306      	movs	r3, #6
 80037b0:	e00c      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037b2:	2307      	movs	r3, #7
 80037b4:	e00a      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e008      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037ba:	2304      	movs	r3, #4
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037be:	2303      	movs	r3, #3
 80037c0:	e004      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e002      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037ca:	2300      	movs	r3, #0
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f002 0203 	and.w	r2, r2, #3
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4093      	lsls	r3, r2
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037dc:	4935      	ldr	r1, [pc, #212]	; (80038b4 <HAL_GPIO_Init+0x304>)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_GPIO_Init+0x324>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800380e:	4a31      	ldr	r2, [pc, #196]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003838:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3301      	adds	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	f67f ae96 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020c00 	.word	0x40020c00
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40021400 	.word	0x40021400
 80038d0:	40021800 	.word	0x40021800
 80038d4:	40013c00 	.word	0x40013c00

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038f4:	e003      	b.n	80038fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_PWREx_EnableOverDrive+0x90>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_PWREx_EnableOverDrive+0x90>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_PWREx_EnableOverDrive+0x90>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003938:	f7fe fbba 	bl	80020b0 <HAL_GetTick>
 800393c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800393e:	e009      	b.n	8003954 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003940:	f7fe fbb6 	bl	80020b0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800394e:	d901      	bls.n	8003954 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e01f      	b.n	8003994 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d1ee      	bne.n	8003940 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003968:	f7fe fba2 	bl	80020b0 <HAL_GetTick>
 800396c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800396e:	e009      	b.n	8003984 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003970:	f7fe fb9e 	bl	80020b0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800397e:	d901      	bls.n	8003984 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e007      	b.n	8003994 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003990:	d1ee      	bne.n	8003970 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	420e0040 	.word	0x420e0040
 80039a4:	40007000 	.word	0x40007000
 80039a8:	420e0044 	.word	0x420e0044

080039ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0cc      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d90c      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b8      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	494d      	ldr	r1, [pc, #308]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d044      	beq.n	8003acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e067      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4934      	ldr	r1, [pc, #208]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a9c:	f7fe fb08 	bl	80020b0 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe fb04 	bl	80020b0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e04f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d20c      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e032      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4916      	ldr	r1, [pc, #88]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	490e      	ldr	r1, [pc, #56]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b32:	f000 fb7f 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	490a      	ldr	r1, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fa68 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	08008b20 	.word	0x08008b20
 8003b70:	20000010 	.word	0x20000010
 8003b74:	20000014 	.word	0x20000014

08003b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000010 	.word	0x20000010

08003b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b94:	f7ff fff0 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0a9b      	lsrs	r3, r3, #10
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	08008b30 	.word	0x08008b30

08003bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bbc:	f7ff ffdc 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0b5b      	lsrs	r3, r3, #13
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08008b30 	.word	0x08008b30

08003be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c18:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	496c      	ldr	r1, [pc, #432]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d010      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c46:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	4960      	ldr	r1, [pc, #384]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4955      	ldr	r1, [pc, #340]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c92:	d101      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb0:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	4946      	ldr	r1, [pc, #280]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 808a 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d16:	f7fe f9cb 	bl	80020b0 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe f9c7 	bl	80020b0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e278      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3c:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d028      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d114      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe f995 	bl	80020b0 <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fe f991 	bl	80020b0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e240      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ee      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db8:	d114      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dce:	4902      	ldr	r1, [pc, #8]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470e40 	.word	0x42470e40
 8003de4:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a49      	ldr	r2, [pc, #292]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	4944      	ldr	r1, [pc, #272]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e14:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e24:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	4937      	ldr	r1, [pc, #220]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e46:	4b32      	ldr	r3, [pc, #200]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	492e      	ldr	r1, [pc, #184]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e68:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	4926      	ldr	r1, [pc, #152]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d101      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	491a      	ldr	r1, [pc, #104]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d011      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	4911      	ldr	r1, [pc, #68]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d101      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eec:	f040 80ff 	bne.w	80040ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef6:	f7fe f8db 	bl	80020b0 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003efc:	e00e      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003efe:	f7fe f8d7 	bl	80020b0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d907      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e188      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f10:	40023800 	.word	0x40023800
 8003f14:	424711e0 	.word	0x424711e0
 8003f18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ea      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d028      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d124      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f50:	4b71      	ldr	r3, [pc, #452]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f62:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f68:	0e1b      	lsrs	r3, r3, #24
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	4961      	ldr	r1, [pc, #388]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d035      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc4:	d130      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fde:	0f1b      	lsrs	r3, r3, #28
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	019b      	lsls	r3, r3, #6
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	431a      	orrs	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	071b      	lsls	r3, r3, #28
 8004008:	4943      	ldr	r1, [pc, #268]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004016:	f023 021f 	bic.w	r2, r3, #31
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	493d      	ldr	r1, [pc, #244]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d029      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403c:	d124      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800403e:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004056:	0f1b      	lsrs	r3, r3, #28
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	019b      	lsls	r3, r3, #6
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	431a      	orrs	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	071b      	lsls	r3, r3, #28
 8004080:	4925      	ldr	r1, [pc, #148]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	2b00      	cmp	r3, #0
 8004092:	d016      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	4917      	ldr	r1, [pc, #92]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c8:	f7fd fff2 	bl	80020b0 <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040d0:	f7fd ffee 	bl	80020b0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e09f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	f040 8095 	bne.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fd ffd8 	bl	80020b0 <HAL_GetTick>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004102:	e00f      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004104:	f7fd ffd4 	bl	80020b0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d908      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e085      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	42470068 	.word	0x42470068
 8004120:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004130:	d0e8      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02b      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	d127      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800415a:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	3301      	adds	r3, #1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	431a      	orrs	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	3b01      	subs	r3, #1
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	4928      	ldr	r1, [pc, #160]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004196:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	3b01      	subs	r3, #1
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	4922      	ldr	r1, [pc, #136]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01d      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041be:	d118      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	0e1b      	lsrs	r3, r3, #24
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	019b      	lsls	r3, r3, #6
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	4910      	ldr	r1, [pc, #64]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041f8:	f7fd ff5a 	bl	80020b0 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004200:	f7fd ff56 	bl	80020b0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e007      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800421e:	d1ef      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3730      	adds	r7, #48	; 0x30
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	42470070 	.word	0x42470070

08004234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b0ae      	sub	sp, #184	; 0xb8
 800423a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425a:	4bcb      	ldr	r3, [pc, #812]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b0c      	cmp	r3, #12
 8004264:	f200 8206 	bhi.w	8004674 <HAL_RCC_GetSysClockFreq+0x440>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCC_GetSysClockFreq+0x3c>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042a5 	.word	0x080042a5
 8004274:	08004675 	.word	0x08004675
 8004278:	08004675 	.word	0x08004675
 800427c:	08004675 	.word	0x08004675
 8004280:	080042ad 	.word	0x080042ad
 8004284:	08004675 	.word	0x08004675
 8004288:	08004675 	.word	0x08004675
 800428c:	08004675 	.word	0x08004675
 8004290:	080042b5 	.word	0x080042b5
 8004294:	08004675 	.word	0x08004675
 8004298:	08004675 	.word	0x08004675
 800429c:	08004675 	.word	0x08004675
 80042a0:	080044a5 	.word	0x080044a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4bb9      	ldr	r3, [pc, #740]	; (800458c <HAL_RCC_GetSysClockFreq+0x358>)
 80042a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80042aa:	e1e7      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ac:	4bb8      	ldr	r3, [pc, #736]	; (8004590 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042b2:	e1e3      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4bb4      	ldr	r3, [pc, #720]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c0:	4bb1      	ldr	r3, [pc, #708]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d071      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042cc:	4bae      	ldr	r3, [pc, #696]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80042dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042f2:	4622      	mov	r2, r4
 80042f4:	462b      	mov	r3, r5
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004304:	0150      	lsls	r0, r2, #5
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4621      	mov	r1, r4
 800430c:	1a51      	subs	r1, r2, r1
 800430e:	6439      	str	r1, [r7, #64]	; 0x40
 8004310:	4629      	mov	r1, r5
 8004312:	eb63 0301 	sbc.w	r3, r3, r1
 8004316:	647b      	str	r3, [r7, #68]	; 0x44
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004324:	4649      	mov	r1, r9
 8004326:	018b      	lsls	r3, r1, #6
 8004328:	4641      	mov	r1, r8
 800432a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800432e:	4641      	mov	r1, r8
 8004330:	018a      	lsls	r2, r1, #6
 8004332:	4641      	mov	r1, r8
 8004334:	1a51      	subs	r1, r2, r1
 8004336:	63b9      	str	r1, [r7, #56]	; 0x38
 8004338:	4649      	mov	r1, r9
 800433a:	eb63 0301 	sbc.w	r3, r3, r1
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800434c:	4649      	mov	r1, r9
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4641      	mov	r1, r8
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4641      	mov	r1, r8
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4622      	mov	r2, r4
 8004362:	189b      	adds	r3, r3, r2
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	462b      	mov	r3, r5
 8004368:	460a      	mov	r2, r1
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800437c:	4629      	mov	r1, r5
 800437e:	024b      	lsls	r3, r1, #9
 8004380:	4621      	mov	r1, r4
 8004382:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004386:	4621      	mov	r1, r4
 8004388:	024a      	lsls	r2, r1, #9
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800439c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80043a0:	f7fc fbac 	bl	8000afc <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ae:	e067      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b0:	4b75      	ldr	r3, [pc, #468]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80043c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ca:	2300      	movs	r3, #0
 80043cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	f04f 0000 	mov.w	r0, #0
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	0159      	lsls	r1, r3, #5
 80043e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e4:	0150      	lsls	r0, r2, #5
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4621      	mov	r1, r4
 80043ec:	1a51      	subs	r1, r2, r1
 80043ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80043f0:	4629      	mov	r1, r5
 80043f2:	eb63 0301 	sbc.w	r3, r3, r1
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004404:	4649      	mov	r1, r9
 8004406:	018b      	lsls	r3, r1, #6
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800440e:	4641      	mov	r1, r8
 8004410:	018a      	lsls	r2, r1, #6
 8004412:	4641      	mov	r1, r8
 8004414:	ebb2 0a01 	subs.w	sl, r2, r1
 8004418:	4649      	mov	r1, r9
 800441a:	eb63 0b01 	sbc.w	fp, r3, r1
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800442a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800442e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004432:	4692      	mov	sl, r2
 8004434:	469b      	mov	fp, r3
 8004436:	4623      	mov	r3, r4
 8004438:	eb1a 0303 	adds.w	r3, sl, r3
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	462b      	mov	r3, r5
 8004440:	eb4b 0303 	adc.w	r3, fp, r3
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004452:	4629      	mov	r1, r5
 8004454:	028b      	lsls	r3, r1, #10
 8004456:	4621      	mov	r1, r4
 8004458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800445c:	4621      	mov	r1, r4
 800445e:	028a      	lsls	r2, r1, #10
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004468:	2200      	movs	r2, #0
 800446a:	673b      	str	r3, [r7, #112]	; 0x70
 800446c:	677a      	str	r2, [r7, #116]	; 0x74
 800446e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004472:	f7fc fb43 	bl	8000afc <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4613      	mov	r3, r2
 800447c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004480:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044a2:	e0eb      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b0:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d06b      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044bc:	4b32      	ldr	r3, [pc, #200]	; (8004588 <HAL_RCC_GetSysClockFreq+0x354>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	099b      	lsrs	r3, r3, #6
 80044c2:	2200      	movs	r2, #0
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	663b      	str	r3, [r7, #96]	; 0x60
 80044d0:	2300      	movs	r3, #0
 80044d2:	667b      	str	r3, [r7, #100]	; 0x64
 80044d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	f04f 0000 	mov.w	r0, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	0159      	lsls	r1, r3, #5
 80044e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ea:	0150      	lsls	r0, r2, #5
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4621      	mov	r1, r4
 80044f2:	1a51      	subs	r1, r2, r1
 80044f4:	61b9      	str	r1, [r7, #24]
 80044f6:	4629      	mov	r1, r5
 80044f8:	eb63 0301 	sbc.w	r3, r3, r1
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800450a:	4659      	mov	r1, fp
 800450c:	018b      	lsls	r3, r1, #6
 800450e:	4651      	mov	r1, sl
 8004510:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004514:	4651      	mov	r1, sl
 8004516:	018a      	lsls	r2, r1, #6
 8004518:	4651      	mov	r1, sl
 800451a:	ebb2 0801 	subs.w	r8, r2, r1
 800451e:	4659      	mov	r1, fp
 8004520:	eb63 0901 	sbc.w	r9, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004538:	4690      	mov	r8, r2
 800453a:	4699      	mov	r9, r3
 800453c:	4623      	mov	r3, r4
 800453e:	eb18 0303 	adds.w	r3, r8, r3
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	462b      	mov	r3, r5
 8004546:	eb49 0303 	adc.w	r3, r9, r3
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004558:	4629      	mov	r1, r5
 800455a:	024b      	lsls	r3, r1, #9
 800455c:	4621      	mov	r1, r4
 800455e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004562:	4621      	mov	r1, r4
 8004564:	024a      	lsls	r2, r1, #9
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456e:	2200      	movs	r2, #0
 8004570:	65bb      	str	r3, [r7, #88]	; 0x58
 8004572:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004574:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004578:	f7fc fac0 	bl	8000afc <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004586:	e065      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x420>
 8004588:	40023800 	.word	0x40023800
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004594:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCC_GetSysClockFreq+0x458>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	2200      	movs	r2, #0
 800459c:	4618      	mov	r0, r3
 800459e:	4611      	mov	r1, r2
 80045a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045a4:	653b      	str	r3, [r7, #80]	; 0x50
 80045a6:	2300      	movs	r3, #0
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
 80045aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80045ae:	4642      	mov	r2, r8
 80045b0:	464b      	mov	r3, r9
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	0159      	lsls	r1, r3, #5
 80045bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c0:	0150      	lsls	r0, r2, #5
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4641      	mov	r1, r8
 80045c8:	1a51      	subs	r1, r2, r1
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	4649      	mov	r1, r9
 80045ce:	eb63 0301 	sbc.w	r3, r3, r1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045e0:	4659      	mov	r1, fp
 80045e2:	018b      	lsls	r3, r1, #6
 80045e4:	4651      	mov	r1, sl
 80045e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ea:	4651      	mov	r1, sl
 80045ec:	018a      	lsls	r2, r1, #6
 80045ee:	4651      	mov	r1, sl
 80045f0:	1a54      	subs	r4, r2, r1
 80045f2:	4659      	mov	r1, fp
 80045f4:	eb63 0501 	sbc.w	r5, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	00eb      	lsls	r3, r5, #3
 8004602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004606:	00e2      	lsls	r2, r4, #3
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	4643      	mov	r3, r8
 800460e:	18e3      	adds	r3, r4, r3
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	464b      	mov	r3, r9
 8004614:	eb45 0303 	adc.w	r3, r5, r3
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004626:	4629      	mov	r1, r5
 8004628:	028b      	lsls	r3, r1, #10
 800462a:	4621      	mov	r1, r4
 800462c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004630:	4621      	mov	r1, r4
 8004632:	028a      	lsls	r2, r1, #10
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800463c:	2200      	movs	r2, #0
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004640:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004642:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004646:	f7fc fa59 	bl	8000afc <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4613      	mov	r3, r2
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCC_GetSysClockFreq+0x458>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0f1b      	lsrs	r3, r3, #28
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004672:	e003      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800467a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004680:	4618      	mov	r0, r3
 8004682:	37b8      	adds	r7, #184	; 0xb8
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400

08004694 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e28d      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8083 	beq.w	80047ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046b4:	4b94      	ldr	r3, [pc, #592]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d019      	beq.n	80046f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046c0:	4b91      	ldr	r3, [pc, #580]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046cc:	4b8e      	ldr	r3, [pc, #568]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d8:	d00c      	beq.n	80046f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b8b      	ldr	r3, [pc, #556]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d112      	bne.n	800470c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e6:	4b88      	ldr	r3, [pc, #544]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f2:	d10b      	bne.n	800470c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	4b84      	ldr	r3, [pc, #528]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d05b      	beq.n	80047b8 <HAL_RCC_OscConfig+0x124>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d157      	bne.n	80047b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e25a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x90>
 8004716:	4b7c      	ldr	r3, [pc, #496]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7b      	ldr	r2, [pc, #492]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e01d      	b.n	8004760 <HAL_RCC_OscConfig+0xcc>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0xb4>
 800472e:	4b76      	ldr	r3, [pc, #472]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a75      	ldr	r2, [pc, #468]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a72      	ldr	r2, [pc, #456]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0xcc>
 8004748:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6e      	ldr	r2, [pc, #440]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800474e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b6c      	ldr	r3, [pc, #432]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6b      	ldr	r2, [pc, #428]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800475a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd fca2 	bl	80020b0 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004770:	f7fd fc9e 	bl	80020b0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	; 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e21f      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	4b61      	ldr	r3, [pc, #388]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0xdc>
 800478e:	e014      	b.n	80047ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd fc8e 	bl	80020b0 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd fc8a 	bl	80020b0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e20b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	4b57      	ldr	r3, [pc, #348]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x104>
 80047b6:	e000      	b.n	80047ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d06f      	beq.n	80048a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047c6:	4b50      	ldr	r3, [pc, #320]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d017      	beq.n	8004802 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047d2:	4b4d      	ldr	r3, [pc, #308]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047de:	4b4a      	ldr	r3, [pc, #296]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ea:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d11c      	bne.n	8004830 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b44      	ldr	r3, [pc, #272]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d116      	bne.n	8004830 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	4b41      	ldr	r3, [pc, #260]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_RCC_OscConfig+0x186>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e1d3      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4937      	ldr	r1, [pc, #220]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	e03a      	b.n	80048a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004838:	4b34      	ldr	r3, [pc, #208]	; (800490c <HAL_RCC_OscConfig+0x278>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fd fc37 	bl	80020b0 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004846:	f7fd fc33 	bl	80020b0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e1b4      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004864:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4925      	ldr	r1, [pc, #148]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e015      	b.n	80048a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_OscConfig+0x278>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fc16 	bl	80020b0 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004888:	f7fd fc12 	bl	80020b0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e193      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d036      	beq.n	8004920 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd fbf6 	bl	80020b0 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c8:	f7fd fbf2 	bl	80020b0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e173      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x274>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x234>
 80048e6:	e01b      	b.n	8004920 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd fbdf 	bl	80020b0 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	e00e      	b.n	8004914 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f6:	f7fd fbdb 	bl	80020b0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d907      	bls.n	8004914 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e15c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
 8004908:	40023800 	.word	0x40023800
 800490c:	42470000 	.word	0x42470000
 8004910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	4b8a      	ldr	r3, [pc, #552]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ea      	bne.n	80048f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8097 	beq.w	8004a5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004932:	4b83      	ldr	r3, [pc, #524]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	4b7f      	ldr	r3, [pc, #508]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4a7e      	ldr	r2, [pc, #504]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6413      	str	r3, [r2, #64]	; 0x40
 800494e:	4b7c      	ldr	r3, [pc, #496]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b79      	ldr	r3, [pc, #484]	; (8004b44 <HAL_RCC_OscConfig+0x4b0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x4b0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a75      	ldr	r2, [pc, #468]	; (8004b44 <HAL_RCC_OscConfig+0x4b0>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fd fb9b 	bl	80020b0 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497e:	f7fd fb97 	bl	80020b0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e118      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	4b6c      	ldr	r3, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x4b0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x31e>
 80049a4:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
 80049b0:	e01c      	b.n	80049ec <HAL_RCC_OscConfig+0x358>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x340>
 80049ba:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a60      	ldr	r2, [pc, #384]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70
 80049c6:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a5d      	ldr	r2, [pc, #372]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0x358>
 80049d4:	4b5a      	ldr	r3, [pc, #360]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a59      	ldr	r2, [pc, #356]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	4b57      	ldr	r3, [pc, #348]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a56      	ldr	r2, [pc, #344]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 80049e6:	f023 0304 	bic.w	r3, r3, #4
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fd fb5c 	bl	80020b0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fd fb58 	bl	80020b0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e0d7      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a12:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0ee      	beq.n	80049fc <HAL_RCC_OscConfig+0x368>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fb46 	bl	80020b0 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd fb42 	bl	80020b0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0c1      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3e:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ee      	bne.n	8004a28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80ad 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d060      	beq.n	8004b34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d145      	bne.n	8004b06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <HAL_RCC_OscConfig+0x4b4>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd fb16 	bl	80020b0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd fb12 	bl	80020b0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e093      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	061b      	lsls	r3, r3, #24
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	071b      	lsls	r3, r3, #28
 8004ad2:	491b      	ldr	r1, [pc, #108]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x4b4>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ade:	f7fd fae7 	bl	80020b0 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fd fae3 	bl	80020b0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e064      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x452>
 8004b04:	e05c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <HAL_RCC_OscConfig+0x4b4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fd fad0 	bl	80020b0 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fd facc 	bl	80020b0 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04d      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x480>
 8004b32:	e045      	b.n	8004bc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e040      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40007000 	.word	0x40007000
 8004b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b4c:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <HAL_RCC_OscConfig+0x538>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d030      	beq.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d129      	bne.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d122      	bne.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d119      	bne.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	3b01      	subs	r3, #1
 8004b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d10f      	bne.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800

08004bd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e066      	b.n	8004cb4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7f5b      	ldrb	r3, [r3, #29]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd f832 	bl	8001c60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	22ca      	movs	r2, #202	; 0xca
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2253      	movs	r2, #83	; 0x53
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f998 	bl	8004f48 <RTC_EnterInitMode>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12c      	bne.n	8004c7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68d2      	ldr	r2, [r2, #12]
 8004c5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6919      	ldr	r1, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	041a      	lsls	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f99f 	bl	8004fb6 <RTC_ExitInitMode>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	22ff      	movs	r2, #255	; 0xff
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	7f1b      	ldrb	r3, [r3, #28]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RTC_SetTime+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e087      	b.n	8004de8 <HAL_RTC_SetTime+0x12c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d126      	bne.n	8004d38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f97c 	bl	8005000 <RTC_ByteToBcd2>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f975 	bl	8005000 <RTC_ByteToBcd2>
 8004d16:	4603      	mov	r3, r0
 8004d18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	789b      	ldrb	r3, [r3, #2]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f96d 	bl	8005000 <RTC_ByteToBcd2>
 8004d26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e018      	b.n	8004d6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	22ca      	movs	r2, #202	; 0xca
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2253      	movs	r2, #83	; 0x53
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8e4 	bl	8004f48 <RTC_EnterInitMode>
 8004d80:	4603      	mov	r3, r0
 8004d82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8f7 	bl	8004fb6 <RTC_ExitInitMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	771a      	strb	r2, [r3, #28]

  return status;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}

08004df0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	7f1b      	ldrb	r3, [r3, #28]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_RTC_SetDate+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e071      	b.n	8004ef0 <HAL_RTC_SetDate+0x100>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2202      	movs	r2, #2
 8004e16:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <HAL_RTC_SetDate+0x4c>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	330a      	adds	r3, #10
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11c      	bne.n	8004e7c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	78db      	ldrb	r3, [r3, #3]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f8da 	bl	8005000 <RTC_ByteToBcd2>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f8d3 	bl	8005000 <RTC_ByteToBcd2>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e5e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	789b      	ldrb	r3, [r3, #2]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f8cb 	bl	8005000 <RTC_ByteToBcd2>
 8004e6a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e6c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e00e      	b.n	8004e9a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	78db      	ldrb	r3, [r3, #3]
 8004e80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e88:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ca      	movs	r2, #202	; 0xca
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2253      	movs	r2, #83	; 0x53
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f84c 	bl	8004f48 <RTC_EnterInitMode>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ec4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ec8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f873 	bl	8004fb6 <RTC_ExitInitMode>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	771a      	strb	r2, [r3, #28]

  return status;
 8004eee:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd90      	pop	{r4, r7, pc}

08004ef8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f14:	f7fd f8cc 	bl	80020b0 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f1a:	e009      	b.n	8004f30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f1c:	f7fd f8c8 	bl	80020b0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2a:	d901      	bls.n	8004f30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e007      	b.n	8004f40 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ee      	beq.n	8004f1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d122      	bne.n	8004fac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f76:	f7fd f89b 	bl	80020b0 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f7c:	e00c      	b.n	8004f98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f7e:	f7fd f897 	bl	80020b0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f8c:	d904      	bls.n	8004f98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <RTC_EnterInitMode+0x64>
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d1e8      	bne.n	8004f7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff89 	bl	8004ef8 <HAL_RTC_WaitForSynchro>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800500e:	e005      	b.n	800501c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	3301      	adds	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	3b0a      	subs	r3, #10
 800501a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	2b09      	cmp	r3, #9
 8005020:	d8f6      	bhi.n	8005010 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	b2da      	uxtb	r2, r3
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	4313      	orrs	r3, r2
 800502c:	b2db      	uxtb	r3, r3
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e07b      	b.n	8005144 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d108      	bne.n	8005066 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505c:	d009      	beq.n	8005072 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	61da      	str	r2, [r3, #28]
 8005064:	e005      	b.n	8005072 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fc fe11 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	ea42 0103 	orr.w	r1, r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	f003 0104 	and.w	r1, r3, #4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0210 	and.w	r2, r3, #16
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005132:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08c      	sub	sp, #48	; 0x30
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800515a:	2301      	movs	r3, #1
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x26>
 800516e:	2302      	movs	r3, #2
 8005170:	e18a      	b.n	8005488 <HAL_SPI_TransmitReceive+0x33c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517a:	f7fc ff99 	bl	80020b0 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005198:	2b01      	cmp	r3, #1
 800519a:	d00f      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x70>
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d107      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x68>
 80051ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d003      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051ba:	e15b      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x82>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x82>
 80051c8:	887b      	ldrh	r3, [r7, #2]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051d4:	e14e      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d003      	beq.n	80051ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2205      	movs	r2, #5
 80051e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	887a      	ldrh	r2, [r7, #2]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	887a      	ldrh	r2, [r7, #2]
 800520c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	887a      	ldrh	r2, [r7, #2]
 8005212:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d007      	beq.n	800523e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005246:	d178      	bne.n	800533a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x10a>
 8005250:	8b7b      	ldrh	r3, [r7, #26]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d166      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	881a      	ldrh	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	1c9a      	adds	r2, r3, #2
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527a:	e053      	b.n	8005324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	d11b      	bne.n	80052c2 <HAL_SPI_TransmitReceive+0x176>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d016      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x176>
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d113      	bne.n	80052c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	881a      	ldrh	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	1c9a      	adds	r2, r3, #2
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d119      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x1b8>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d014      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	b292      	uxth	r2, r2
 80052e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	1c9a      	adds	r2, r3, #2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005304:	f7fc fed4 	bl	80020b0 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005310:	429a      	cmp	r2, r3
 8005312:	d807      	bhi.n	8005324 <HAL_SPI_TransmitReceive+0x1d8>
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d003      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005322:	e0a7      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1a6      	bne.n	800527c <HAL_SPI_TransmitReceive+0x130>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1a1      	bne.n	800527c <HAL_SPI_TransmitReceive+0x130>
 8005338:	e07c      	b.n	8005434 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x1fc>
 8005342:	8b7b      	ldrh	r3, [r7, #26]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d16b      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800536e:	e057      	b.n	8005420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d11c      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x26c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d017      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x26c>
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d114      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d119      	bne.n	80053fa <HAL_SPI_TransmitReceive+0x2ae>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d014      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053f6:	2301      	movs	r3, #1
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053fa:	f7fc fe59 	bl	80020b0 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_TransmitReceive+0x2c6>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d102      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x2cc>
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800541e:	e029      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1a2      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x224>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d19d      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f8b1 	bl	80055a0 <SPI_EndRxTxTransaction>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005450:	e010      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e000      	b.n	8005474 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005488:	4618      	mov	r0, r3
 800548a:	3730      	adds	r7, #48	; 0x30
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054a0:	f7fc fe06 	bl	80020b0 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054b0:	f7fc fdfe 	bl	80020b0 <HAL_GetTick>
 80054b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	015b      	lsls	r3, r3, #5
 80054bc:	0d1b      	lsrs	r3, r3, #20
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c6:	e054      	b.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d050      	beq.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054d0:	f7fc fdee 	bl	80020b0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d902      	bls.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d13d      	bne.n	8005562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fe:	d111      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005508:	d004      	beq.n	8005514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d107      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552c:	d10f      	bne.n	800554e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800554c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e017      	b.n	8005592 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	3b01      	subs	r3, #1
 8005570:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4013      	ands	r3, r2
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	429a      	cmp	r2, r3
 800558e:	d19b      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3720      	adds	r7, #32
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000010 	.word	0x20000010

080055a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <SPI_EndRxTxTransaction+0x7c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <SPI_EndRxTxTransaction+0x80>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	0d5b      	lsrs	r3, r3, #21
 80055b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ca:	d112      	bne.n	80055f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff ff5a 	bl	8005490 <SPI_WaitFlagStateUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d0f2      	beq.n	80055f2 <SPI_EndRxTxTransaction+0x52>
 800560c:	e000      	b.n	8005610 <SPI_EndRxTxTransaction+0x70>
        break;
 800560e:	bf00      	nop
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000010 	.word	0x20000010
 8005620:	165e9f81 	.word	0x165e9f81

08005624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e041      	b.n	80056ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc fb7a 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fa8e 	bl	8005b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e046      	b.n	800576a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a23      	ldr	r2, [pc, #140]	; (8005778 <HAL_TIM_Base_Start+0xb4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d01d      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_TIM_Base_Start+0xb8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_TIM_Base_Start+0xbc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_TIM_Base_Start+0xc0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIM_Base_Start+0xc4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_TIM_Base_Start+0xc8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIM_Base_Start+0x70>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIM_Base_Start+0xcc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d111      	bne.n	8005758 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b06      	cmp	r3, #6
 8005744:	d010      	beq.n	8005768 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005756:	e007      	b.n	8005768 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9b5 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9a7 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f9b8 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0204 	mvn.w	r2, #4
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f98b 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f97d 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f98e 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f961 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f953 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f964 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f937 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f929 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f93a 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fcde 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fae0 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8ff 	bl	8005b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b20      	cmp	r3, #32
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b20      	cmp	r3, #32
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0220 	mvn.w	r2, #32
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 faaa 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_ConfigClockSource+0x1c>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0b4      	b.n	8005b2a <HAL_TIM_ConfigClockSource+0x186>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d03e      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0xd4>
 80059fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fe:	f200 8087 	bhi.w	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	f000 8086 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x172>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d87f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d01a      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xa6>
 8005a14:	2b70      	cmp	r3, #112	; 0x70
 8005a16:	d87b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b60      	cmp	r3, #96	; 0x60
 8005a1a:	d050      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x11a>
 8005a1c:	2b60      	cmp	r3, #96	; 0x60
 8005a1e:	d877      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d03c      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xfa>
 8005a24:	2b50      	cmp	r3, #80	; 0x50
 8005a26:	d873      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d058      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x13a>
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d86f      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d064      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d86b      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d060      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d867      	bhi.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d05c      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d05a      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	e062      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6899      	ldr	r1, [r3, #8]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f000 f9ad 	bl	8005db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	609a      	str	r2, [r3, #8]
      break;
 8005a76:	e04f      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f000 f996 	bl	8005db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a9a:	609a      	str	r2, [r3, #8]
      break;
 8005a9c:	e03c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f90a 	bl	8005cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2150      	movs	r1, #80	; 0x50
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f963 	bl	8005d82 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e02c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f929 	bl	8005d22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2160      	movs	r1, #96	; 0x60
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f953 	bl	8005d82 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e01c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 f8ea 	bl	8005cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2140      	movs	r1, #64	; 0x40
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f943 	bl	8005d82 <TIM_ITRx_SetConfig>
      break;
 8005afc:	e00c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 f93a 	bl	8005d82 <TIM_ITRx_SetConfig>
      break;
 8005b0e:	e003      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e000      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3d      	ldr	r2, [pc, #244]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d027      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d023      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01f      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d017      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_Base_SetConfig+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <TIM_Base_SetConfig+0x12c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00f      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <TIM_Base_SetConfig+0x130>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <TIM_Base_SetConfig+0x134>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <TIM_Base_SetConfig+0x138>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <TIM_Base_SetConfig+0x13c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d108      	bne.n	8005c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d103      	bne.n	8005c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	615a      	str	r2, [r3, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800
 8005cb8:	40001800 	.word	0x40001800
 8005cbc:	40001c00 	.word	0x40001c00
 8005cc0:	40002000 	.word	0x40002000

08005cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f023 030a 	bic.w	r3, r3, #10
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b087      	sub	sp, #28
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0210 	bic.w	r2, r3, #16
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	031b      	lsls	r3, r3, #12
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f043 0307 	orr.w	r3, r3, #7
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	021a      	lsls	r2, r3, #8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e05a      	b.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d01d      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a15      	ldr	r2, [pc, #84]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10c      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40001800 	.word	0x40001800

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e03f      	b.n	8005faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb ff3c 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fdd5 	bl	8006b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	; 0x28
 8005fb6:	af02      	add	r7, sp, #8
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d17c      	bne.n	80060cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_UART_Transmit+0x2c>
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e075      	b.n	80060ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Transmit+0x3e>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e06e      	b.n	80060ce <HAL_UART_Transmit+0x11c>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2221      	movs	r2, #33	; 0x21
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006006:	f7fc f853 	bl	80020b0 <HAL_GetTick>
 800600a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d108      	bne.n	8006034 <HAL_UART_Transmit+0x82>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e003      	b.n	800603c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006044:	e02a      	b.n	800609c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2200      	movs	r2, #0
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fb15 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e036      	b.n	80060ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3302      	adds	r3, #2
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	e007      	b.n	800608e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1cf      	bne.n	8006046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2140      	movs	r1, #64	; 0x40
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fae5 	bl	8006680 <UART_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d11d      	bne.n	800612c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_UART_Receive_IT+0x26>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e016      	b.n	800612e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_UART_Receive_IT+0x38>
 800610a:	2302      	movs	r3, #2
 800610c:	e00f      	b.n	800612e <HAL_UART_Receive_IT+0x58>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	461a      	mov	r2, r3
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fb1a 	bl	800675c <UART_Start_Receive_IT>
 8006128:	4603      	mov	r3, r0
 800612a:	e000      	b.n	800612e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b0ba      	sub	sp, #232	; 0xe8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbfd 	bl	8006996 <UART_Receive_IT>
      return;
 800619c:	e256      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800619e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80de 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
 80061a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80d1 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
 800623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 81ed 	beq.w	8006642 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fb88 	bl	8006996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_UART_IRQHandler+0x17a>
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04f      	beq.n	8006352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa90 	bl	80067d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d141      	bne.n	800634a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800630a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1d9      	bne.n	80062c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d013      	beq.n	8006342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4a7d      	ldr	r2, [pc, #500]	; (8006514 <HAL_UART_IRQHandler+0x3dc>)
 8006320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc feb6 	bl	8003098 <HAL_DMA_Abort_IT>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e00e      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f986 	bl	8006654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	e00a      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f982 	bl	8006654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	e006      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f97e 	bl	8006654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800635e:	e170      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	bf00      	nop
    return;
 8006362:	e16e      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	2b01      	cmp	r3, #1
 800636a:	f040 814a 	bne.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8143 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 813c 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	f040 80b4 	bne.w	8006518 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8140 	beq.w	8006646 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f080 8139 	bcs.w	8006646 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	f000 8088 	beq.w	80064fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800641a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800642e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1d9      	bne.n	80063ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800645a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800645e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800646c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e1      	bne.n	8006436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800649c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fc fd5f 	bl	8002fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006502:	b29b      	uxth	r3, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8ac 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006510:	e099      	b.n	8006646 <HAL_UART_IRQHandler+0x50e>
 8006512:	bf00      	nop
 8006514:	0800689f 	.word	0x0800689f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 808b 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8086 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006562:	647a      	str	r2, [r7, #68]	; 0x44
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e3      	bne.n	800653e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	623b      	str	r3, [r7, #32]
   return(result);
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800659a:	633a      	str	r2, [r7, #48]	; 0x30
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
 80065d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	617b      	str	r3, [r7, #20]
   return(result);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e3      	bne.n	80065bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f834 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006600:	e023      	b.n	800664a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f953 	bl	80068c6 <UART_Transmit_IT>
    return;
 8006620:	e014      	b.n	800664c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
 800662e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f993 	bl	8006966 <UART_EndTransmit_IT>
    return;
 8006640:	e004      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    return;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 800664a:	bf00      	nop
  }
}
 800664c:	37e8      	adds	r7, #232	; 0xe8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b090      	sub	sp, #64	; 0x40
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006690:	e050      	b.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d04c      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800669a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066a0:	f7fb fd06 	bl	80020b0 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d241      	bcs.n	8006734 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066d0:	637a      	str	r2, [r7, #52]	; 0x34
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	613b      	str	r3, [r7, #16]
   return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006704:	623a      	str	r2, [r7, #32]
 8006706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	69f9      	ldr	r1, [r7, #28]
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	61bb      	str	r3, [r7, #24]
   return(result);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e5      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e00f      	b.n	8006754 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	d09f      	beq.n	8006692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3740      	adds	r7, #64	; 0x40
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2222      	movs	r2, #34	; 0x22
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0220 	orr.w	r2, r2, #32
 80067c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b095      	sub	sp, #84	; 0x54
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006800:	643a      	str	r2, [r7, #64]	; 0x40
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	61fb      	str	r3, [r7, #28]
   return(result);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	64bb      	str	r3, [r7, #72]	; 0x48
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800683a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d119      	bne.n	8006884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0310 	bic.w	r3, r3, #16
 8006866:	647b      	str	r3, [r7, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006870:	61ba      	str	r2, [r7, #24]
 8006872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	613b      	str	r3, [r7, #16]
   return(result);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e5      	bne.n	8006850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006892:	bf00      	nop
 8006894:	3754      	adds	r7, #84	; 0x54
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff fecb 	bl	8006654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b21      	cmp	r3, #33	; 0x21
 80068d8:	d13e      	bne.n	8006958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d114      	bne.n	800690e <UART_Transmit_IT+0x48>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]
 800690c:	e008      	b.n	8006920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6211      	str	r1, [r2, #32]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fa fd12 	bl	80013b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08c      	sub	sp, #48	; 0x30
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b22      	cmp	r3, #34	; 0x22
 80069a8:	f040 80ab 	bne.w	8006b02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d117      	bne.n	80069e6 <UART_Receive_IT+0x50>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
 80069e4:	e026      	b.n	8006a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f8:	d007      	beq.n	8006a0a <UART_Receive_IT+0x74>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <UART_Receive_IT+0x82>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e008      	b.n	8006a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4619      	mov	r1, r3
 8006a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d15a      	bne.n	8006afe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0220 	bic.w	r2, r2, #32
 8006a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d135      	bne.n	8006af4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aae:	623a      	str	r2, [r7, #32]
 8006ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d10a      	bne.n	8006ae6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fdbb 	bl	8006668 <HAL_UARTEx_RxEventCallback>
 8006af2:	e002      	b.n	8006afa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fa fc37 	bl	8001368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e002      	b.n	8006b04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e000      	b.n	8006b04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
  }
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b10:	b0c0      	sub	sp, #256	; 0x100
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	68d9      	ldr	r1, [r3, #12]
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	ea40 0301 	orr.w	r3, r0, r1
 8006b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b64:	f021 010c 	bic.w	r1, r1, #12
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b72:	430b      	orrs	r3, r1
 8006b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	6999      	ldr	r1, [r3, #24]
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	ea40 0301 	orr.w	r3, r0, r1
 8006b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b8f      	ldr	r3, [pc, #572]	; (8006dd8 <UART_SetConfig+0x2cc>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d005      	beq.n	8006bac <UART_SetConfig+0xa0>
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b8d      	ldr	r3, [pc, #564]	; (8006ddc <UART_SetConfig+0x2d0>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d104      	bne.n	8006bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bac:	f7fd f804 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8006bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bb4:	e003      	b.n	8006bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb6:	f7fc ffeb 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 8006bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc8:	f040 810c 	bne.w	8006de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	1891      	adds	r1, r2, r2
 8006be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006be6:	415b      	adcs	r3, r3
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bee:	4621      	mov	r1, r4
 8006bf0:	eb12 0801 	adds.w	r8, r2, r1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	eb43 0901 	adc.w	r9, r3, r1
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0e:	4690      	mov	r8, r2
 8006c10:	4699      	mov	r9, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	eb18 0303 	adds.w	r3, r8, r3
 8006c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb49 0303 	adc.w	r3, r9, r3
 8006c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	18db      	adds	r3, r3, r3
 8006c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c40:	4613      	mov	r3, r2
 8006c42:	eb42 0303 	adc.w	r3, r2, r3
 8006c46:	657b      	str	r3, [r7, #84]	; 0x54
 8006c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c50:	f7f9 ff54 	bl	8000afc <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b61      	ldr	r3, [pc, #388]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	011c      	lsls	r4, r3, #4
 8006c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	1891      	adds	r1, r2, r2
 8006c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c7c:	415b      	adcs	r3, r3
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c84:	4641      	mov	r1, r8
 8006c86:	eb12 0a01 	adds.w	sl, r2, r1
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca4:	4692      	mov	sl, r2
 8006ca6:	469b      	mov	fp, r3
 8006ca8:	4643      	mov	r3, r8
 8006caa:	eb1a 0303 	adds.w	r3, sl, r3
 8006cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	18db      	adds	r3, r3, r3
 8006cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ce6:	f7f9 ff09 	bl	8000afc <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4b3b      	ldr	r3, [pc, #236]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2264      	movs	r2, #100	; 0x64
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	1acb      	subs	r3, r1, r3
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d06:	4b36      	ldr	r3, [pc, #216]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006d08:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d14:	441c      	add	r4, r3
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d30:	415b      	adcs	r3, r3
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006da2:	f7f9 feab 	bl	8000afc <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	3332      	adds	r3, #50	; 0x32
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <UART_SetConfig+0x2d4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 0207 	and.w	r2, r3, #7
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4422      	add	r2, r4
 8006dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd4:	e106      	b.n	8006fe4 <UART_SetConfig+0x4d8>
 8006dd6:	bf00      	nop
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	40011400 	.word	0x40011400
 8006de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	1891      	adds	r1, r2, r2
 8006dfc:	6239      	str	r1, [r7, #32]
 8006dfe:	415b      	adcs	r3, r3
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
 8006e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e06:	4641      	mov	r1, r8
 8006e08:	1854      	adds	r4, r2, r1
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	eb43 0501 	adc.w	r5, r3, r1
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	00eb      	lsls	r3, r5, #3
 8006e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1e:	00e2      	lsls	r2, r4, #3
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	4643      	mov	r3, r8
 8006e26:	18e3      	adds	r3, r4, r3
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	eb45 0303 	adc.w	r3, r5, r3
 8006e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e52:	4629      	mov	r1, r5
 8006e54:	008b      	lsls	r3, r1, #2
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	008a      	lsls	r2, r1, #2
 8006e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e64:	f7f9 fe4a 	bl	8000afc <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4b60      	ldr	r3, [pc, #384]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	011c      	lsls	r4, r3, #4
 8006e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	1891      	adds	r1, r2, r2
 8006e8e:	61b9      	str	r1, [r7, #24]
 8006e90:	415b      	adcs	r3, r3
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e98:	4641      	mov	r1, r8
 8006e9a:	1851      	adds	r1, r2, r1
 8006e9c:	6139      	str	r1, [r7, #16]
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	414b      	adcs	r3, r1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	00cb      	lsls	r3, r1, #3
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eba:	4651      	mov	r1, sl
 8006ebc:	00ca      	lsls	r2, r1, #3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	189b      	adds	r3, r3, r2
 8006ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ecc:	464b      	mov	r3, r9
 8006ece:	460a      	mov	r2, r1
 8006ed0:	eb42 0303 	adc.w	r3, r2, r3
 8006ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	008b      	lsls	r3, r1, #2
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efa:	4641      	mov	r1, r8
 8006efc:	008a      	lsls	r2, r1, #2
 8006efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f02:	f7f9 fdfb 	bl	8000afc <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4b38      	ldr	r3, [pc, #224]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	2264      	movs	r2, #100	; 0x64
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	1acb      	subs	r3, r1, r3
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	3332      	adds	r3, #50	; 0x32
 8006f20:	4a33      	ldr	r2, [pc, #204]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2c:	441c      	add	r4, r3
 8006f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f32:	2200      	movs	r2, #0
 8006f34:	673b      	str	r3, [r7, #112]	; 0x70
 8006f36:	677a      	str	r2, [r7, #116]	; 0x74
 8006f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	1891      	adds	r1, r2, r2
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	415b      	adcs	r3, r3
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	1851      	adds	r1, r2, r1
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	4649      	mov	r1, r9
 8006f54:	414b      	adcs	r3, r1
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f64:	4659      	mov	r1, fp
 8006f66:	00cb      	lsls	r3, r1, #3
 8006f68:	4651      	mov	r1, sl
 8006f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6e:	4651      	mov	r1, sl
 8006f70:	00ca      	lsls	r2, r1, #3
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	4642      	mov	r2, r8
 8006f7a:	189b      	adds	r3, r3, r2
 8006f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f7e:	464b      	mov	r3, r9
 8006f80:	460a      	mov	r2, r1
 8006f82:	eb42 0303 	adc.w	r3, r2, r3
 8006f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	663b      	str	r3, [r7, #96]	; 0x60
 8006f92:	667a      	str	r2, [r7, #100]	; 0x64
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fb2:	f7f9 fda3 	bl	8000afc <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	2164      	movs	r1, #100	; 0x64
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	3332      	adds	r3, #50	; 0x32
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 020f 	and.w	r2, r3, #15
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4422      	add	r2, r4
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fea:	46bd      	mov	sp, r7
 8006fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff0:	51eb851f 	.word	0x51eb851f

08006ff4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ff8:	4904      	ldr	r1, [pc, #16]	; (800700c <MX_FATFS_Init+0x18>)
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <MX_FATFS_Init+0x1c>)
 8006ffc:	f001 f88a 	bl	8008114 <FATFS_LinkDriver>
 8007000:	4603      	mov	r3, r0
 8007002:	461a      	mov	r2, r3
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <MX_FATFS_Init+0x20>)
 8007006:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007008:	bf00      	nop
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20001e94 	.word	0x20001e94
 8007010:	2000001c 	.word	0x2000001c
 8007014:	20001e90 	.word	0x20001e90

08007018 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800701c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800701e:	4618      	mov	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f9d9 	bl	80073ec <USER_SPI_initialize>
 800703a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fab7 	bl	80075c4 <USER_SPI_status>
 8007056:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007070:	7bf8      	ldrb	r0, [r7, #15]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	f000 faba 	bl	80075f0 <USER_SPI_read>
 800707c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007096:	7bf8      	ldrb	r0, [r7, #15]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	f000 fb0d 	bl	80076bc <USER_SPI_write>
 80070a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	603a      	str	r2, [r7, #0]
 80070b6:	71fb      	strb	r3, [r7, #7]
 80070b8:	460b      	mov	r3, r1
 80070ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80070bc:	79b9      	ldrb	r1, [r7, #6]
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fb76 	bl	80077b4 <USER_SPI_ioctl>
 80070c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80070dc:	f7fa ffe8 	bl	80020b0 <HAL_GetTick>
 80070e0:	4603      	mov	r3, r0
 80070e2:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <SPI_Timer_On+0x20>)
 80070e4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80070e6:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <SPI_Timer_On+0x24>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6013      	str	r3, [r2, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20001e9c 	.word	0x20001e9c
 80070f8:	20001ea0 	.word	0x20001ea0

080070fc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007100:	f7fa ffd6 	bl	80020b0 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <SPI_Timer_Status+0x24>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <SPI_Timer_Status+0x28>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	bf34      	ite	cc
 8007114:	2301      	movcc	r3, #1
 8007116:	2300      	movcs	r3, #0
 8007118:	b2db      	uxtb	r3, r3
}
 800711a:	4618      	mov	r0, r3
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20001e9c 	.word	0x20001e9c
 8007124:	20001ea0 	.word	0x20001ea0

08007128 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af02      	add	r7, sp, #8
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007132:	f107 020f 	add.w	r2, r7, #15
 8007136:	1df9      	adds	r1, r7, #7
 8007138:	2332      	movs	r3, #50	; 0x32
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	2301      	movs	r3, #1
 800713e:	4804      	ldr	r0, [pc, #16]	; (8007150 <xchg_spi+0x28>)
 8007140:	f7fe f804 	bl	800514c <HAL_SPI_TransmitReceive>
    return rxDat;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000168 	.word	0x20000168

08007154 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e00a      	b.n	800717a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	18d4      	adds	r4, r2, r3
 800716a:	20ff      	movs	r0, #255	; 0xff
 800716c:	f7ff ffdc 	bl	8007128 <xchg_spi>
 8007170:	4603      	mov	r3, r0
 8007172:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d3f0      	bcc.n	8007164 <rcvr_spi_multi+0x10>
	}
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}

0800718c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e009      	b.n	80071b0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ffbf 	bl	8007128 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3f1      	bcc.n	800719c <xmit_spi_multi+0x10>
	}
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b086      	sub	sp, #24
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80071ca:	f7fa ff71 	bl	80020b0 <HAL_GetTick>
 80071ce:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80071d4:	20ff      	movs	r0, #255	; 0xff
 80071d6:	f7ff ffa7 	bl	8007128 <xchg_spi>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2bff      	cmp	r3, #255	; 0xff
 80071e2:	d007      	beq.n	80071f4 <wait_ready+0x32>
 80071e4:	f7fa ff64 	bl	80020b0 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d8ef      	bhi.n	80071d4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2bff      	cmp	r3, #255	; 0xff
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800720c:	2201      	movs	r2, #1
 800720e:	2102      	movs	r1, #2
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <despiselect+0x18>)
 8007212:	f7fc fb61 	bl	80038d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007216:	20ff      	movs	r0, #255	; 0xff
 8007218:	f7ff ff86 	bl	8007128 <xchg_spi>

}
 800721c:	bf00      	nop
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40020400 	.word	0x40020400

08007224 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007228:	2200      	movs	r2, #0
 800722a:	2102      	movs	r1, #2
 800722c:	4809      	ldr	r0, [pc, #36]	; (8007254 <spiselect+0x30>)
 800722e:	f7fc fb53 	bl	80038d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007232:	20ff      	movs	r0, #255	; 0xff
 8007234:	f7ff ff78 	bl	8007128 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800723c:	f7ff ffc1 	bl	80071c2 <wait_ready>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <spiselect+0x26>
 8007246:	2301      	movs	r3, #1
 8007248:	e002      	b.n	8007250 <spiselect+0x2c>

	despiselect();
 800724a:	f7ff ffdd 	bl	8007208 <despiselect>
	return 0;	/* Timeout */
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	40020400 	.word	0x40020400

08007258 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007262:	20c8      	movs	r0, #200	; 0xc8
 8007264:	f7ff ff36 	bl	80070d4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007268:	20ff      	movs	r0, #255	; 0xff
 800726a:	f7ff ff5d 	bl	8007128 <xchg_spi>
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2bff      	cmp	r3, #255	; 0xff
 8007276:	d104      	bne.n	8007282 <rcvr_datablock+0x2a>
 8007278:	f7ff ff40 	bl	80070fc <SPI_Timer_Status>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f2      	bne.n	8007268 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2bfe      	cmp	r3, #254	; 0xfe
 8007286:	d001      	beq.n	800728c <rcvr_datablock+0x34>
 8007288:	2300      	movs	r3, #0
 800728a:	e00a      	b.n	80072a2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ff60 	bl	8007154 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007294:	20ff      	movs	r0, #255	; 0xff
 8007296:	f7ff ff47 	bl	8007128 <xchg_spi>
 800729a:	20ff      	movs	r0, #255	; 0xff
 800729c:	f7ff ff44 	bl	8007128 <xchg_spi>

	return 1;						/* Function succeeded */
 80072a0:	2301      	movs	r3, #1
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80072b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072ba:	f7ff ff82 	bl	80071c2 <wait_ready>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <xmit_datablock+0x1e>
 80072c4:	2300      	movs	r3, #0
 80072c6:	e01e      	b.n	8007306 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff ff2c 	bl	8007128 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	2bfd      	cmp	r3, #253	; 0xfd
 80072d4:	d016      	beq.n	8007304 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80072d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ff56 	bl	800718c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80072e0:	20ff      	movs	r0, #255	; 0xff
 80072e2:	f7ff ff21 	bl	8007128 <xchg_spi>
 80072e6:	20ff      	movs	r0, #255	; 0xff
 80072e8:	f7ff ff1e 	bl	8007128 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80072ec:	20ff      	movs	r0, #255	; 0xff
 80072ee:	f7ff ff1b 	bl	8007128 <xchg_spi>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	d001      	beq.n	8007304 <xmit_datablock+0x5a>
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <xmit_datablock+0x5c>
	}
	return 1;
 8007304:	2301      	movs	r3, #1
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	4603      	mov	r3, r0
 8007316:	6039      	str	r1, [r7, #0]
 8007318:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800731a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731e:	2b00      	cmp	r3, #0
 8007320:	da0e      	bge.n	8007340 <send_cmd+0x32>
		cmd &= 0x7F;
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007328:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800732a:	2100      	movs	r1, #0
 800732c:	2037      	movs	r0, #55	; 0x37
 800732e:	f7ff ffee 	bl	800730e <send_cmd>
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d901      	bls.n	8007340 <send_cmd+0x32>
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	e051      	b.n	80073e4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	2b0c      	cmp	r3, #12
 8007344:	d008      	beq.n	8007358 <send_cmd+0x4a>
		despiselect();
 8007346:	f7ff ff5f 	bl	8007208 <despiselect>
		if (!spiselect()) return 0xFF;
 800734a:	f7ff ff6b 	bl	8007224 <spiselect>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <send_cmd+0x4a>
 8007354:	23ff      	movs	r3, #255	; 0xff
 8007356:	e045      	b.n	80073e4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff fee1 	bl	8007128 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fedb 	bl	8007128 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b2db      	uxtb	r3, r3
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fed5 	bl	8007128 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fecf 	bl	8007128 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff feca 	bl	8007128 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <send_cmd+0x94>
 800739e:	2395      	movs	r3, #149	; 0x95
 80073a0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d101      	bne.n	80073ac <send_cmd+0x9e>
 80073a8:	2387      	movs	r3, #135	; 0x87
 80073aa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff feba 	bl	8007128 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b0c      	cmp	r3, #12
 80073b8:	d102      	bne.n	80073c0 <send_cmd+0xb2>
 80073ba:	20ff      	movs	r0, #255	; 0xff
 80073bc:	f7ff feb4 	bl	8007128 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80073c0:	230a      	movs	r3, #10
 80073c2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80073c4:	20ff      	movs	r0, #255	; 0xff
 80073c6:	f7ff feaf 	bl	8007128 <xchg_spi>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80073ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da05      	bge.n	80073e2 <send_cmd+0xd4>
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	3b01      	subs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80073ec:	b590      	push	{r4, r7, lr}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USER_SPI_initialize+0x14>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0d6      	b.n	80075ae <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007400:	4b6d      	ldr	r3, [pc, #436]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <USER_SPI_initialize+0x2a>
 800740e:	4b6a      	ldr	r3, [pc, #424]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	e0cb      	b.n	80075ae <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007416:	4b69      	ldr	r3, [pc, #420]	; (80075bc <USER_SPI_initialize+0x1d0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007420:	4b66      	ldr	r3, [pc, #408]	; (80075bc <USER_SPI_initialize+0x1d0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007428:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800742a:	230a      	movs	r3, #10
 800742c:	73fb      	strb	r3, [r7, #15]
 800742e:	e005      	b.n	800743c <USER_SPI_initialize+0x50>
 8007430:	20ff      	movs	r0, #255	; 0xff
 8007432:	f7ff fe79 	bl	8007128 <xchg_spi>
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	3b01      	subs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f6      	bne.n	8007430 <USER_SPI_initialize+0x44>

	ty = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007446:	2100      	movs	r1, #0
 8007448:	2000      	movs	r0, #0
 800744a:	f7ff ff60 	bl	800730e <send_cmd>
 800744e:	4603      	mov	r3, r0
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 808b 	bne.w	800756c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800745a:	f7ff fe3b 	bl	80070d4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800745e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007462:	2008      	movs	r0, #8
 8007464:	f7ff ff53 	bl	800730e <send_cmd>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d151      	bne.n	8007512 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
 8007472:	e00d      	b.n	8007490 <USER_SPI_initialize+0xa4>
 8007474:	7bfc      	ldrb	r4, [r7, #15]
 8007476:	20ff      	movs	r0, #255	; 0xff
 8007478:	f7ff fe56 	bl	8007128 <xchg_spi>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	f104 0310 	add.w	r3, r4, #16
 8007484:	443b      	add	r3, r7
 8007486:	f803 2c08 	strb.w	r2, [r3, #-8]
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	3301      	adds	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d9ee      	bls.n	8007474 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007496:	7abb      	ldrb	r3, [r7, #10]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d167      	bne.n	800756c <USER_SPI_initialize+0x180>
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	2baa      	cmp	r3, #170	; 0xaa
 80074a0:	d164      	bne.n	800756c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80074a2:	bf00      	nop
 80074a4:	f7ff fe2a 	bl	80070fc <SPI_Timer_Status>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <USER_SPI_initialize+0xd2>
 80074ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80074b2:	20a9      	movs	r0, #169	; 0xa9
 80074b4:	f7ff ff2b 	bl	800730e <send_cmd>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f2      	bne.n	80074a4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80074be:	f7ff fe1d 	bl	80070fc <SPI_Timer_Status>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d051      	beq.n	800756c <USER_SPI_initialize+0x180>
 80074c8:	2100      	movs	r1, #0
 80074ca:	203a      	movs	r0, #58	; 0x3a
 80074cc:	f7ff ff1f 	bl	800730e <send_cmd>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d14a      	bne.n	800756c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
 80074da:	e00d      	b.n	80074f8 <USER_SPI_initialize+0x10c>
 80074dc:	7bfc      	ldrb	r4, [r7, #15]
 80074de:	20ff      	movs	r0, #255	; 0xff
 80074e0:	f7ff fe22 	bl	8007128 <xchg_spi>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	f104 0310 	add.w	r3, r4, #16
 80074ec:	443b      	add	r3, r7
 80074ee:	f803 2c08 	strb.w	r2, [r3, #-8]
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	3301      	adds	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d9ee      	bls.n	80074dc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80074fe:	7a3b      	ldrb	r3, [r7, #8]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USER_SPI_initialize+0x120>
 8007508:	230c      	movs	r3, #12
 800750a:	e000      	b.n	800750e <USER_SPI_initialize+0x122>
 800750c:	2304      	movs	r3, #4
 800750e:	737b      	strb	r3, [r7, #13]
 8007510:	e02c      	b.n	800756c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007512:	2100      	movs	r1, #0
 8007514:	20a9      	movs	r0, #169	; 0xa9
 8007516:	f7ff fefa 	bl	800730e <send_cmd>
 800751a:	4603      	mov	r3, r0
 800751c:	2b01      	cmp	r3, #1
 800751e:	d804      	bhi.n	800752a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007520:	2302      	movs	r3, #2
 8007522:	737b      	strb	r3, [r7, #13]
 8007524:	23a9      	movs	r3, #169	; 0xa9
 8007526:	73bb      	strb	r3, [r7, #14]
 8007528:	e003      	b.n	8007532 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800752a:	2301      	movs	r3, #1
 800752c:	737b      	strb	r3, [r7, #13]
 800752e:	2301      	movs	r3, #1
 8007530:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007532:	bf00      	nop
 8007534:	f7ff fde2 	bl	80070fc <SPI_Timer_Status>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <USER_SPI_initialize+0x162>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fee3 	bl	800730e <send_cmd>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f2      	bne.n	8007534 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800754e:	f7ff fdd5 	bl	80070fc <SPI_Timer_Status>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <USER_SPI_initialize+0x17c>
 8007558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800755c:	2010      	movs	r0, #16
 800755e:	f7ff fed6 	bl	800730e <send_cmd>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USER_SPI_initialize+0x180>
				ty = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800756c:	4a14      	ldr	r2, [pc, #80]	; (80075c0 <USER_SPI_initialize+0x1d4>)
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007572:	f7ff fe49 	bl	8007208 <despiselect>

	if (ty) {			/* OK */
 8007576:	7b7b      	ldrb	r3, [r7, #13]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d012      	beq.n	80075a2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800757c:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <USER_SPI_initialize+0x1d0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007586:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <USER_SPI_initialize+0x1d0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0210 	orr.w	r2, r2, #16
 800758e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e002      	b.n	80075a8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80075a8:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <USER_SPI_initialize+0x1cc>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000030 	.word	0x20000030
 80075bc:	20000168 	.word	0x20000168
 80075c0:	20001e98 	.word	0x20001e98

080075c4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USER_SPI_status+0x14>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e002      	b.n	80075de <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <USER_SPI_status+0x28>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b2db      	uxtb	r3, r3
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000030 	.word	0x20000030

080075f0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <USER_SPI_read+0x1c>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <USER_SPI_read+0x20>
 800760c:	2304      	movs	r3, #4
 800760e:	e04d      	b.n	80076ac <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007610:	4b28      	ldr	r3, [pc, #160]	; (80076b4 <USER_SPI_read+0xc4>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <USER_SPI_read+0x32>
 800761e:	2303      	movs	r3, #3
 8007620:	e044      	b.n	80076ac <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007622:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <USER_SPI_read+0xc8>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USER_SPI_read+0x44>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	025b      	lsls	r3, r3, #9
 8007632:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d111      	bne.n	800765e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	2011      	movs	r0, #17
 800763e:	f7ff fe66 	bl	800730e <send_cmd>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d129      	bne.n	800769c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800764c:	68b8      	ldr	r0, [r7, #8]
 800764e:	f7ff fe03 	bl	8007258 <rcvr_datablock>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d021      	beq.n	800769c <USER_SPI_read+0xac>
			count = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	e01e      	b.n	800769c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	2012      	movs	r0, #18
 8007662:	f7ff fe54 	bl	800730e <send_cmd>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d117      	bne.n	800769c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800766c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007670:	68b8      	ldr	r0, [r7, #8]
 8007672:	f7ff fdf1 	bl	8007258 <rcvr_datablock>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <USER_SPI_read+0xa2>
				buff += 512;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007682:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	3b01      	subs	r3, #1
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ed      	bne.n	800766c <USER_SPI_read+0x7c>
 8007690:	e000      	b.n	8007694 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007692:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007694:	2100      	movs	r1, #0
 8007696:	200c      	movs	r0, #12
 8007698:	f7ff fe39 	bl	800730e <send_cmd>
		}
	}
	despiselect();
 800769c:	f7ff fdb4 	bl	8007208 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000030 	.word	0x20000030
 80076b8:	20001e98 	.word	0x20001e98

080076bc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <USER_SPI_write+0x1c>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USER_SPI_write+0x20>
 80076d8:	2304      	movs	r3, #4
 80076da:	e063      	b.n	80077a4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80076dc:	4b33      	ldr	r3, [pc, #204]	; (80077ac <USER_SPI_write+0xf0>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <USER_SPI_write+0x32>
 80076ea:	2303      	movs	r3, #3
 80076ec:	e05a      	b.n	80077a4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80076ee:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <USER_SPI_write+0xf0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USER_SPI_write+0x44>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e051      	b.n	80077a4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <USER_SPI_write+0xf4>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <USER_SPI_write+0x56>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	025b      	lsls	r3, r3, #9
 8007710:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d110      	bne.n	800773a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	2018      	movs	r0, #24
 800771c:	f7ff fdf7 	bl	800730e <send_cmd>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d136      	bne.n	8007794 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007726:	21fe      	movs	r1, #254	; 0xfe
 8007728:	68b8      	ldr	r0, [r7, #8]
 800772a:	f7ff fdbe 	bl	80072aa <xmit_datablock>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02f      	beq.n	8007794 <USER_SPI_write+0xd8>
			count = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	e02c      	b.n	8007794 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800773a:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <USER_SPI_write+0xf4>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 0306 	and.w	r3, r3, #6
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USER_SPI_write+0x92>
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	2097      	movs	r0, #151	; 0x97
 800774a:	f7ff fde0 	bl	800730e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	2019      	movs	r0, #25
 8007752:	f7ff fddc 	bl	800730e <send_cmd>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11b      	bne.n	8007794 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800775c:	21fc      	movs	r1, #252	; 0xfc
 800775e:	68b8      	ldr	r0, [r7, #8]
 8007760:	f7ff fda3 	bl	80072aa <xmit_datablock>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <USER_SPI_write+0xc4>
				buff += 512;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007770:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	3b01      	subs	r3, #1
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1ee      	bne.n	800775c <USER_SPI_write+0xa0>
 800777e:	e000      	b.n	8007782 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007780:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007782:	21fd      	movs	r1, #253	; 0xfd
 8007784:	2000      	movs	r0, #0
 8007786:	f7ff fd90 	bl	80072aa <xmit_datablock>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USER_SPI_write+0xd8>
 8007790:	2301      	movs	r3, #1
 8007792:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007794:	f7ff fd38 	bl	8007208 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000030 	.word	0x20000030
 80077b0:	20001e98 	.word	0x20001e98

080077b4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08c      	sub	sp, #48	; 0x30
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	603a      	str	r2, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
 80077c0:	460b      	mov	r3, r1
 80077c2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <USER_SPI_ioctl+0x1a>
 80077ca:	2304      	movs	r3, #4
 80077cc:	e15a      	b.n	8007a84 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80077ce:	4baf      	ldr	r3, [pc, #700]	; (8007a8c <USER_SPI_ioctl+0x2d8>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <USER_SPI_ioctl+0x2c>
 80077dc:	2303      	movs	r3, #3
 80077de:	e151      	b.n	8007a84 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80077e6:	79bb      	ldrb	r3, [r7, #6]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	f200 8136 	bhi.w	8007a5a <USER_SPI_ioctl+0x2a6>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USER_SPI_ioctl+0x40>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007809 	.word	0x08007809
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	08007a5b 	.word	0x08007a5b
 8007800:	080078c9 	.word	0x080078c9
 8007804:	080079bf 	.word	0x080079bf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007808:	f7ff fd0c 	bl	8007224 <spiselect>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8127 	beq.w	8007a62 <USER_SPI_ioctl+0x2ae>
 8007814:	2300      	movs	r3, #0
 8007816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800781a:	e122      	b.n	8007a62 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800781c:	2100      	movs	r1, #0
 800781e:	2009      	movs	r0, #9
 8007820:	f7ff fd75 	bl	800730e <send_cmd>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 811d 	bne.w	8007a66 <USER_SPI_ioctl+0x2b2>
 800782c:	f107 030c 	add.w	r3, r7, #12
 8007830:	2110      	movs	r1, #16
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fd10 	bl	8007258 <rcvr_datablock>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8113 	beq.w	8007a66 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007840:	7b3b      	ldrb	r3, [r7, #12]
 8007842:	099b      	lsrs	r3, r3, #6
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d111      	bne.n	800786e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800784a:	7d7b      	ldrb	r3, [r7, #21]
 800784c:	461a      	mov	r2, r3
 800784e:	7d3b      	ldrb	r3, [r7, #20]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	4413      	add	r3, r2
 8007854:	461a      	mov	r2, r3
 8007856:	7cfb      	ldrb	r3, [r7, #19]
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800785e:	4413      	add	r3, r2
 8007860:	3301      	adds	r3, #1
 8007862:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	029a      	lsls	r2, r3, #10
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e028      	b.n	80078c0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800786e:	7c7b      	ldrb	r3, [r7, #17]
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	b2da      	uxtb	r2, r3
 8007876:	7dbb      	ldrb	r3, [r7, #22]
 8007878:	09db      	lsrs	r3, r3, #7
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4413      	add	r3, r2
 800787e:	b2da      	uxtb	r2, r3
 8007880:	7d7b      	ldrb	r3, [r7, #21]
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	f003 0306 	and.w	r3, r3, #6
 800788a:	b2db      	uxtb	r3, r3
 800788c:	4413      	add	r3, r2
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3302      	adds	r3, #2
 8007892:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007896:	7d3b      	ldrb	r3, [r7, #20]
 8007898:	099b      	lsrs	r3, r3, #6
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	7cfb      	ldrb	r3, [r7, #19]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	7cbb      	ldrb	r3, [r7, #18]
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078ac:	4413      	add	r3, r2
 80078ae:	3301      	adds	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80078b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078b6:	3b09      	subs	r3, #9
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	409a      	lsls	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80078c6:	e0ce      	b.n	8007a66 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80078c8:	4b71      	ldr	r3, [pc, #452]	; (8007a90 <USER_SPI_ioctl+0x2dc>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d031      	beq.n	8007938 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80078d4:	2100      	movs	r1, #0
 80078d6:	208d      	movs	r0, #141	; 0x8d
 80078d8:	f7ff fd19 	bl	800730e <send_cmd>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 80c3 	bne.w	8007a6a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80078e4:	20ff      	movs	r0, #255	; 0xff
 80078e6:	f7ff fc1f 	bl	8007128 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	2110      	movs	r1, #16
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fcb1 	bl	8007258 <rcvr_datablock>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 80b6 	beq.w	8007a6a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007904:	e007      	b.n	8007916 <USER_SPI_ioctl+0x162>
 8007906:	20ff      	movs	r0, #255	; 0xff
 8007908:	f7ff fc0e 	bl	8007128 <xchg_spi>
 800790c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007910:	3b01      	subs	r3, #1
 8007912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f3      	bne.n	8007906 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800791e:	7dbb      	ldrb	r3, [r7, #22]
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	2310      	movs	r3, #16
 8007928:	fa03 f202 	lsl.w	r2, r3, r2
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007936:	e098      	b.n	8007a6a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007938:	2100      	movs	r1, #0
 800793a:	2009      	movs	r0, #9
 800793c:	f7ff fce7 	bl	800730e <send_cmd>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f040 8091 	bne.w	8007a6a <USER_SPI_ioctl+0x2b6>
 8007948:	f107 030c 	add.w	r3, r7, #12
 800794c:	2110      	movs	r1, #16
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff fc82 	bl	8007258 <rcvr_datablock>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8087 	beq.w	8007a6a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800795c:	4b4c      	ldr	r3, [pc, #304]	; (8007a90 <USER_SPI_ioctl+0x2dc>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007968:	7dbb      	ldrb	r3, [r7, #22]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007970:	7dfa      	ldrb	r2, [r7, #23]
 8007972:	09d2      	lsrs	r2, r2, #7
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	4413      	add	r3, r2
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	7e7b      	ldrb	r3, [r7, #25]
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	b2db      	uxtb	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	461a      	mov	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e013      	b.n	80079b6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800798e:	7dbb      	ldrb	r3, [r7, #22]
 8007990:	109b      	asrs	r3, r3, #2
 8007992:	b29b      	uxth	r3, r3
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	3301      	adds	r3, #1
 800799a:	7dfa      	ldrb	r2, [r7, #23]
 800799c:	00d2      	lsls	r2, r2, #3
 800799e:	f002 0218 	and.w	r2, r2, #24
 80079a2:	7df9      	ldrb	r1, [r7, #23]
 80079a4:	0949      	lsrs	r1, r1, #5
 80079a6:	b2c9      	uxtb	r1, r1
 80079a8:	440a      	add	r2, r1
 80079aa:	3201      	adds	r2, #1
 80079ac:	fb02 f303 	mul.w	r3, r2, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80079bc:	e055      	b.n	8007a6a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80079be:	4b34      	ldr	r3, [pc, #208]	; (8007a90 <USER_SPI_ioctl+0x2dc>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 0306 	and.w	r3, r3, #6
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d051      	beq.n	8007a6e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80079ca:	f107 020c 	add.w	r2, r7, #12
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	210b      	movs	r1, #11
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff feee 	bl	80077b4 <USER_SPI_ioctl>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d149      	bne.n	8007a72 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80079de:	7b3b      	ldrb	r3, [r7, #12]
 80079e0:	099b      	lsrs	r3, r3, #6
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <USER_SPI_ioctl+0x23e>
 80079e8:	7dbb      	ldrb	r3, [r7, #22]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d041      	beq.n	8007a76 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	623b      	str	r3, [r7, #32]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007a02:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <USER_SPI_ioctl+0x2dc>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	025b      	lsls	r3, r3, #9
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	025b      	lsls	r3, r3, #9
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a1c:	2020      	movs	r0, #32
 8007a1e:	f7ff fc76 	bl	800730e <send_cmd>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d128      	bne.n	8007a7a <USER_SPI_ioctl+0x2c6>
 8007a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a2a:	2021      	movs	r0, #33	; 0x21
 8007a2c:	f7ff fc6f 	bl	800730e <send_cmd>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d121      	bne.n	8007a7a <USER_SPI_ioctl+0x2c6>
 8007a36:	2100      	movs	r1, #0
 8007a38:	2026      	movs	r0, #38	; 0x26
 8007a3a:	f7ff fc68 	bl	800730e <send_cmd>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11a      	bne.n	8007a7a <USER_SPI_ioctl+0x2c6>
 8007a44:	f247 5030 	movw	r0, #30000	; 0x7530
 8007a48:	f7ff fbbb 	bl	80071c2 <wait_ready>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d013      	beq.n	8007a7a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007a52:	2300      	movs	r3, #0
 8007a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007a58:	e00f      	b.n	8007a7a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a60:	e00c      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		break;
 8007a62:	bf00      	nop
 8007a64:	e00a      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		break;
 8007a66:	bf00      	nop
 8007a68:	e008      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		break;
 8007a6a:	bf00      	nop
 8007a6c:	e006      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a6e:	bf00      	nop
 8007a70:	e004      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <USER_SPI_ioctl+0x2c8>
		break;
 8007a7a:	bf00      	nop
	}

	despiselect();
 8007a7c:	f7ff fbc4 	bl	8007208 <despiselect>

	return res;
 8007a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3730      	adds	r7, #48	; 0x30
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20000030 	.word	0x20000030
 8007a90:	20001e98 	.word	0x20001e98

08007a94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <disk_status+0x30>)
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	79fa      	ldrb	r2, [r7, #7]
 8007aac:	4905      	ldr	r1, [pc, #20]	; (8007ac4 <disk_status+0x30>)
 8007aae:	440a      	add	r2, r1
 8007ab0:	7a12      	ldrb	r2, [r2, #8]
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4798      	blx	r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20001ec4 	.word	0x20001ec4

08007ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <disk_read+0x3c>)
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	689c      	ldr	r4, [r3, #8]
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	4a07      	ldr	r2, [pc, #28]	; (8007b04 <disk_read+0x3c>)
 8007ae8:	4413      	add	r3, r2
 8007aea:	7a18      	ldrb	r0, [r3, #8]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	68b9      	ldr	r1, [r7, #8]
 8007af2:	47a0      	blx	r4
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20001ec4 	.word	0x20001ec4

08007b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	; (8007b44 <disk_write+0x3c>)
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68dc      	ldr	r4, [r3, #12]
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <disk_write+0x3c>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	7a18      	ldrb	r0, [r3, #8]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	47a0      	blx	r4
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd90      	pop	{r4, r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20001ec4 	.word	0x20001ec4

08007b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	603a      	str	r2, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
 8007b54:	460b      	mov	r3, r1
 8007b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <disk_ioctl+0x38>)
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	79fa      	ldrb	r2, [r7, #7]
 8007b66:	4906      	ldr	r1, [pc, #24]	; (8007b80 <disk_ioctl+0x38>)
 8007b68:	440a      	add	r2, r1
 8007b6a:	7a10      	ldrb	r0, [r2, #8]
 8007b6c:	79b9      	ldrb	r1, [r7, #6]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4798      	blx	r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20001ec4 	.word	0x20001ec4

08007b84 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	887a      	ldrh	r2, [r7, #2]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	887b      	ldrh	r3, [r7, #2]
 8007b9e:	0a1b      	lsrs	r3, r3, #8
 8007ba0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	887a      	ldrh	r2, [r7, #2]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	701a      	strb	r2, [r3, #0]
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c12:	b480      	push	{r7}
 8007c14:	b087      	sub	sp, #28
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	617a      	str	r2, [r7, #20]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f3      	bne.n	8007c22 <mem_set+0x10>
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d825      	bhi.n	8007ca8 <dec_lock+0x60>
		n = Files[i].ctr;
 8007c5c:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <dec_lock+0x74>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	4413      	add	r3, r2
 8007c64:	330c      	adds	r3, #12
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c70:	d101      	bne.n	8007c76 <dec_lock+0x2e>
 8007c72:	2300      	movs	r3, #0
 8007c74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <dec_lock+0x3a>
 8007c7c:	89fb      	ldrh	r3, [r7, #14]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007c82:	4a0e      	ldr	r2, [pc, #56]	; (8007cbc <dec_lock+0x74>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	4413      	add	r3, r2
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	89fa      	ldrh	r2, [r7, #14]
 8007c8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <dec_lock+0x5a>
 8007c96:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <dec_lock+0x74>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	737b      	strb	r3, [r7, #13]
 8007ca6:	e001      	b.n	8007cac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ca8:	2302      	movs	r3, #2
 8007caa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007cac:	7b7b      	ldrb	r3, [r7, #13]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20001ea4 	.word	0x20001ea4

08007cc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	78db      	ldrb	r3, [r3, #3]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d034      	beq.n	8007d3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7858      	ldrb	r0, [r3, #1]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	f7ff ff0e 	bl	8007b08 <disk_write>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	e022      	b.n	8007d3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	1ad2      	subs	r2, r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d217      	bcs.n	8007d3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	789b      	ldrb	r3, [r3, #2]
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	e010      	b.n	8007d38 <sync_window+0x78>
					wsect += fs->fsize;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7858      	ldrb	r0, [r3, #1]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	f7ff feeb 	bl	8007b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d8eb      	bhi.n	8007d16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d01b      	beq.n	8007d98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ffad 	bl	8007cc0 <sync_window>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	7858      	ldrb	r0, [r3, #1]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	f7ff fea3 	bl	8007ac8 <disk_read>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff ff87 	bl	8007cc0 <sync_window>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d158      	bne.n	8007e6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d148      	bne.n	8007e56 <sync_fs+0xb2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d144      	bne.n	8007e56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3330      	adds	r3, #48	; 0x30
 8007dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff1b 	bl	8007c12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3330      	adds	r3, #48	; 0x30
 8007de0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007de4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fecb 	bl	8007b84 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3330      	adds	r3, #48	; 0x30
 8007df2:	4921      	ldr	r1, [pc, #132]	; (8007e78 <sync_fs+0xd4>)
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fee0 	bl	8007bba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3330      	adds	r3, #48	; 0x30
 8007dfe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e02:	491e      	ldr	r1, [pc, #120]	; (8007e7c <sync_fs+0xd8>)
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fed8 	bl	8007bba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3330      	adds	r3, #48	; 0x30
 8007e0e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7ff fece 	bl	8007bba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3330      	adds	r3, #48	; 0x30
 8007e22:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f7ff fec4 	bl	8007bba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7858      	ldrb	r0, [r3, #1]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f7ff fe5c 	bl	8007b08 <disk_write>
			fs->fsi_flag = 0;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fe72 	bl	8007b48 <disk_ioctl>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <sync_fs+0xca>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	41615252 	.word	0x41615252
 8007e7c:	61417272 	.word	0x61417272

08007e80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	331a      	adds	r3, #26
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	b292      	uxth	r2, r2
 8007e94:	4611      	mov	r1, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fe74 	bl	8007b84 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d109      	bne.n	8007eb8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f103 0214 	add.w	r2, r3, #20
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f7ff fe66 	bl	8007b84 <st_word>
	}
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007eca:	2309      	movs	r3, #9
 8007ecc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01c      	beq.n	8007f0e <validate+0x4e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d018      	beq.n	8007f0e <validate+0x4e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d013      	beq.n	8007f0e <validate+0x4e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	889a      	ldrh	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d10c      	bne.n	8007f0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fdca 	bl	8007a94 <disk_status>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <validate+0x4e>
			res = FR_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <validate+0x5a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	e000      	b.n	8007f1c <validate+0x5c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	6013      	str	r3, [r2, #0]
	return res;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f107 0208 	add.w	r2, r7, #8
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff ffc0 	bl	8007ec0 <validate>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d168      	bne.n	800801c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7d1b      	ldrb	r3, [r3, #20]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d062      	beq.n	800801c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7d1b      	ldrb	r3, [r3, #20]
 8007f5a:	b25b      	sxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da15      	bge.n	8007f8c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	7858      	ldrb	r0, [r3, #1]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f7ff fdca 	bl	8007b08 <disk_write>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <f_sync+0x54>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e04f      	b.n	800801e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f8c:	f7ff f844 	bl	8007018 <get_fattime>
 8007f90:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7ff fed4 	bl	8007d48 <move_window>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d138      	bne.n	800801c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	330b      	adds	r3, #11
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	330b      	adds	r3, #11
 8007fba:	f042 0220 	orr.w	r2, r2, #32
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68f9      	ldr	r1, [r7, #12]
 8007fce:	f7ff ff57 	bl	8007e80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f103 021c 	add.w	r2, r3, #28
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7ff fdeb 	bl	8007bba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3316      	adds	r3, #22
 8007fe8:	6939      	ldr	r1, [r7, #16]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fde5 	bl	8007bba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3312      	adds	r3, #18
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fdc4 	bl	8007b84 <st_word>
					fs->wflag = 1;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2201      	movs	r2, #1
 8008000:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fecd 	bl	8007da4 <sync_fs>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7d1b      	ldrb	r3, [r3, #20]
 8008012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008016:	b2da      	uxtb	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800801c:	7dfb      	ldrb	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff ff7b 	bl	8007f2a <f_sync>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d118      	bne.n	8008070 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f107 0208 	add.w	r2, r7, #8
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ff3a 	bl	8007ec0 <validate>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10c      	bne.n	8008070 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fdf4 	bl	8007c48 <dec_lock>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800808a:	2301      	movs	r3, #1
 800808c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008092:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 8008094:	7a5b      	ldrb	r3, [r3, #9]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d131      	bne.n	8008100 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800809c:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 800809e:	7a5b      	ldrb	r3, [r3, #9]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080a6:	2100      	movs	r1, #0
 80080a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80080aa:	4b19      	ldr	r3, [pc, #100]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080ac:	7a5b      	ldrb	r3, [r3, #9]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4a17      	ldr	r2, [pc, #92]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080bc:	7a5b      	ldrb	r3, [r3, #9]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080c4:	4413      	add	r3, r2
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080cc:	7a5b      	ldrb	r3, [r3, #9]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	b2d1      	uxtb	r1, r2
 80080d4:	4a0e      	ldr	r2, [pc, #56]	; (8008110 <FATFS_LinkDriverEx+0x94>)
 80080d6:	7251      	strb	r1, [r2, #9]
 80080d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80080da:	7dbb      	ldrb	r3, [r7, #22]
 80080dc:	3330      	adds	r3, #48	; 0x30
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3301      	adds	r3, #1
 80080e8:	223a      	movs	r2, #58	; 0x3a
 80080ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3302      	adds	r3, #2
 80080f0:	222f      	movs	r2, #47	; 0x2f
 80080f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3303      	adds	r3, #3
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20001ec4 	.word	0x20001ec4

08008114 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800811e:	2200      	movs	r2, #0
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff ffaa 	bl	800807c <FATFS_LinkDriverEx>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <_vsniprintf_r>:
 8008132:	b530      	push	{r4, r5, lr}
 8008134:	4614      	mov	r4, r2
 8008136:	2c00      	cmp	r4, #0
 8008138:	b09b      	sub	sp, #108	; 0x6c
 800813a:	4605      	mov	r5, r0
 800813c:	461a      	mov	r2, r3
 800813e:	da05      	bge.n	800814c <_vsniprintf_r+0x1a>
 8008140:	238b      	movs	r3, #139	; 0x8b
 8008142:	6003      	str	r3, [r0, #0]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	b01b      	add	sp, #108	; 0x6c
 800814a:	bd30      	pop	{r4, r5, pc}
 800814c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008150:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008154:	bf14      	ite	ne
 8008156:	f104 33ff 	addne.w	r3, r4, #4294967295
 800815a:	4623      	moveq	r3, r4
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008164:	9100      	str	r1, [sp, #0]
 8008166:	9104      	str	r1, [sp, #16]
 8008168:	f8ad 300e 	strh.w	r3, [sp, #14]
 800816c:	4669      	mov	r1, sp
 800816e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008170:	f000 f99e 	bl	80084b0 <_svfiprintf_r>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	bfbc      	itt	lt
 8008178:	238b      	movlt	r3, #139	; 0x8b
 800817a:	602b      	strlt	r3, [r5, #0]
 800817c:	2c00      	cmp	r4, #0
 800817e:	d0e3      	beq.n	8008148 <_vsniprintf_r+0x16>
 8008180:	9b00      	ldr	r3, [sp, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e7df      	b.n	8008148 <_vsniprintf_r+0x16>

08008188 <vsniprintf>:
 8008188:	b507      	push	{r0, r1, r2, lr}
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	460a      	mov	r2, r1
 8008190:	4601      	mov	r1, r0
 8008192:	4803      	ldr	r0, [pc, #12]	; (80081a0 <vsniprintf+0x18>)
 8008194:	6800      	ldr	r0, [r0, #0]
 8008196:	f7ff ffcc 	bl	8008132 <_vsniprintf_r>
 800819a:	b003      	add	sp, #12
 800819c:	f85d fb04 	ldr.w	pc, [sp], #4
 80081a0:	20000080 	.word	0x20000080

080081a4 <memset>:
 80081a4:	4402      	add	r2, r0
 80081a6:	4603      	mov	r3, r0
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d100      	bne.n	80081ae <memset+0xa>
 80081ac:	4770      	bx	lr
 80081ae:	f803 1b01 	strb.w	r1, [r3], #1
 80081b2:	e7f9      	b.n	80081a8 <memset+0x4>

080081b4 <__errno>:
 80081b4:	4b01      	ldr	r3, [pc, #4]	; (80081bc <__errno+0x8>)
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000080 	.word	0x20000080

080081c0 <__libc_init_array>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4d0d      	ldr	r5, [pc, #52]	; (80081f8 <__libc_init_array+0x38>)
 80081c4:	4c0d      	ldr	r4, [pc, #52]	; (80081fc <__libc_init_array+0x3c>)
 80081c6:	1b64      	subs	r4, r4, r5
 80081c8:	10a4      	asrs	r4, r4, #2
 80081ca:	2600      	movs	r6, #0
 80081cc:	42a6      	cmp	r6, r4
 80081ce:	d109      	bne.n	80081e4 <__libc_init_array+0x24>
 80081d0:	4d0b      	ldr	r5, [pc, #44]	; (8008200 <__libc_init_array+0x40>)
 80081d2:	4c0c      	ldr	r4, [pc, #48]	; (8008204 <__libc_init_array+0x44>)
 80081d4:	f000 fc6a 	bl	8008aac <_init>
 80081d8:	1b64      	subs	r4, r4, r5
 80081da:	10a4      	asrs	r4, r4, #2
 80081dc:	2600      	movs	r6, #0
 80081de:	42a6      	cmp	r6, r4
 80081e0:	d105      	bne.n	80081ee <__libc_init_array+0x2e>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e8:	4798      	blx	r3
 80081ea:	3601      	adds	r6, #1
 80081ec:	e7ee      	b.n	80081cc <__libc_init_array+0xc>
 80081ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f2:	4798      	blx	r3
 80081f4:	3601      	adds	r6, #1
 80081f6:	e7f2      	b.n	80081de <__libc_init_array+0x1e>
 80081f8:	08008b7c 	.word	0x08008b7c
 80081fc:	08008b7c 	.word	0x08008b7c
 8008200:	08008b7c 	.word	0x08008b7c
 8008204:	08008b80 	.word	0x08008b80

08008208 <__retarget_lock_acquire_recursive>:
 8008208:	4770      	bx	lr

0800820a <__retarget_lock_release_recursive>:
 800820a:	4770      	bx	lr

0800820c <_free_r>:
 800820c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820e:	2900      	cmp	r1, #0
 8008210:	d044      	beq.n	800829c <_free_r+0x90>
 8008212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008216:	9001      	str	r0, [sp, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f1a1 0404 	sub.w	r4, r1, #4
 800821e:	bfb8      	it	lt
 8008220:	18e4      	addlt	r4, r4, r3
 8008222:	f000 f8df 	bl	80083e4 <__malloc_lock>
 8008226:	4a1e      	ldr	r2, [pc, #120]	; (80082a0 <_free_r+0x94>)
 8008228:	9801      	ldr	r0, [sp, #4]
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	b933      	cbnz	r3, 800823c <_free_r+0x30>
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	6014      	str	r4, [r2, #0]
 8008232:	b003      	add	sp, #12
 8008234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008238:	f000 b8da 	b.w	80083f0 <__malloc_unlock>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d908      	bls.n	8008252 <_free_r+0x46>
 8008240:	6825      	ldr	r5, [r4, #0]
 8008242:	1961      	adds	r1, r4, r5
 8008244:	428b      	cmp	r3, r1
 8008246:	bf01      	itttt	eq
 8008248:	6819      	ldreq	r1, [r3, #0]
 800824a:	685b      	ldreq	r3, [r3, #4]
 800824c:	1949      	addeq	r1, r1, r5
 800824e:	6021      	streq	r1, [r4, #0]
 8008250:	e7ed      	b.n	800822e <_free_r+0x22>
 8008252:	461a      	mov	r2, r3
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	b10b      	cbz	r3, 800825c <_free_r+0x50>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d9fa      	bls.n	8008252 <_free_r+0x46>
 800825c:	6811      	ldr	r1, [r2, #0]
 800825e:	1855      	adds	r5, r2, r1
 8008260:	42a5      	cmp	r5, r4
 8008262:	d10b      	bne.n	800827c <_free_r+0x70>
 8008264:	6824      	ldr	r4, [r4, #0]
 8008266:	4421      	add	r1, r4
 8008268:	1854      	adds	r4, r2, r1
 800826a:	42a3      	cmp	r3, r4
 800826c:	6011      	str	r1, [r2, #0]
 800826e:	d1e0      	bne.n	8008232 <_free_r+0x26>
 8008270:	681c      	ldr	r4, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	6053      	str	r3, [r2, #4]
 8008276:	440c      	add	r4, r1
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	e7da      	b.n	8008232 <_free_r+0x26>
 800827c:	d902      	bls.n	8008284 <_free_r+0x78>
 800827e:	230c      	movs	r3, #12
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	e7d6      	b.n	8008232 <_free_r+0x26>
 8008284:	6825      	ldr	r5, [r4, #0]
 8008286:	1961      	adds	r1, r4, r5
 8008288:	428b      	cmp	r3, r1
 800828a:	bf04      	itt	eq
 800828c:	6819      	ldreq	r1, [r3, #0]
 800828e:	685b      	ldreq	r3, [r3, #4]
 8008290:	6063      	str	r3, [r4, #4]
 8008292:	bf04      	itt	eq
 8008294:	1949      	addeq	r1, r1, r5
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	6054      	str	r4, [r2, #4]
 800829a:	e7ca      	b.n	8008232 <_free_r+0x26>
 800829c:	b003      	add	sp, #12
 800829e:	bd30      	pop	{r4, r5, pc}
 80082a0:	20002010 	.word	0x20002010

080082a4 <sbrk_aligned>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4e0e      	ldr	r6, [pc, #56]	; (80082e0 <sbrk_aligned+0x3c>)
 80082a8:	460c      	mov	r4, r1
 80082aa:	6831      	ldr	r1, [r6, #0]
 80082ac:	4605      	mov	r5, r0
 80082ae:	b911      	cbnz	r1, 80082b6 <sbrk_aligned+0x12>
 80082b0:	f000 fba6 	bl	8008a00 <_sbrk_r>
 80082b4:	6030      	str	r0, [r6, #0]
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fba1 	bl	8008a00 <_sbrk_r>
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	d00a      	beq.n	80082d8 <sbrk_aligned+0x34>
 80082c2:	1cc4      	adds	r4, r0, #3
 80082c4:	f024 0403 	bic.w	r4, r4, #3
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	d007      	beq.n	80082dc <sbrk_aligned+0x38>
 80082cc:	1a21      	subs	r1, r4, r0
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 fb96 	bl	8008a00 <_sbrk_r>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d101      	bne.n	80082dc <sbrk_aligned+0x38>
 80082d8:	f04f 34ff 	mov.w	r4, #4294967295
 80082dc:	4620      	mov	r0, r4
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	20002014 	.word	0x20002014

080082e4 <_malloc_r>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	1ccd      	adds	r5, r1, #3
 80082ea:	f025 0503 	bic.w	r5, r5, #3
 80082ee:	3508      	adds	r5, #8
 80082f0:	2d0c      	cmp	r5, #12
 80082f2:	bf38      	it	cc
 80082f4:	250c      	movcc	r5, #12
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	4607      	mov	r7, r0
 80082fa:	db01      	blt.n	8008300 <_malloc_r+0x1c>
 80082fc:	42a9      	cmp	r1, r5
 80082fe:	d905      	bls.n	800830c <_malloc_r+0x28>
 8008300:	230c      	movs	r3, #12
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	2600      	movs	r6, #0
 8008306:	4630      	mov	r0, r6
 8008308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083e0 <_malloc_r+0xfc>
 8008310:	f000 f868 	bl	80083e4 <__malloc_lock>
 8008314:	f8d8 3000 	ldr.w	r3, [r8]
 8008318:	461c      	mov	r4, r3
 800831a:	bb5c      	cbnz	r4, 8008374 <_malloc_r+0x90>
 800831c:	4629      	mov	r1, r5
 800831e:	4638      	mov	r0, r7
 8008320:	f7ff ffc0 	bl	80082a4 <sbrk_aligned>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	4604      	mov	r4, r0
 8008328:	d155      	bne.n	80083d6 <_malloc_r+0xf2>
 800832a:	f8d8 4000 	ldr.w	r4, [r8]
 800832e:	4626      	mov	r6, r4
 8008330:	2e00      	cmp	r6, #0
 8008332:	d145      	bne.n	80083c0 <_malloc_r+0xdc>
 8008334:	2c00      	cmp	r4, #0
 8008336:	d048      	beq.n	80083ca <_malloc_r+0xe6>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	4631      	mov	r1, r6
 800833c:	4638      	mov	r0, r7
 800833e:	eb04 0903 	add.w	r9, r4, r3
 8008342:	f000 fb5d 	bl	8008a00 <_sbrk_r>
 8008346:	4581      	cmp	r9, r0
 8008348:	d13f      	bne.n	80083ca <_malloc_r+0xe6>
 800834a:	6821      	ldr	r1, [r4, #0]
 800834c:	1a6d      	subs	r5, r5, r1
 800834e:	4629      	mov	r1, r5
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ffa7 	bl	80082a4 <sbrk_aligned>
 8008356:	3001      	adds	r0, #1
 8008358:	d037      	beq.n	80083ca <_malloc_r+0xe6>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	442b      	add	r3, r5
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	f8d8 3000 	ldr.w	r3, [r8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d038      	beq.n	80083da <_malloc_r+0xf6>
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	42a2      	cmp	r2, r4
 800836c:	d12b      	bne.n	80083c6 <_malloc_r+0xe2>
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	e00f      	b.n	8008394 <_malloc_r+0xb0>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	1b52      	subs	r2, r2, r5
 8008378:	d41f      	bmi.n	80083ba <_malloc_r+0xd6>
 800837a:	2a0b      	cmp	r2, #11
 800837c:	d917      	bls.n	80083ae <_malloc_r+0xca>
 800837e:	1961      	adds	r1, r4, r5
 8008380:	42a3      	cmp	r3, r4
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	bf18      	it	ne
 8008386:	6059      	strne	r1, [r3, #4]
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	bf08      	it	eq
 800838c:	f8c8 1000 	streq.w	r1, [r8]
 8008390:	5162      	str	r2, [r4, r5]
 8008392:	604b      	str	r3, [r1, #4]
 8008394:	4638      	mov	r0, r7
 8008396:	f104 060b 	add.w	r6, r4, #11
 800839a:	f000 f829 	bl	80083f0 <__malloc_unlock>
 800839e:	f026 0607 	bic.w	r6, r6, #7
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	1af2      	subs	r2, r6, r3
 80083a6:	d0ae      	beq.n	8008306 <_malloc_r+0x22>
 80083a8:	1b9b      	subs	r3, r3, r6
 80083aa:	50a3      	str	r3, [r4, r2]
 80083ac:	e7ab      	b.n	8008306 <_malloc_r+0x22>
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	6862      	ldr	r2, [r4, #4]
 80083b2:	d1dd      	bne.n	8008370 <_malloc_r+0x8c>
 80083b4:	f8c8 2000 	str.w	r2, [r8]
 80083b8:	e7ec      	b.n	8008394 <_malloc_r+0xb0>
 80083ba:	4623      	mov	r3, r4
 80083bc:	6864      	ldr	r4, [r4, #4]
 80083be:	e7ac      	b.n	800831a <_malloc_r+0x36>
 80083c0:	4634      	mov	r4, r6
 80083c2:	6876      	ldr	r6, [r6, #4]
 80083c4:	e7b4      	b.n	8008330 <_malloc_r+0x4c>
 80083c6:	4613      	mov	r3, r2
 80083c8:	e7cc      	b.n	8008364 <_malloc_r+0x80>
 80083ca:	230c      	movs	r3, #12
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	4638      	mov	r0, r7
 80083d0:	f000 f80e 	bl	80083f0 <__malloc_unlock>
 80083d4:	e797      	b.n	8008306 <_malloc_r+0x22>
 80083d6:	6025      	str	r5, [r4, #0]
 80083d8:	e7dc      	b.n	8008394 <_malloc_r+0xb0>
 80083da:	605b      	str	r3, [r3, #4]
 80083dc:	deff      	udf	#255	; 0xff
 80083de:	bf00      	nop
 80083e0:	20002010 	.word	0x20002010

080083e4 <__malloc_lock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_lock+0x8>)
 80083e6:	f7ff bf0f 	b.w	8008208 <__retarget_lock_acquire_recursive>
 80083ea:	bf00      	nop
 80083ec:	2000200c 	.word	0x2000200c

080083f0 <__malloc_unlock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__malloc_unlock+0x8>)
 80083f2:	f7ff bf0a 	b.w	800820a <__retarget_lock_release_recursive>
 80083f6:	bf00      	nop
 80083f8:	2000200c 	.word	0x2000200c

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	461f      	mov	r7, r3
 8008404:	42be      	cmp	r6, r7
 8008406:	680b      	ldr	r3, [r1, #0]
 8008408:	4682      	mov	sl, r0
 800840a:	460c      	mov	r4, r1
 800840c:	4690      	mov	r8, r2
 800840e:	d82c      	bhi.n	800846a <__ssputs_r+0x6e>
 8008410:	898a      	ldrh	r2, [r1, #12]
 8008412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008416:	d026      	beq.n	8008466 <__ssputs_r+0x6a>
 8008418:	6965      	ldr	r5, [r4, #20]
 800841a:	6909      	ldr	r1, [r1, #16]
 800841c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008420:	eba3 0901 	sub.w	r9, r3, r1
 8008424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008428:	1c7b      	adds	r3, r7, #1
 800842a:	444b      	add	r3, r9
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d527      	bpl.n	8008488 <__ssputs_r+0x8c>
 8008438:	4629      	mov	r1, r5
 800843a:	f7ff ff53 	bl	80082e4 <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b360      	cbz	r0, 800849c <__ssputs_r+0xa0>
 8008442:	6921      	ldr	r1, [r4, #16]
 8008444:	464a      	mov	r2, r9
 8008446:	f000 faeb 	bl	8008a20 <memcpy>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	6126      	str	r6, [r4, #16]
 8008458:	6165      	str	r5, [r4, #20]
 800845a:	444e      	add	r6, r9
 800845c:	eba5 0509 	sub.w	r5, r5, r9
 8008460:	6026      	str	r6, [r4, #0]
 8008462:	60a5      	str	r5, [r4, #8]
 8008464:	463e      	mov	r6, r7
 8008466:	42be      	cmp	r6, r7
 8008468:	d900      	bls.n	800846c <__ssputs_r+0x70>
 800846a:	463e      	mov	r6, r7
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	4632      	mov	r2, r6
 8008470:	4641      	mov	r1, r8
 8008472:	f000 faab 	bl	80089cc <memmove>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	1b9b      	subs	r3, r3, r6
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	4433      	add	r3, r6
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	2000      	movs	r0, #0
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	462a      	mov	r2, r5
 800848a:	f000 fad7 	bl	8008a3c <_realloc_r>
 800848e:	4606      	mov	r6, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	d1e0      	bne.n	8008456 <__ssputs_r+0x5a>
 8008494:	6921      	ldr	r1, [r4, #16]
 8008496:	4650      	mov	r0, sl
 8008498:	f7ff feb8 	bl	800820c <_free_r>
 800849c:	230c      	movs	r3, #12
 800849e:	f8ca 3000 	str.w	r3, [sl]
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	e7e9      	b.n	8008484 <__ssputs_r+0x88>

080084b0 <_svfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4698      	mov	r8, r3
 80084b6:	898b      	ldrh	r3, [r1, #12]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	b09d      	sub	sp, #116	; 0x74
 80084bc:	4607      	mov	r7, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	d50e      	bpl.n	80084e2 <_svfiprintf_r+0x32>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b963      	cbnz	r3, 80084e2 <_svfiprintf_r+0x32>
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	f7ff ff0b 	bl	80082e4 <_malloc_r>
 80084ce:	6028      	str	r0, [r5, #0]
 80084d0:	6128      	str	r0, [r5, #16]
 80084d2:	b920      	cbnz	r0, 80084de <_svfiprintf_r+0x2e>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e0d0      	b.n	8008680 <_svfiprintf_r+0x1d0>
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	616b      	str	r3, [r5, #20]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	2320      	movs	r3, #32
 80084e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f0:	2330      	movs	r3, #48	; 0x30
 80084f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008698 <_svfiprintf_r+0x1e8>
 80084f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fa:	f04f 0901 	mov.w	r9, #1
 80084fe:	4623      	mov	r3, r4
 8008500:	469a      	mov	sl, r3
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	b10a      	cbz	r2, 800850c <_svfiprintf_r+0x5c>
 8008508:	2a25      	cmp	r2, #37	; 0x25
 800850a:	d1f9      	bne.n	8008500 <_svfiprintf_r+0x50>
 800850c:	ebba 0b04 	subs.w	fp, sl, r4
 8008510:	d00b      	beq.n	800852a <_svfiprintf_r+0x7a>
 8008512:	465b      	mov	r3, fp
 8008514:	4622      	mov	r2, r4
 8008516:	4629      	mov	r1, r5
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff6f 	bl	80083fc <__ssputs_r>
 800851e:	3001      	adds	r0, #1
 8008520:	f000 80a9 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008526:	445a      	add	r2, fp
 8008528:	9209      	str	r2, [sp, #36]	; 0x24
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80a1 	beq.w	8008676 <_svfiprintf_r+0x1c6>
 8008534:	2300      	movs	r3, #0
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853e:	f10a 0a01 	add.w	sl, sl, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854a:	931a      	str	r3, [sp, #104]	; 0x68
 800854c:	4654      	mov	r4, sl
 800854e:	2205      	movs	r2, #5
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	4850      	ldr	r0, [pc, #320]	; (8008698 <_svfiprintf_r+0x1e8>)
 8008556:	f7f7 fe63 	bl	8000220 <memchr>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	b9d8      	cbnz	r0, 8008596 <_svfiprintf_r+0xe6>
 800855e:	06d0      	lsls	r0, r2, #27
 8008560:	bf44      	itt	mi
 8008562:	2320      	movmi	r3, #32
 8008564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008568:	0711      	lsls	r1, r2, #28
 800856a:	bf44      	itt	mi
 800856c:	232b      	movmi	r3, #43	; 0x2b
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b2a      	cmp	r3, #42	; 0x2a
 8008578:	d015      	beq.n	80085a6 <_svfiprintf_r+0xf6>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	4654      	mov	r4, sl
 800857e:	2000      	movs	r0, #0
 8008580:	f04f 0c0a 	mov.w	ip, #10
 8008584:	4621      	mov	r1, r4
 8008586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858a:	3b30      	subs	r3, #48	; 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d94d      	bls.n	800862c <_svfiprintf_r+0x17c>
 8008590:	b1b0      	cbz	r0, 80085c0 <_svfiprintf_r+0x110>
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	e014      	b.n	80085c0 <_svfiprintf_r+0x110>
 8008596:	eba0 0308 	sub.w	r3, r0, r8
 800859a:	fa09 f303 	lsl.w	r3, r9, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	9304      	str	r3, [sp, #16]
 80085a2:	46a2      	mov	sl, r4
 80085a4:	e7d2      	b.n	800854c <_svfiprintf_r+0x9c>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbb      	ittet	lt
 80085b2:	425b      	neglt	r3, r3
 80085b4:	f042 0202 	orrlt.w	r2, r2, #2
 80085b8:	9307      	strge	r3, [sp, #28]
 80085ba:	9307      	strlt	r3, [sp, #28]
 80085bc:	bfb8      	it	lt
 80085be:	9204      	strlt	r2, [sp, #16]
 80085c0:	7823      	ldrb	r3, [r4, #0]
 80085c2:	2b2e      	cmp	r3, #46	; 0x2e
 80085c4:	d10c      	bne.n	80085e0 <_svfiprintf_r+0x130>
 80085c6:	7863      	ldrb	r3, [r4, #1]
 80085c8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ca:	d134      	bne.n	8008636 <_svfiprintf_r+0x186>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9203      	str	r2, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb8      	it	lt
 80085d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085dc:	3402      	adds	r4, #2
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086a8 <_svfiprintf_r+0x1f8>
 80085e4:	7821      	ldrb	r1, [r4, #0]
 80085e6:	2203      	movs	r2, #3
 80085e8:	4650      	mov	r0, sl
 80085ea:	f7f7 fe19 	bl	8000220 <memchr>
 80085ee:	b138      	cbz	r0, 8008600 <_svfiprintf_r+0x150>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	eba0 000a 	sub.w	r0, r0, sl
 80085f6:	2240      	movs	r2, #64	; 0x40
 80085f8:	4082      	lsls	r2, r0
 80085fa:	4313      	orrs	r3, r2
 80085fc:	3401      	adds	r4, #1
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	4825      	ldr	r0, [pc, #148]	; (800869c <_svfiprintf_r+0x1ec>)
 8008606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860a:	2206      	movs	r2, #6
 800860c:	f7f7 fe08 	bl	8000220 <memchr>
 8008610:	2800      	cmp	r0, #0
 8008612:	d038      	beq.n	8008686 <_svfiprintf_r+0x1d6>
 8008614:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <_svfiprintf_r+0x1f0>)
 8008616:	bb1b      	cbnz	r3, 8008660 <_svfiprintf_r+0x1b0>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	3307      	adds	r3, #7
 800861c:	f023 0307 	bic.w	r3, r3, #7
 8008620:	3308      	adds	r3, #8
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	4433      	add	r3, r6
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	e768      	b.n	80084fe <_svfiprintf_r+0x4e>
 800862c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008630:	460c      	mov	r4, r1
 8008632:	2001      	movs	r0, #1
 8008634:	e7a6      	b.n	8008584 <_svfiprintf_r+0xd4>
 8008636:	2300      	movs	r3, #0
 8008638:	3401      	adds	r4, #1
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	4619      	mov	r1, r3
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	3a30      	subs	r2, #48	; 0x30
 800864a:	2a09      	cmp	r2, #9
 800864c:	d903      	bls.n	8008656 <_svfiprintf_r+0x1a6>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c6      	beq.n	80085e0 <_svfiprintf_r+0x130>
 8008652:	9105      	str	r1, [sp, #20]
 8008654:	e7c4      	b.n	80085e0 <_svfiprintf_r+0x130>
 8008656:	fb0c 2101 	mla	r1, ip, r1, r2
 800865a:	4604      	mov	r4, r0
 800865c:	2301      	movs	r3, #1
 800865e:	e7f0      	b.n	8008642 <_svfiprintf_r+0x192>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <_svfiprintf_r+0x1f4>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4638      	mov	r0, r7
 800866c:	f3af 8000 	nop.w
 8008670:	1c42      	adds	r2, r0, #1
 8008672:	4606      	mov	r6, r0
 8008674:	d1d6      	bne.n	8008624 <_svfiprintf_r+0x174>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	065b      	lsls	r3, r3, #25
 800867a:	f53f af2d 	bmi.w	80084d8 <_svfiprintf_r+0x28>
 800867e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008680:	b01d      	add	sp, #116	; 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <_svfiprintf_r+0x1f4>)
 800868e:	a904      	add	r1, sp, #16
 8008690:	4638      	mov	r0, r7
 8008692:	f000 f879 	bl	8008788 <_printf_i>
 8008696:	e7eb      	b.n	8008670 <_svfiprintf_r+0x1c0>
 8008698:	08008b40 	.word	0x08008b40
 800869c:	08008b4a 	.word	0x08008b4a
 80086a0:	00000000 	.word	0x00000000
 80086a4:	080083fd 	.word	0x080083fd
 80086a8:	08008b46 	.word	0x08008b46

080086ac <_printf_common>:
 80086ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	4616      	mov	r6, r2
 80086b2:	4699      	mov	r9, r3
 80086b4:	688a      	ldr	r2, [r1, #8]
 80086b6:	690b      	ldr	r3, [r1, #16]
 80086b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bfb8      	it	lt
 80086c0:	4613      	movlt	r3, r2
 80086c2:	6033      	str	r3, [r6, #0]
 80086c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086c8:	4607      	mov	r7, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	b10a      	cbz	r2, 80086d2 <_printf_common+0x26>
 80086ce:	3301      	adds	r3, #1
 80086d0:	6033      	str	r3, [r6, #0]
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	0699      	lsls	r1, r3, #26
 80086d6:	bf42      	ittt	mi
 80086d8:	6833      	ldrmi	r3, [r6, #0]
 80086da:	3302      	addmi	r3, #2
 80086dc:	6033      	strmi	r3, [r6, #0]
 80086de:	6825      	ldr	r5, [r4, #0]
 80086e0:	f015 0506 	ands.w	r5, r5, #6
 80086e4:	d106      	bne.n	80086f4 <_printf_common+0x48>
 80086e6:	f104 0a19 	add.w	sl, r4, #25
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	6832      	ldr	r2, [r6, #0]
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dc26      	bgt.n	8008742 <_printf_common+0x96>
 80086f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086f8:	1e13      	subs	r3, r2, #0
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	bf18      	it	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	0692      	lsls	r2, r2, #26
 8008702:	d42b      	bmi.n	800875c <_printf_common+0xb0>
 8008704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008708:	4649      	mov	r1, r9
 800870a:	4638      	mov	r0, r7
 800870c:	47c0      	blx	r8
 800870e:	3001      	adds	r0, #1
 8008710:	d01e      	beq.n	8008750 <_printf_common+0xa4>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	f003 0306 	and.w	r3, r3, #6
 800871a:	2b04      	cmp	r3, #4
 800871c:	bf02      	ittt	eq
 800871e:	68e5      	ldreq	r5, [r4, #12]
 8008720:	6833      	ldreq	r3, [r6, #0]
 8008722:	1aed      	subeq	r5, r5, r3
 8008724:	68a3      	ldr	r3, [r4, #8]
 8008726:	bf0c      	ite	eq
 8008728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800872c:	2500      	movne	r5, #0
 800872e:	4293      	cmp	r3, r2
 8008730:	bfc4      	itt	gt
 8008732:	1a9b      	subgt	r3, r3, r2
 8008734:	18ed      	addgt	r5, r5, r3
 8008736:	2600      	movs	r6, #0
 8008738:	341a      	adds	r4, #26
 800873a:	42b5      	cmp	r5, r6
 800873c:	d11a      	bne.n	8008774 <_printf_common+0xc8>
 800873e:	2000      	movs	r0, #0
 8008740:	e008      	b.n	8008754 <_printf_common+0xa8>
 8008742:	2301      	movs	r3, #1
 8008744:	4652      	mov	r2, sl
 8008746:	4649      	mov	r1, r9
 8008748:	4638      	mov	r0, r7
 800874a:	47c0      	blx	r8
 800874c:	3001      	adds	r0, #1
 800874e:	d103      	bne.n	8008758 <_printf_common+0xac>
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008758:	3501      	adds	r5, #1
 800875a:	e7c6      	b.n	80086ea <_printf_common+0x3e>
 800875c:	18e1      	adds	r1, r4, r3
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	2030      	movs	r0, #48	; 0x30
 8008762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008766:	4422      	add	r2, r4
 8008768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800876c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008770:	3302      	adds	r3, #2
 8008772:	e7c7      	b.n	8008704 <_printf_common+0x58>
 8008774:	2301      	movs	r3, #1
 8008776:	4622      	mov	r2, r4
 8008778:	4649      	mov	r1, r9
 800877a:	4638      	mov	r0, r7
 800877c:	47c0      	blx	r8
 800877e:	3001      	adds	r0, #1
 8008780:	d0e6      	beq.n	8008750 <_printf_common+0xa4>
 8008782:	3601      	adds	r6, #1
 8008784:	e7d9      	b.n	800873a <_printf_common+0x8e>
	...

08008788 <_printf_i>:
 8008788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	7e0f      	ldrb	r7, [r1, #24]
 800878e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008790:	2f78      	cmp	r7, #120	; 0x78
 8008792:	4691      	mov	r9, r2
 8008794:	4680      	mov	r8, r0
 8008796:	460c      	mov	r4, r1
 8008798:	469a      	mov	sl, r3
 800879a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800879e:	d807      	bhi.n	80087b0 <_printf_i+0x28>
 80087a0:	2f62      	cmp	r7, #98	; 0x62
 80087a2:	d80a      	bhi.n	80087ba <_printf_i+0x32>
 80087a4:	2f00      	cmp	r7, #0
 80087a6:	f000 80d4 	beq.w	8008952 <_printf_i+0x1ca>
 80087aa:	2f58      	cmp	r7, #88	; 0x58
 80087ac:	f000 80c0 	beq.w	8008930 <_printf_i+0x1a8>
 80087b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087b8:	e03a      	b.n	8008830 <_printf_i+0xa8>
 80087ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087be:	2b15      	cmp	r3, #21
 80087c0:	d8f6      	bhi.n	80087b0 <_printf_i+0x28>
 80087c2:	a101      	add	r1, pc, #4	; (adr r1, 80087c8 <_printf_i+0x40>)
 80087c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c8:	08008821 	.word	0x08008821
 80087cc:	08008835 	.word	0x08008835
 80087d0:	080087b1 	.word	0x080087b1
 80087d4:	080087b1 	.word	0x080087b1
 80087d8:	080087b1 	.word	0x080087b1
 80087dc:	080087b1 	.word	0x080087b1
 80087e0:	08008835 	.word	0x08008835
 80087e4:	080087b1 	.word	0x080087b1
 80087e8:	080087b1 	.word	0x080087b1
 80087ec:	080087b1 	.word	0x080087b1
 80087f0:	080087b1 	.word	0x080087b1
 80087f4:	08008939 	.word	0x08008939
 80087f8:	08008861 	.word	0x08008861
 80087fc:	080088f3 	.word	0x080088f3
 8008800:	080087b1 	.word	0x080087b1
 8008804:	080087b1 	.word	0x080087b1
 8008808:	0800895b 	.word	0x0800895b
 800880c:	080087b1 	.word	0x080087b1
 8008810:	08008861 	.word	0x08008861
 8008814:	080087b1 	.word	0x080087b1
 8008818:	080087b1 	.word	0x080087b1
 800881c:	080088fb 	.word	0x080088fb
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	1d1a      	adds	r2, r3, #4
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008830:	2301      	movs	r3, #1
 8008832:	e09f      	b.n	8008974 <_printf_i+0x1ec>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	0607      	lsls	r7, r0, #24
 800883a:	f103 0104 	add.w	r1, r3, #4
 800883e:	6029      	str	r1, [r5, #0]
 8008840:	d501      	bpl.n	8008846 <_printf_i+0xbe>
 8008842:	681e      	ldr	r6, [r3, #0]
 8008844:	e003      	b.n	800884e <_printf_i+0xc6>
 8008846:	0646      	lsls	r6, r0, #25
 8008848:	d5fb      	bpl.n	8008842 <_printf_i+0xba>
 800884a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800884e:	2e00      	cmp	r6, #0
 8008850:	da03      	bge.n	800885a <_printf_i+0xd2>
 8008852:	232d      	movs	r3, #45	; 0x2d
 8008854:	4276      	negs	r6, r6
 8008856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800885a:	485a      	ldr	r0, [pc, #360]	; (80089c4 <_printf_i+0x23c>)
 800885c:	230a      	movs	r3, #10
 800885e:	e012      	b.n	8008886 <_printf_i+0xfe>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	1d19      	adds	r1, r3, #4
 8008866:	6029      	str	r1, [r5, #0]
 8008868:	0605      	lsls	r5, r0, #24
 800886a:	d501      	bpl.n	8008870 <_printf_i+0xe8>
 800886c:	681e      	ldr	r6, [r3, #0]
 800886e:	e002      	b.n	8008876 <_printf_i+0xee>
 8008870:	0641      	lsls	r1, r0, #25
 8008872:	d5fb      	bpl.n	800886c <_printf_i+0xe4>
 8008874:	881e      	ldrh	r6, [r3, #0]
 8008876:	4853      	ldr	r0, [pc, #332]	; (80089c4 <_printf_i+0x23c>)
 8008878:	2f6f      	cmp	r7, #111	; 0x6f
 800887a:	bf0c      	ite	eq
 800887c:	2308      	moveq	r3, #8
 800887e:	230a      	movne	r3, #10
 8008880:	2100      	movs	r1, #0
 8008882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008886:	6865      	ldr	r5, [r4, #4]
 8008888:	60a5      	str	r5, [r4, #8]
 800888a:	2d00      	cmp	r5, #0
 800888c:	bfa2      	ittt	ge
 800888e:	6821      	ldrge	r1, [r4, #0]
 8008890:	f021 0104 	bicge.w	r1, r1, #4
 8008894:	6021      	strge	r1, [r4, #0]
 8008896:	b90e      	cbnz	r6, 800889c <_printf_i+0x114>
 8008898:	2d00      	cmp	r5, #0
 800889a:	d04b      	beq.n	8008934 <_printf_i+0x1ac>
 800889c:	4615      	mov	r5, r2
 800889e:	fbb6 f1f3 	udiv	r1, r6, r3
 80088a2:	fb03 6711 	mls	r7, r3, r1, r6
 80088a6:	5dc7      	ldrb	r7, [r0, r7]
 80088a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088ac:	4637      	mov	r7, r6
 80088ae:	42bb      	cmp	r3, r7
 80088b0:	460e      	mov	r6, r1
 80088b2:	d9f4      	bls.n	800889e <_printf_i+0x116>
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d10b      	bne.n	80088d0 <_printf_i+0x148>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	07de      	lsls	r6, r3, #31
 80088bc:	d508      	bpl.n	80088d0 <_printf_i+0x148>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	6861      	ldr	r1, [r4, #4]
 80088c2:	4299      	cmp	r1, r3
 80088c4:	bfde      	ittt	le
 80088c6:	2330      	movle	r3, #48	; 0x30
 80088c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088d0:	1b52      	subs	r2, r2, r5
 80088d2:	6122      	str	r2, [r4, #16]
 80088d4:	f8cd a000 	str.w	sl, [sp]
 80088d8:	464b      	mov	r3, r9
 80088da:	aa03      	add	r2, sp, #12
 80088dc:	4621      	mov	r1, r4
 80088de:	4640      	mov	r0, r8
 80088e0:	f7ff fee4 	bl	80086ac <_printf_common>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d14a      	bne.n	800897e <_printf_i+0x1f6>
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	b004      	add	sp, #16
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	f043 0320 	orr.w	r3, r3, #32
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	4833      	ldr	r0, [pc, #204]	; (80089c8 <_printf_i+0x240>)
 80088fc:	2778      	movs	r7, #120	; 0x78
 80088fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	6829      	ldr	r1, [r5, #0]
 8008906:	061f      	lsls	r7, r3, #24
 8008908:	f851 6b04 	ldr.w	r6, [r1], #4
 800890c:	d402      	bmi.n	8008914 <_printf_i+0x18c>
 800890e:	065f      	lsls	r7, r3, #25
 8008910:	bf48      	it	mi
 8008912:	b2b6      	uxthmi	r6, r6
 8008914:	07df      	lsls	r7, r3, #31
 8008916:	bf48      	it	mi
 8008918:	f043 0320 	orrmi.w	r3, r3, #32
 800891c:	6029      	str	r1, [r5, #0]
 800891e:	bf48      	it	mi
 8008920:	6023      	strmi	r3, [r4, #0]
 8008922:	b91e      	cbnz	r6, 800892c <_printf_i+0x1a4>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	f023 0320 	bic.w	r3, r3, #32
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	2310      	movs	r3, #16
 800892e:	e7a7      	b.n	8008880 <_printf_i+0xf8>
 8008930:	4824      	ldr	r0, [pc, #144]	; (80089c4 <_printf_i+0x23c>)
 8008932:	e7e4      	b.n	80088fe <_printf_i+0x176>
 8008934:	4615      	mov	r5, r2
 8008936:	e7bd      	b.n	80088b4 <_printf_i+0x12c>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	6826      	ldr	r6, [r4, #0]
 800893c:	6961      	ldr	r1, [r4, #20]
 800893e:	1d18      	adds	r0, r3, #4
 8008940:	6028      	str	r0, [r5, #0]
 8008942:	0635      	lsls	r5, r6, #24
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	d501      	bpl.n	800894c <_printf_i+0x1c4>
 8008948:	6019      	str	r1, [r3, #0]
 800894a:	e002      	b.n	8008952 <_printf_i+0x1ca>
 800894c:	0670      	lsls	r0, r6, #25
 800894e:	d5fb      	bpl.n	8008948 <_printf_i+0x1c0>
 8008950:	8019      	strh	r1, [r3, #0]
 8008952:	2300      	movs	r3, #0
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	4615      	mov	r5, r2
 8008958:	e7bc      	b.n	80088d4 <_printf_i+0x14c>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	1d1a      	adds	r2, r3, #4
 800895e:	602a      	str	r2, [r5, #0]
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	2100      	movs	r1, #0
 8008966:	4628      	mov	r0, r5
 8008968:	f7f7 fc5a 	bl	8000220 <memchr>
 800896c:	b108      	cbz	r0, 8008972 <_printf_i+0x1ea>
 800896e:	1b40      	subs	r0, r0, r5
 8008970:	6060      	str	r0, [r4, #4]
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	2300      	movs	r3, #0
 8008978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800897c:	e7aa      	b.n	80088d4 <_printf_i+0x14c>
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	462a      	mov	r2, r5
 8008982:	4649      	mov	r1, r9
 8008984:	4640      	mov	r0, r8
 8008986:	47d0      	blx	sl
 8008988:	3001      	adds	r0, #1
 800898a:	d0ad      	beq.n	80088e8 <_printf_i+0x160>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	079b      	lsls	r3, r3, #30
 8008990:	d413      	bmi.n	80089ba <_printf_i+0x232>
 8008992:	68e0      	ldr	r0, [r4, #12]
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	4298      	cmp	r0, r3
 8008998:	bfb8      	it	lt
 800899a:	4618      	movlt	r0, r3
 800899c:	e7a6      	b.n	80088ec <_printf_i+0x164>
 800899e:	2301      	movs	r3, #1
 80089a0:	4632      	mov	r2, r6
 80089a2:	4649      	mov	r1, r9
 80089a4:	4640      	mov	r0, r8
 80089a6:	47d0      	blx	sl
 80089a8:	3001      	adds	r0, #1
 80089aa:	d09d      	beq.n	80088e8 <_printf_i+0x160>
 80089ac:	3501      	adds	r5, #1
 80089ae:	68e3      	ldr	r3, [r4, #12]
 80089b0:	9903      	ldr	r1, [sp, #12]
 80089b2:	1a5b      	subs	r3, r3, r1
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	dcf2      	bgt.n	800899e <_printf_i+0x216>
 80089b8:	e7eb      	b.n	8008992 <_printf_i+0x20a>
 80089ba:	2500      	movs	r5, #0
 80089bc:	f104 0619 	add.w	r6, r4, #25
 80089c0:	e7f5      	b.n	80089ae <_printf_i+0x226>
 80089c2:	bf00      	nop
 80089c4:	08008b51 	.word	0x08008b51
 80089c8:	08008b62 	.word	0x08008b62

080089cc <memmove>:
 80089cc:	4288      	cmp	r0, r1
 80089ce:	b510      	push	{r4, lr}
 80089d0:	eb01 0402 	add.w	r4, r1, r2
 80089d4:	d902      	bls.n	80089dc <memmove+0x10>
 80089d6:	4284      	cmp	r4, r0
 80089d8:	4623      	mov	r3, r4
 80089da:	d807      	bhi.n	80089ec <memmove+0x20>
 80089dc:	1e43      	subs	r3, r0, #1
 80089de:	42a1      	cmp	r1, r4
 80089e0:	d008      	beq.n	80089f4 <memmove+0x28>
 80089e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ea:	e7f8      	b.n	80089de <memmove+0x12>
 80089ec:	4402      	add	r2, r0
 80089ee:	4601      	mov	r1, r0
 80089f0:	428a      	cmp	r2, r1
 80089f2:	d100      	bne.n	80089f6 <memmove+0x2a>
 80089f4:	bd10      	pop	{r4, pc}
 80089f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089fe:	e7f7      	b.n	80089f0 <memmove+0x24>

08008a00 <_sbrk_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d06      	ldr	r5, [pc, #24]	; (8008a1c <_sbrk_r+0x1c>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f7f9 fa78 	bl	8001f00 <_sbrk>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_sbrk_r+0x1a>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_sbrk_r+0x1a>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	20002008 	.word	0x20002008

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <_realloc_r>:
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a40:	4680      	mov	r8, r0
 8008a42:	4614      	mov	r4, r2
 8008a44:	460e      	mov	r6, r1
 8008a46:	b921      	cbnz	r1, 8008a52 <_realloc_r+0x16>
 8008a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	f7ff bc49 	b.w	80082e4 <_malloc_r>
 8008a52:	b92a      	cbnz	r2, 8008a60 <_realloc_r+0x24>
 8008a54:	f7ff fbda 	bl	800820c <_free_r>
 8008a58:	4625      	mov	r5, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	f000 f81b 	bl	8008a9a <_malloc_usable_size_r>
 8008a64:	4284      	cmp	r4, r0
 8008a66:	4607      	mov	r7, r0
 8008a68:	d802      	bhi.n	8008a70 <_realloc_r+0x34>
 8008a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a6e:	d812      	bhi.n	8008a96 <_realloc_r+0x5a>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4640      	mov	r0, r8
 8008a74:	f7ff fc36 	bl	80082e4 <_malloc_r>
 8008a78:	4605      	mov	r5, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0ed      	beq.n	8008a5a <_realloc_r+0x1e>
 8008a7e:	42bc      	cmp	r4, r7
 8008a80:	4622      	mov	r2, r4
 8008a82:	4631      	mov	r1, r6
 8008a84:	bf28      	it	cs
 8008a86:	463a      	movcs	r2, r7
 8008a88:	f7ff ffca 	bl	8008a20 <memcpy>
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7ff fbbc 	bl	800820c <_free_r>
 8008a94:	e7e1      	b.n	8008a5a <_realloc_r+0x1e>
 8008a96:	4635      	mov	r5, r6
 8008a98:	e7df      	b.n	8008a5a <_realloc_r+0x1e>

08008a9a <_malloc_usable_size_r>:
 8008a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9e:	1f18      	subs	r0, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfbc      	itt	lt
 8008aa4:	580b      	ldrlt	r3, [r1, r0]
 8008aa6:	18c0      	addlt	r0, r0, r3
 8008aa8:	4770      	bx	lr
	...

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
