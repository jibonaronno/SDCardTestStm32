
SDCardTestStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006864  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b08  08006b08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000074  08006b8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08006b8c  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bd6  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f9  00000000  00000000  00036cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102a  00000000  00000000  0003b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026541  00000000  00000000  0003c59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf00  00000000  00000000  00062adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fdb  00000000  00000000  0007e9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cc0  00000000  00000000  001659b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a1c 	.word	0x08006a1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006a1c 	.word	0x08006a1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005bc:	b40f      	push	{r0, r1, r2, r3}
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	2164      	movs	r1, #100	; 0x64
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <myprintf+0x44>)
 80005d2:	f005 fd91 	bl	80060f8 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <myprintf+0x44>)
 80005d8:	f7ff fe1a 	bl	8000210 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	4905      	ldr	r1, [pc, #20]	; (8000600 <myprintf+0x44>)
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <myprintf+0x48>)
 80005ec:	f004 f923 	bl	8004836 <HAL_UART_Transmit>

}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fa:	b004      	add	sp, #16
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200004dc 	.word	0x200004dc
 8000604:	200001e0 	.word	0x200001e0

08000608 <insert_new_value>:

int32_t sawtooth_buf[10];
int gidxA = 0;

void insert_new_value(int32_t *buf, int32_t new_value)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	for(gidxA=0;gidxA<9;gidxA++)
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <insert_new_value+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e011      	b.n	800063e <insert_new_value+0x36>
	{
		buf[gidxA] = buf[gidxA+1];
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <insert_new_value+0x54>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	441a      	add	r2, r3
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <insert_new_value+0x54>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	440b      	add	r3, r1
 8000630:	6812      	ldr	r2, [r2, #0]
 8000632:	601a      	str	r2, [r3, #0]
	for(gidxA=0;gidxA<9;gidxA++)
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <insert_new_value+0x54>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <insert_new_value+0x54>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <insert_new_value+0x54>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b08      	cmp	r3, #8
 8000644:	dde9      	ble.n	800061a <insert_new_value+0x12>
	}

	buf[9] = new_value;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3324      	adds	r3, #36	; 0x24
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000290 	.word	0x20000290

08000660 <endWriting>:
		return -1;
	}
}

int endWriting(FIL *fil)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(log_file_opened == 0)
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <endWriting+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <endWriting+0x16>
	{
		return -1;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	e006      	b.n	8000684 <endWriting+0x24>
	}

	f_close(fil);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f005 fc6b 	bl	8005f52 <f_close>

	log_file_opened = 0;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <endWriting+0x2c>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

	return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200004c8 	.word	0x200004c8

08000690 <HAL_ADC_ConvCpltCallback>:
{

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_ADC_ConvCpltCallback+0x44>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
	ad1 = HAL_ADC_GetValue(&hadc1);
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80006a0:	f001 f85c 	bl	800175c <HAL_ADC_GetValue>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80006a8:	6013      	str	r3, [r2, #0]
	ad2 = HAL_ADC_GetValue(&hadc1);
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80006ac:	f001 f856 	bl	800175c <HAL_ADC_GetValue>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <HAL_ADC_ConvCpltCallback+0x50>)
 80006b4:	6013      	str	r3, [r2, #0]
	conv_rate++;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_ADC_ConvCpltCallback+0x54>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <HAL_ADC_ConvCpltCallback+0x54>)
 80006be:	6013      	str	r3, [r2, #0]

	insert_new_value(sawtooth_buf, (int32_t)ad1);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_ADC_ConvCpltCallback+0x4c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <HAL_ADC_ConvCpltCallback+0x58>)
 80006c8:	f7ff ff9e 	bl	8000608 <insert_new_value>
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
	if(flag_saving == 1)
	{
		;//keepWriting(&log_file, (int)ad1);
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000258 	.word	0x20000258
 80006d8:	20000090 	.word	0x20000090
 80006dc:	20000260 	.word	0x20000260
 80006e0:	20000264 	.word	0x20000264
 80006e4:	2000025c 	.word	0x2000025c
 80006e8:	20000268 	.word	0x20000268

080006ec <HAL_TIM_PeriodElapsedCallback>:
uint32_t __t2_cntr = 0;
uint32_t __dripA = 0;
uint32_t flag_saving_interval = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d131      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		if(__t2_cntr < 3)
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d805      	bhi.n	8000710 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			__t2_cntr++;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e002      	b.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x2a>
		}
		else
		{
			__t2_cntr = 0;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
		}

		if(__dripA > 0)
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d010      	beq.n	8000740 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			__dripA++;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000726:	6013      	str	r3, [r2, #0]

			if(__dripA > 1500) // 500uS
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000730:	4293      	cmp	r3, r2
 8000732:	d905      	bls.n	8000740 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				flag_FallingEdge = 0;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
				__dripA = 0;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
			}
		}

		if(flag_saving_interval > 0)
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00b      	beq.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			if(flag_saving_interval == 1)
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d102      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x6a>
			{
				endWriting(&log_file);
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000752:	f7ff ff85 	bl	8000660 <endWriting>
			}
			flag_saving_interval--;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800075e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000150 	.word	0x20000150
 800076c:	200004d0 	.word	0x200004d0
 8000770:	200004d4 	.word	0x200004d4
 8000774:	20000294 	.word	0x20000294
 8000778:	200004d8 	.word	0x200004d8
 800077c:	20000298 	.word	0x20000298

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 8000786:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint32_t a_shot = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	uint32_t b_shot = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

	int lidxA = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fd17 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f863 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 fa8d 	bl	8000cc0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80007a6:	f000 f98f 	bl	8000ac8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80007aa:	f000 fa5f 	bl	8000c6c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80007ae:	f004 fbb7 	bl	8004f20 <MX_FATFS_Init>
  MX_ADC1_Init();
 80007b2:	f000 f8cf 	bl	8000954 <MX_ADC1_Init>
  MX_RTC_Init();
 80007b6:	f000 f92b 	bl	8000a10 <MX_RTC_Init>
  MX_TIM1_Init();
 80007ba:	f000 f9bb 	bl	8000b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007be:	f000 fa09 	bl	8000bd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	HAL_ADC_Start_IT(&hadc1);
 80007c2:	481e      	ldr	r0, [pc, #120]	; (800083c <main+0xbc>)
 80007c4:	f000 fddc 	bl	8001380 <HAL_ADC_Start_IT>
    //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
    HAL_TIM_Base_Start(&htim1);
 80007c8:	481d      	ldr	r0, [pc, #116]	; (8000840 <main+0xc0>)
 80007ca:	f003 fbbd 	bl	8003f48 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <main+0xc4>)
 80007d0:	f003 fbba 	bl	8003f48 <HAL_TIM_Base_Start>


    myprintf("\r\n~ ADC Peak Detector ~\r\n\r\n");
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <main+0xc8>)
 80007d6:	f7ff fef1 	bl	80005bc <myprintf>

    HAL_Delay(500); //a short delay is important to let the SD card settle
 80007da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007de:	f000 fd67 	bl	80012b0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while(1)
    {
		if(HAL_GetTick() > (a_shot + 1000))
 80007e2:	f000 fd59 	bl	8001298 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80007ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d9f6      	bls.n	80007e2 <main+0x62>
		{
		  a_shot = HAL_GetTick();
 80007f4:	f000 fd50 	bl	8001298 <HAL_GetTick>
 80007f8:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
		  if(adcConversionComplete == 1)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <main+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d1ee      	bne.n	80007e2 <main+0x62>
		  {
			  adcConversionComplete = 0;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <main+0xcc>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
			  sprintf(strA1, "A0 - %d A1 - %d CONV RATE: %d\r\n", ad1, ad1, conv_rate);
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <main+0xd0>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <main+0xd0>)
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <main+0xd4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <main+0xd8>)
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <main+0xdc>)
 800081e:	f005 fc1f 	bl	8006060 <siprintf>
			  myprintf("%s", strA1);
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <main+0xdc>)
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <main+0xe0>)
 8000826:	f7ff fec9 	bl	80005bc <myprintf>
			  ////HAL_UART_Transmit(&huart2, strA1, strlen(strA1), 0xFFFF);
			  crate = conv_rate;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <main+0xd4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <main+0xe4>)
 8000830:	6013      	str	r3, [r2, #0]
			  conv_rate = 0;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <main+0xd4>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() > (a_shot + 1000))
 8000838:	e7d3      	b.n	80007e2 <main+0x62>
 800083a:	bf00      	nop
 800083c:	20000090 	.word	0x20000090
 8000840:	20000150 	.word	0x20000150
 8000844:	20000198 	.word	0x20000198
 8000848:	08006a7c 	.word	0x08006a7c
 800084c:	20000258 	.word	0x20000258
 8000850:	20000260 	.word	0x20000260
 8000854:	2000025c 	.word	0x2000025c
 8000858:	08006a98 	.word	0x08006a98
 800085c:	20000224 	.word	0x20000224
 8000860:	08006ab8 	.word	0x08006ab8
 8000864:	200004cc 	.word	0x200004cc

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fc4c 	bl	8006114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <SystemClock_Config+0xe4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a2d      	ldr	r2, [pc, #180]	; (800094c <SystemClock_Config+0xe4>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <SystemClock_Config+0xe4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xe8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xe8>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xe8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008c4:	2309      	movs	r3, #9
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d2:	2301      	movs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008e4:	23b4      	movs	r3, #180	; 0xb4
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fb0d 	bl	8002f18 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000904:	f000 fa42 	bl	8000d8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000908:	f001 fc42 	bl	8002190 <HAL_PWREx_EnableOverDrive>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000912:	f000 fa3b 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2105      	movs	r1, #5
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fc7b 	bl	8002230 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000940:	f000 fa24 	bl	8000d8c <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <MX_ADC1_Init+0xb8>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_ADC1_Init+0xb4>)
 800096e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_ADC1_Init+0xb4>)
 800097c:	2201      	movs	r2, #1
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000982:	2200      	movs	r2, #0
 8000984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_ADC1_Init+0xb4>)
 8000998:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009ba:	f000 fc9d 	bl	80012f8 <HAL_ADC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80009c4:	f000 f9e2 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009da:	f000 fee1 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009e4:	f000 f9d2 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_ADC1_Init+0xb4>)
 80009f2:	f000 fed5 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009fc:	f000 f9c6 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000090 	.word	0x20000090
 8000a0c:	40012000 	.word	0x40012000

08000a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a2a:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <MX_RTC_Init+0xb4>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a54:	f002 fcfe 	bl	8003454 <HAL_RTC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f995 	bl	8000d8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000a62:	2312      	movs	r3, #18
 8000a64:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000a66:	2338      	movs	r3, #56	; 0x38
 8000a68:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000a82:	f002 fd5d 	bl	8003540 <HAL_RTC_SetTime>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8000a8c:	f000 f97e 	bl	8000d8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000a90:	2302      	movs	r3, #2
 8000a92:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000a94:	2308      	movs	r3, #8
 8000a96:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x8;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_RTC_Init+0xb0>)
 8000aa8:	f002 fde4 	bl	8003674 <HAL_RTC_SetDate>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000ab2:	f000 f96b 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_SPI2_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000afc:	2230      	movs	r2, #48	; 0x30
 8000afe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI2_Init+0x64>)
 8000b1a:	f002 fed0 	bl	80038be <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b24:	f000 f932 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	40003800 	.word	0x40003800

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b58:	2206      	movs	r2, #6
 8000b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b7c:	f003 f994 	bl	8003ea8 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 f901 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4619      	mov	r1, r3
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000b98:	f003 fb46 	bl	8004228 <HAL_TIM_ConfigClockSource>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000ba2:	f000 f8f3 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_TIM1_Init+0x98>)
 8000bb4:	f003 fd62 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f000 f8e5 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000150 	.word	0x20000150
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000bfa:	2206      	movs	r2, #6
 8000bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c06:	220a      	movs	r2, #10
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c18:	f003 f946 	bl	8003ea8 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f8b3 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c34:	f003 faf8 	bl	8004228 <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 f8a5 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c42:	2320      	movs	r3, #32
 8000c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c50:	f003 fd14 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 f897 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000198 	.word	0x20000198

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART2_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f003 fd7a 	bl	800479c <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f86d 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001e0 	.word	0x200001e0
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <MX_GPIO_Init+0xc4>)
 8000d30:	f001 fa14 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_GPIO_Init+0xc8>)
 8000d3a:	f001 fa0f 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_GPIO_Init+0xc4>)
 8000d56:	f001 f86d 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d62:	2302      	movs	r3, #2
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_GPIO_Init+0xc8>)
 8000d72:	f001 f85f 	bl	8001e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_ADC_MspInit+0x8c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12f      	bne.n	8000e6a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_ADC_MspInit+0x90>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e42:	2303      	movs	r3, #3
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <HAL_ADC_MspInit+0x94>)
 8000e56:	f000 ffed 	bl	8001e34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2012      	movs	r0, #18
 8000e60:	f000 ffb1 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e64:	2012      	movs	r0, #18
 8000e66:	f000 ffca 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	225c      	movs	r2, #92	; 0x5c
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 f93f 	bl	8006114 <memset>
  if(hrtc->Instance==RTC)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_RTC_MspInit+0x4c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d111      	bne.n	8000ec4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fad8 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000eba:	f7ff ff67 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_RTC_MspInit+0x50>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3768      	adds	r7, #104	; 0x68
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40002800 	.word	0x40002800
 8000ed0:	42470e3c 	.word	0x42470e3c

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_SPI_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f40:	2305      	movs	r3, #5
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_SPI_MspInit+0x8c>)
 8000f4c:	f000 ff72 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40003800 	.word	0x40003800
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_TIM_Base_MspInit+0x70>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d116      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2019      	movs	r0, #25
 8000f98:	f000 ff15 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f9c:	2019      	movs	r0, #25
 8000f9e:	f000 ff2e 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa2:	e012      	b.n	8000fca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d10d      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_TIM_Base_MspInit+0x74>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_UART_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_UART_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001036:	230c      	movs	r3, #12
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001046:	2307      	movs	r3, #7
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_UART_MspInit+0x8c>)
 8001052:	f000 feef 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004400 	.word	0x40004400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f8da 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <ADC_IRQHandler+0x10>)
 80010c6:	f000 fa39 	bl	800153c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000090 	.word	0x20000090

080010d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010da:	f002 ff9d 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000150 	.word	0x20000150

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f005 f804 	bl	8006124 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20020000 	.word	0x20020000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000540 	.word	0x20000540
 8001150:	200006d0 	.word	0x200006d0

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 ffc3 	bl	8006130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fae9 	bl	8000780 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011bc:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 80011c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011c4:	200006d0 	.word	0x200006d0

080011c8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <CAN1_RX0_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fddb 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fdca 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fdf3 	bl	8001e1a <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 fdbb 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	20000544 	.word	0x20000544

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000544 	.word	0x20000544

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e033      	b.n	8001376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd66 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800133e:	f023 0302 	bic.w	r3, r3, #2
 8001342:	f043 0202 	orr.w	r2, r3, #2
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fb5a 	bl	8001a04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
 8001366:	e001      	b.n	800136c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_ADC_Start_IT+0x1a>
 8001396:	2302      	movs	r3, #2
 8001398:	e0bd      	b.n	8001516 <HAL_ADC_Start_IT+0x196>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d018      	beq.n	80013e2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c0:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_ADC_Start_IT+0x1a4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_ADC_Start_IT+0x1a8>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9a      	lsrs	r2, r3, #18
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 8085 	bne.w	80014fc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001430:	d106      	bne.n	8001440 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f023 0206 	bic.w	r2, r3, #6
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_ADC_Start_IT+0x1ac>)
 8001450:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800145a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2b00      	cmp	r3, #0
 800147a:	d12a      	bne.n	80014d2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <HAL_ADC_Start_IT+0x1b0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d015      	beq.n	80014b2 <HAL_ADC_Start_IT+0x132>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <HAL_ADC_Start_IT+0x1b4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d105      	bne.n	800149c <HAL_ADC_Start_IT+0x11c>
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_ADC_Start_IT+0x1ac>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_ADC_Start_IT+0x1b8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d136      	bne.n	8001514 <HAL_ADC_Start_IT+0x194>
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_ADC_Start_IT+0x1ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d130      	bne.n	8001514 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d129      	bne.n	8001514 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	e020      	b.n	8001514 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_ADC_Start_IT+0x1b0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11b      	bne.n	8001514 <HAL_ADC_Start_IT+0x194>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d114      	bne.n	8001514 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	e00b      	b.n	8001514 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f043 0210 	orr.w	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	40012100 	.word	0x40012100
 8001538:	40012200 	.word	0x40012200

0800153c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d049      	beq.n	8001606 <HAL_ADC_IRQHandler+0xca>
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d046      	beq.n	8001606 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12b      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d127      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0220 	bic.w	r2, r2, #32
 80015d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff f84a 	bl	8000690 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0212 	mvn.w	r2, #18
 8001604:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001614:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d057      	beq.n	80016cc <HAL_ADC_IRQHandler+0x190>
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d054      	beq.n	80016cc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d139      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001660:	2b00      	cmp	r3, #0
 8001662:	d12b      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d124      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11d      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001684:	2b00      	cmp	r3, #0
 8001686:	d119      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fa9d 	bl	8001bfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 020c 	mvn.w	r2, #12
 80016ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d017      	beq.n	8001712 <HAL_ADC_IRQHandler+0x1d6>
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d014      	beq.n	8001712 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f837 	bl	8001776 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0201 	mvn.w	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001720:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <HAL_ADC_IRQHandler+0x218>
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d012      	beq.n	8001754 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f06f 0220 	mvn.w	r2, #32
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f820 	bl	800178a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0220 	mvn.w	r2, #32
 8001752:	601a      	str	r2, [r3, #0]
  }
}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1c>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e113      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x244>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d925      	bls.n	8001818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	3b1e      	subs	r3, #30
 80017e2:	2207      	movs	r2, #7
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43da      	mvns	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	3b1e      	subs	r3, #30
 800180c:	409a      	lsls	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	e022      	b.n	800185e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6919      	ldr	r1, [r3, #16]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	2207      	movs	r2, #7
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	400a      	ands	r2, r1
 800183a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4403      	add	r3, r0
 8001854:	409a      	lsls	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d824      	bhi.n	80018b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	3b05      	subs	r3, #5
 8001878:	221f      	movs	r2, #31
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b05      	subs	r3, #5
 80018a2:	fa00 f203 	lsl.w	r2, r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
 80018ae:	e04c      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d824      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b23      	subs	r3, #35	; 0x23
 80018ca:	221f      	movs	r2, #31
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b23      	subs	r3, #35	; 0x23
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001900:	e023      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b41      	subs	r3, #65	; 0x41
 8001914:	221f      	movs	r2, #31
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b41      	subs	r3, #65	; 0x41
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_ADC_ConfigChannel+0x250>)
 800194c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10f      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x1f4>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b11      	cmp	r3, #17
 8001992:	d122      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d111      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_ADC_ConfigChannel+0x25c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_ConfigChannel+0x260>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9a      	lsrs	r2, r3, #18
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	10000012 	.word	0x10000012
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <ADC_Init+0x1f0>)
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	021a      	lsls	r2, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <ADC_Init+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6899      	ldr	r1, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	e00f      	b.n	8001b02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0202 	bic.w	r2, r2, #2
 8001b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e1b      	ldrb	r3, [r3, #24]
 8001b1c:	005a      	lsls	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	035a      	lsls	r2, r3, #13
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e007      	b.n	8001b78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	051a      	lsls	r2, r3, #20
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bba:	025a      	lsls	r2, r3, #9
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	029a      	lsls	r2, r3, #10
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e165      	b.n	800211c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8154 	bne.w	8002116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80ae 	beq.w	8002116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_GPIO_Init+0x300>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_GPIO_Init+0x300>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_GPIO_Init+0x300>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_GPIO_Init+0x304>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	; (800213c <HAL_GPIO_Init+0x308>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x30c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x310>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x314>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x318>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x20a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x31c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x206>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x320>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x202>
 8002032:	2306      	movs	r3, #6
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002036:	2307      	movs	r3, #7
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	; (8002138 <HAL_GPIO_Init+0x304>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_GPIO_Init+0x324>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_GPIO_Init+0x324>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_GPIO_Init+0x324>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_GPIO_Init+0x324>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_GPIO_Init+0x324>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_GPIO_Init+0x324>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_GPIO_Init+0x324>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_GPIO_Init+0x324>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae96 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_PWREx_EnableOverDrive+0x90>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_PWREx_EnableOverDrive+0x90>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_PWREx_EnableOverDrive+0x90>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_PWREx_EnableOverDrive+0x94>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021bc:	f7ff f86c 	bl	8001298 <HAL_GetTick>
 80021c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021c2:	e009      	b.n	80021d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021c4:	f7ff f868 	bl	8001298 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d2:	d901      	bls.n	80021d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e01f      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_PWREx_EnableOverDrive+0x98>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d1ee      	bne.n	80021c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff f854 	bl	8001298 <HAL_GetTick>
 80021f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021f2:	e009      	b.n	8002208 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f4:	f7ff f850 	bl	8001298 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002202:	d901      	bls.n	8002208 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e007      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_PWREx_EnableOverDrive+0x98>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002214:	d1ee      	bne.n	80021f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	420e0040 	.word	0x420e0040
 8002228:	40007000 	.word	0x40007000
 800222c:	420e0044 	.word	0x420e0044

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0cc      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d90c      	bls.n	800226c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4934      	ldr	r1, [pc, #208]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe ffba 	bl	8001298 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe ffb6 	bl	8001298 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e04f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 fb7f 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe ff1a 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08006abc 	.word	0x08006abc
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002418:	f7ff fff0 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0a9b      	lsrs	r3, r3, #10
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	08006acc 	.word	0x08006acc

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffdc 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0b5b      	lsrs	r3, r3, #13
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	08006acc 	.word	0x08006acc

08002464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800249e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	496c      	ldr	r1, [pc, #432]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80024ba:	2301      	movs	r3, #1
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	4960      	ldr	r1, [pc, #384]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024e8:	2301      	movs	r3, #1
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f8:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4955      	ldr	r1, [pc, #340]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002516:	d101      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002524:	2301      	movs	r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002534:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	4946      	ldr	r1, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d101      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002554:	2301      	movs	r3, #1
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002560:	2301      	movs	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 808a 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a38      	ldr	r2, [pc, #224]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800259a:	f7fe fe7d 	bl	8001298 <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe fe79 	bl	8001298 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e278      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d02f      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d028      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d114      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fe47 	bl	8001298 <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fe43 	bl	8001298 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e240      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ee      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263c:	d114      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002652:	4902      	ldr	r1, [pc, #8]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
 8002658:	e00c      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470e40 	.word	0x42470e40
 8002668:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a49      	ldr	r2, [pc, #292]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	4944      	ldr	r1, [pc, #272]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002682:	4313      	orrs	r3, r2
 8002684:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002698:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800269a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	492e      	ldr	r1, [pc, #184]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	4926      	ldr	r1, [pc, #152]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d101      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800270c:	2301      	movs	r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	2b00      	cmp	r3, #0
 800273c:	d011      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002744:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	4911      	ldr	r1, [pc, #68]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275c:	d101      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800275e:	2301      	movs	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d005      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002770:	f040 80ff 	bne.w	8002972 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800277a:	f7fe fd8d 	bl	8001298 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002782:	f7fe fd89 	bl	8001298 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e188      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002794:	40023800 	.word	0x40023800
 8002798:	424711e0 	.word	0x424711e0
 800279c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027a0:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d028      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d124      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027d4:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	3301      	adds	r3, #1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ec:	0e1b      	lsrs	r3, r3, #24
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	431a      	orrs	r2, r3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	071b      	lsls	r3, r3, #28
 8002816:	4961      	ldr	r1, [pc, #388]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800283c:	2b00      	cmp	r3, #0
 800283e:	d035      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002848:	d130      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	0f1b      	lsrs	r3, r3, #28
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	431a      	orrs	r2, r3
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	4943      	ldr	r1, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f023 021f 	bic.w	r2, r3, #31
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	493d      	ldr	r1, [pc, #244]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d029      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c0:	d124      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028da:	0f1b      	lsrs	r3, r3, #28
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	071b      	lsls	r3, r3, #28
 8002904:	4925      	ldr	r1, [pc, #148]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	071b      	lsls	r3, r3, #28
 800293e:	4917      	ldr	r1, [pc, #92]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe fca4 	bl	8001298 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002954:	f7fe fca0 	bl	8001298 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e09f      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	2b01      	cmp	r3, #1
 8002976:	f040 8095 	bne.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002980:	f7fe fc8a 	bl	8001298 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002986:	e00f      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002988:	f7fe fc86 	bl	8001298 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d908      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e085      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470068 	.word	0x42470068
 80029a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d0e8      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02b      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d127      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	4928      	ldr	r1, [pc, #160]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a14:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	3b01      	subs	r3, #1
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a42:	d118      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	0e1b      	lsrs	r3, r3, #24
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fc0c 	bl	8001298 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a84:	f7fe fc08 	bl	8001298 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e007      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa2:	d1ef      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3730      	adds	r7, #48	; 0x30
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	42470070 	.word	0x42470070

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b0ae      	sub	sp, #184	; 0xb8
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ade:	4bcb      	ldr	r3, [pc, #812]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	f200 8206 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x440>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b29 	.word	0x08002b29
 8002af8:	08002ef9 	.word	0x08002ef9
 8002afc:	08002ef9 	.word	0x08002ef9
 8002b00:	08002ef9 	.word	0x08002ef9
 8002b04:	08002b31 	.word	0x08002b31
 8002b08:	08002ef9 	.word	0x08002ef9
 8002b0c:	08002ef9 	.word	0x08002ef9
 8002b10:	08002ef9 	.word	0x08002ef9
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002ef9 	.word	0x08002ef9
 8002b1c:	08002ef9 	.word	0x08002ef9
 8002b20:	08002ef9 	.word	0x08002ef9
 8002b24:	08002d29 	.word	0x08002d29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4bb9      	ldr	r3, [pc, #740]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b2e:	e1e7      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b30:	4bb8      	ldr	r3, [pc, #736]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b36:	e1e3      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b38:	4bb4      	ldr	r3, [pc, #720]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b44:	4bb1      	ldr	r3, [pc, #708]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d071      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	4bae      	ldr	r3, [pc, #696]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b76:	4622      	mov	r2, r4
 8002b78:	462b      	mov	r3, r5
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4621      	mov	r1, r4
 8002b90:	1a51      	subs	r1, r2, r1
 8002b92:	6439      	str	r1, [r7, #64]	; 0x40
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ba8:	4649      	mov	r1, r9
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	018a      	lsls	r2, r1, #6
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	1a51      	subs	r1, r2, r1
 8002bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	00cb      	lsls	r3, r1, #3
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bda:	4641      	mov	r1, r8
 8002bdc:	00ca      	lsls	r2, r1, #3
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	4622      	mov	r2, r4
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bea:	462b      	mov	r3, r5
 8002bec:	460a      	mov	r2, r1
 8002bee:	eb42 0303 	adc.w	r3, r2, r3
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c00:	4629      	mov	r1, r5
 8002c02:	024b      	lsls	r3, r1, #9
 8002c04:	4621      	mov	r1, r4
 8002c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	024a      	lsls	r2, r1, #9
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c24:	f7fd fb4c 	bl	80002c0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c32:	e067      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c4e:	2300      	movs	r3, #0
 8002c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c56:	4622      	mov	r2, r4
 8002c58:	462b      	mov	r3, r5
 8002c5a:	f04f 0000 	mov.w	r0, #0
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	0159      	lsls	r1, r3, #5
 8002c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c68:	0150      	lsls	r0, r2, #5
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4621      	mov	r1, r4
 8002c70:	1a51      	subs	r1, r2, r1
 8002c72:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c74:	4629      	mov	r1, r5
 8002c76:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c88:	4649      	mov	r1, r9
 8002c8a:	018b      	lsls	r3, r1, #6
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c92:	4641      	mov	r1, r8
 8002c94:	018a      	lsls	r2, r1, #6
 8002c96:	4641      	mov	r1, r8
 8002c98:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb6:	4692      	mov	sl, r2
 8002cb8:	469b      	mov	fp, r3
 8002cba:	4623      	mov	r3, r4
 8002cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cec:	2200      	movs	r2, #0
 8002cee:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf0:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cf6:	f7fd fae3 	bl	80002c0 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d04:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d26:	e0eb      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d28:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d06b      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	2200      	movs	r2, #0
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d52:	663b      	str	r3, [r7, #96]	; 0x60
 8002d54:	2300      	movs	r3, #0
 8002d56:	667b      	str	r3, [r7, #100]	; 0x64
 8002d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	462b      	mov	r3, r5
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0159      	lsls	r1, r3, #5
 8002d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6e:	0150      	lsls	r0, r2, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4621      	mov	r1, r4
 8002d76:	1a51      	subs	r1, r2, r1
 8002d78:	61b9      	str	r1, [r7, #24]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d8e:	4659      	mov	r1, fp
 8002d90:	018b      	lsls	r3, r1, #6
 8002d92:	4651      	mov	r1, sl
 8002d94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d98:	4651      	mov	r1, sl
 8002d9a:	018a      	lsls	r2, r1, #6
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ebb2 0801 	subs.w	r8, r2, r1
 8002da2:	4659      	mov	r1, fp
 8002da4:	eb63 0901 	sbc.w	r9, r3, r1
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dbc:	4690      	mov	r8, r2
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	eb18 0303 	adds.w	r3, r8, r3
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	462b      	mov	r3, r5
 8002dca:	eb49 0303 	adc.w	r3, r9, r3
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ddc:	4629      	mov	r1, r5
 8002dde:	024b      	lsls	r3, r1, #9
 8002de0:	4621      	mov	r1, r4
 8002de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002de6:	4621      	mov	r1, r4
 8002de8:	024a      	lsls	r2, r1, #9
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df2:	2200      	movs	r2, #0
 8002df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002df6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dfc:	f7fd fa60 	bl	80002c0 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e0a:	e065      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x420>
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e18:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	4611      	mov	r1, r2
 8002e24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e32:	4642      	mov	r2, r8
 8002e34:	464b      	mov	r3, r9
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	1a51      	subs	r1, r2, r1
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	4649      	mov	r1, r9
 8002e52:	eb63 0301 	sbc.w	r3, r3, r1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e64:	4659      	mov	r1, fp
 8002e66:	018b      	lsls	r3, r1, #6
 8002e68:	4651      	mov	r1, sl
 8002e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6e:	4651      	mov	r1, sl
 8002e70:	018a      	lsls	r2, r1, #6
 8002e72:	4651      	mov	r1, sl
 8002e74:	1a54      	subs	r4, r2, r1
 8002e76:	4659      	mov	r1, fp
 8002e78:	eb63 0501 	sbc.w	r5, r3, r1
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	00eb      	lsls	r3, r5, #3
 8002e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8a:	00e2      	lsls	r2, r4, #3
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4643      	mov	r3, r8
 8002e92:	18e3      	adds	r3, r4, r3
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb45 0303 	adc.w	r3, r5, r3
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ec6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eca:	f7fd f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0f1b      	lsrs	r3, r3, #28
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ef6:	e003      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	37b8      	adds	r7, #184	; 0xb8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400

08002f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e28d      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8083 	beq.w	800303e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f38:	4b94      	ldr	r3, [pc, #592]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d019      	beq.n	8002f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f44:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f50:	4b8e      	ldr	r3, [pc, #568]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d00c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d112      	bne.n	8002f90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d05b      	beq.n	800303c <HAL_RCC_OscConfig+0x124>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d157      	bne.n	800303c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e25a      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d106      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x90>
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7b      	ldr	r2, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xcc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xb4>
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a75      	ldr	r2, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a72      	ldr	r2, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xcc>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6b      	ldr	r2, [pc, #428]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f954 	bl	8001298 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe f950 	bl	8001298 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e21f      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xdc>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe f940 	bl	8001298 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe f93c 	bl	8001298 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e20b      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x104>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d06f      	beq.n	800312a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800304a:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x274>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800305e:	2b08      	cmp	r3, #8
 8003060:	d105      	bne.n	800306e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003062:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d11c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b44      	ldr	r3, [pc, #272]	; (800318c <HAL_RCC_OscConfig+0x274>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d116      	bne.n	80030b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x186>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e1d3      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x274>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x274>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	e03a      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030bc:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x278>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe f8e9 	bl	8001298 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe f8e5 	bl	8001298 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1b4      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCC_OscConfig+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4925      	ldr	r1, [pc, #148]	; (800318c <HAL_RCC_OscConfig+0x274>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
 80030fc:	e015      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_OscConfig+0x278>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f8c8 	bl	8001298 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310c:	f7fe f8c4 	bl	8001298 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e193      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d036      	beq.n	80031a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe f8a8 	bl	8001298 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe f8a4 	bl	8001298 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e173      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x274>)
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x234>
 800316a:	e01b      	b.n	80031a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_OscConfig+0x27c>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe f891 	bl	8001298 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	e00e      	b.n	8003198 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317a:	f7fe f88d 	bl	8001298 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d907      	bls.n	8003198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e15c      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ea      	bne.n	800317a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8097 	beq.w	80032e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b83      	ldr	r3, [pc, #524]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b79      	ldr	r3, [pc, #484]	; (80033c8 <HAL_RCC_OscConfig+0x4b0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x4b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4b0>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fe f84d 	bl	8001298 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fe f849 	bl	8001298 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e118      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x4b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x31e>
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	e01c      	b.n	8003270 <HAL_RCC_OscConfig+0x358>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x340>
 800323e:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a60      	ldr	r2, [pc, #384]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
 800324a:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a5d      	ldr	r2, [pc, #372]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0x358>
 8003258:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a59      	ldr	r2, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe f80e 	bl	8001298 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fe f80a 	bl	8001298 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0d7      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ee      	beq.n	8003280 <HAL_RCC_OscConfig+0x368>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fff8 	bl	8001298 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fd fff4 	bl	8001298 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0c1      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c2:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1ee      	bne.n	80032ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80ad 	beq.w	8003444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d060      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d145      	bne.n	800338a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_RCC_OscConfig+0x4b4>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd ffc8 	bl	8001298 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7fd ffc4 	bl	8001298 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e093      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	491b      	ldr	r1, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x4b4>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fd ff99 	bl	8001298 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fd ff95 	bl	8001298 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e064      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x452>
 8003388:	e05c      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCC_OscConfig+0x4b4>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd ff82 	bl	8001298 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd ff7e 	bl	8001298 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04d      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCC_OscConfig+0x4ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x480>
 80033b6:	e045      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e040      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000
 80033cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_RCC_OscConfig+0x538>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d030      	beq.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d129      	bne.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d122      	bne.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003408:	4293      	cmp	r3, r2
 800340a:	d119      	bne.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d10f      	bne.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e066      	b.n	8003538 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7f5b      	ldrb	r3, [r3, #29]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fd00 	bl	8000e80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	22ca      	movs	r2, #202	; 0xca
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2253      	movs	r2, #83	; 0x53
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f998 	bl	80037cc <RTC_EnterInitMode>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d12c      	bne.n	8003500 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68d2      	ldr	r2, [r2, #12]
 80034e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6919      	ldr	r1, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f99f 	bl	800383a <RTC_ExitInitMode>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	22ff      	movs	r2, #255	; 0xff
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	7f1b      	ldrb	r3, [r3, #28]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_RTC_SetTime+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e087      	b.n	800366c <HAL_RTC_SetTime+0x12c>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d126      	bne.n	80035bc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f97c 	bl	8003884 <RTC_ByteToBcd2>
 800358c:	4603      	mov	r3, r0
 800358e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f975 	bl	8003884 <RTC_ByteToBcd2>
 800359a:	4603      	mov	r3, r0
 800359c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800359e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	789b      	ldrb	r3, [r3, #2]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f96d 	bl	8003884 <RTC_ByteToBcd2>
 80035aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e018      	b.n	80035ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2200      	movs	r2, #0
 80035ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	78db      	ldrb	r3, [r3, #3]
 80035e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	22ca      	movs	r2, #202	; 0xca
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2253      	movs	r2, #83	; 0x53
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8e4 	bl	80037cc <RTC_EnterInitMode>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d120      	bne.n	8003650 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003618:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800361c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800362c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8f7 	bl	800383a <RTC_ExitInitMode>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	771a      	strb	r2, [r3, #28]

  return status;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	7f1b      	ldrb	r3, [r3, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_RTC_SetDate+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e071      	b.n	8003774 <HAL_RTC_SetDate+0x100>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2202      	movs	r2, #2
 800369a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_RTC_SetDate+0x4c>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	f023 0310 	bic.w	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	330a      	adds	r3, #10
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11c      	bne.n	8003700 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f8da 	bl	8003884 <RTC_ByteToBcd2>
 80036d0:	4603      	mov	r3, r0
 80036d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f8d3 	bl	8003884 <RTC_ByteToBcd2>
 80036de:	4603      	mov	r3, r0
 80036e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	789b      	ldrb	r3, [r3, #2]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f8cb 	bl	8003884 <RTC_ByteToBcd2>
 80036ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e00e      	b.n	800371e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800370c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003712:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	22ca      	movs	r2, #202	; 0xca
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2253      	movs	r2, #83	; 0x53
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f84c 	bl	80037cc <RTC_EnterInitMode>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800374c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f873 	bl	800383a <RTC_ExitInitMode>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	771a      	strb	r2, [r3, #28]

  return status;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd90      	pop	{r4, r7, pc}

0800377c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003796:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7fd fd7e 	bl	8001298 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800379e:	e009      	b.n	80037b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037a0:	f7fd fd7a 	bl	8001298 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ae:	d901      	bls.n	80037b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e007      	b.n	80037c4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ee      	beq.n	80037a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d122      	bne.n	8003830 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037fa:	f7fd fd4d 	bl	8001298 <HAL_GetTick>
 80037fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003800:	e00c      	b.n	800381c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003802:	f7fd fd49 	bl	8001298 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003810:	d904      	bls.n	800381c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <RTC_EnterInitMode+0x64>
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d1e8      	bne.n	8003802 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003854:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff89 	bl	800377c <HAL_RTC_WaitForSynchro>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003892:	e005      	b.n	80038a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	3301      	adds	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	3b0a      	subs	r3, #10
 800389e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b09      	cmp	r3, #9
 80038a4:	d8f6      	bhi.n	8003894 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	b2db      	uxtb	r3, r3
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e07b      	b.n	80039c8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e0:	d009      	beq.n	80038f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	61da      	str	r2, [r3, #28]
 80038e8:	e005      	b.n	80038f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd fadf 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	ea42 0103 	orr.w	r1, r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	0c1b      	lsrs	r3, r3, #16
 8003994:	f003 0104 	and.w	r1, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f003 0210 	and.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	; 0x30
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039de:	2301      	movs	r3, #1
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x26>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e18a      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x33c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039fe:	f7fd fc4b 	bl	8001298 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00f      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x70>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d107      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x68>
 8003a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d003      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a3e:	e15b      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_SPI_TransmitReceive+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_TransmitReceive+0x82>
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a58:	e14e      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	887a      	ldrh	r2, [r7, #2]
 8003a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d007      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aca:	d178      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x10a>
 8003ad4:	8b7b      	ldrh	r3, [r7, #26]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d166      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003afe:	e053      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d11b      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x176>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x176>
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d113      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d119      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x1b8>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d014      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b88:	f7fd fb86 	bl	8001298 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d807      	bhi.n	8003ba8 <HAL_SPI_TransmitReceive+0x1d8>
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d003      	beq.n	8003ba8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba6:	e0a7      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1a6      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x130>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1a1      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x130>
 8003bbc:	e07c      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x1fc>
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d16b      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf2:	e057      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d11c      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x26c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x26c>
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d114      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d119      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x2ae>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d014      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c7e:	f7fd fb0b 	bl	8001298 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d803      	bhi.n	8003c96 <HAL_SPI_TransmitReceive+0x2c6>
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d102      	bne.n	8003c9c <HAL_SPI_TransmitReceive+0x2cc>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca2:	e029      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1a2      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x224>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d19d      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8b1 	bl	8003e24 <SPI_EndRxTxTransaction>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d006      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cd4:	e010      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e000      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3730      	adds	r7, #48	; 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d24:	f7fd fab8 	bl	8001298 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d34:	f7fd fab0 	bl	8001298 <HAL_GetTick>
 8003d38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	015b      	lsls	r3, r3, #5
 8003d40:	0d1b      	lsrs	r3, r3, #20
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4a:	e054      	b.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d050      	beq.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d54:	f7fd faa0 	bl	8001298 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13d      	bne.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d82:	d111      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d004      	beq.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d107      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d10f      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e017      	b.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d19b      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000000 	.word	0x20000000

08003e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <SPI_EndRxTxTransaction+0x7c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <SPI_EndRxTxTransaction+0x80>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0d5b      	lsrs	r3, r3, #21
 8003e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4e:	d112      	bne.n	8003e76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ff5a 	bl	8003d14 <SPI_WaitFlagStateUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e00f      	b.n	8003e96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d0f2      	beq.n	8003e76 <SPI_EndRxTxTransaction+0x52>
 8003e90:	e000      	b.n	8003e94 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e92:	bf00      	nop
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	165e9f81 	.word	0x165e9f81

08003ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e041      	b.n	8003f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f848 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f000 fa8e 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e046      	b.n	8003fee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <HAL_TIM_Base_Start+0xb4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d022      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7a:	d01d      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_TIM_Base_Start+0xb8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d018      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <HAL_TIM_Base_Start+0xbc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d013      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_TIM_Base_Start+0xc0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_TIM_Base_Start+0xc4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_TIM_Base_Start+0xc8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_TIM_Base_Start+0x70>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_TIM_Base_Start+0xcc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d010      	beq.n	8003fec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fda:	e007      	b.n	8003fec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40010400 	.word	0x40010400
 8004010:	40014000 	.word	0x40014000
 8004014:	40001800 	.word	0x40001800

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0202 	mvn.w	r2, #2
 8004044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9b5 	bl	80043ca <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9a7 	bl	80043b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9b8 	bl	80043de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f98b 	bl	80043ca <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f97d 	bl	80043b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f98e 	bl	80043de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f961 	bl	80043ca <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f953 	bl	80043b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f964 	bl	80043de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2208      	movs	r2, #8
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f937 	bl	80043ca <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f929 	bl	80043b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f93a 	bl	80043de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc faa8 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fae0 	bl	8004788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8ff 	bl	80043f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0220 	mvn.w	r2, #32
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 faaa 	bl	8004774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIM_ConfigClockSource+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e0b4      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x186>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d03e      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xd4>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	f200 8087 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	f000 8086 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x172>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	d87f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d01a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xa6>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d87b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b60      	cmp	r3, #96	; 0x60
 800429e:	d050      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x11a>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d877      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b50      	cmp	r3, #80	; 0x50
 80042a6:	d03c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xfa>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d873      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d058      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x13a>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d86f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d064      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d86b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d060      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d867      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d05a      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042cc:	e062      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f000 f9ad 	bl	800463c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e04f      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f000 f996 	bl	800463c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	609a      	str	r2, [r3, #8]
      break;
 8004320:	e03c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f000 f90a 	bl	8004548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2150      	movs	r1, #80	; 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f963 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 8004340:	e02c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	f000 f929 	bl	80045a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2160      	movs	r1, #96	; 0x60
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f953 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 8004360:	e01c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	f000 f8ea 	bl	8004548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f943 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 8004380:	e00c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f000 f93a 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 8004392:	e003      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	e000      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800439a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <TIM_Base_SetConfig+0x114>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <TIM_Base_SetConfig+0x118>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <TIM_Base_SetConfig+0x11c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3b      	ldr	r2, [pc, #236]	; (8004528 <TIM_Base_SetConfig+0x120>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3a      	ldr	r2, [pc, #232]	; (800452c <TIM_Base_SetConfig+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2f      	ldr	r2, [pc, #188]	; (800451c <TIM_Base_SetConfig+0x114>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d027      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <TIM_Base_SetConfig+0x118>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d023      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <TIM_Base_SetConfig+0x11c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <TIM_Base_SetConfig+0x120>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <TIM_Base_SetConfig+0x124>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d017      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <TIM_Base_SetConfig+0x128>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a27      	ldr	r2, [pc, #156]	; (8004534 <TIM_Base_SetConfig+0x12c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <TIM_Base_SetConfig+0x130>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <TIM_Base_SetConfig+0x134>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <TIM_Base_SetConfig+0x138>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <TIM_Base_SetConfig+0x13c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <TIM_Base_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_Base_SetConfig+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <TIM_Base_SetConfig+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d103      	bne.n	8004508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	615a      	str	r2, [r3, #20]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40010400 	.word	0x40010400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800
 800453c:	40001800 	.word	0x40001800
 8004540:	40001c00 	.word	0x40001c00
 8004544:	40002000 	.word	0x40002000

08004548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0201 	bic.w	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 030a 	bic.w	r3, r3, #10
 8004584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b087      	sub	sp, #28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0210 	bic.w	r2, r3, #16
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	031b      	lsls	r3, r3, #12
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	f043 0307 	orr.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	431a      	orrs	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e05a      	b.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d01d      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10c      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4313      	orrs	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40010000 	.word	0x40010000
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40000c00 	.word	0x40000c00
 8004768:	40010400 	.word	0x40010400
 800476c:	40014000 	.word	0x40014000
 8004770:	40001800 	.word	0x40001800

08004774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e03f      	b.n	800482e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fc0a 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2224      	movs	r2, #36	; 0x24
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f929 	bl	8004a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af02      	add	r7, sp, #8
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d17c      	bne.n	8004950 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_UART_Transmit+0x2c>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e075      	b.n	8004952 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_UART_Transmit+0x3e>
 8004870:	2302      	movs	r3, #2
 8004872:	e06e      	b.n	8004952 <HAL_UART_Transmit+0x11c>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2221      	movs	r2, #33	; 0x21
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800488a:	f7fc fd05 	bl	8001298 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d108      	bne.n	80048b8 <HAL_UART_Transmit+0x82>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	e003      	b.n	80048c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048c8:	e02a      	b.n	8004920 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2180      	movs	r1, #128	; 0x80
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f840 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e036      	b.n	8004952 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	3302      	adds	r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e007      	b.n	8004912 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1cf      	bne.n	80048ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f810 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b090      	sub	sp, #64	; 0x40
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	e050      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d04c      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	f7fc fc8d 	bl	8001298 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004986:	429a      	cmp	r2, r3
 8004988:	d241      	bcs.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049aa:	637a      	str	r2, [r7, #52]	; 0x34
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d09f      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3740      	adds	r7, #64	; 0x40
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b0c0      	sub	sp, #256	; 0x100
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	68d9      	ldr	r1, [r3, #12]
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	ea40 0301 	orr.w	r3, r0, r1
 8004a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a90:	f021 010c 	bic.w	r1, r1, #12
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	6999      	ldr	r1, [r3, #24]
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	ea40 0301 	orr.w	r3, r0, r1
 8004abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b8f      	ldr	r3, [pc, #572]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d005      	beq.n	8004ad8 <UART_SetConfig+0xa0>
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d104      	bne.n	8004ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f7fd fcb0 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8004adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae0:	e003      	b.n	8004aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae2:	f7fd fc97 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8004ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	f040 810c 	bne.w	8004d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	1891      	adds	r1, r2, r2
 8004b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b12:	415b      	adcs	r3, r3
 8004b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	eb12 0801 	adds.w	r8, r2, r1
 8004b20:	4629      	mov	r1, r5
 8004b22:	eb43 0901 	adc.w	r9, r3, r1
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3a:	4690      	mov	r8, r2
 8004b3c:	4699      	mov	r9, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	eb18 0303 	adds.w	r3, r8, r3
 8004b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b48:	462b      	mov	r3, r5
 8004b4a:	eb49 0303 	adc.w	r3, r9, r3
 8004b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b66:	460b      	mov	r3, r1
 8004b68:	18db      	adds	r3, r3, r3
 8004b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	eb42 0303 	adc.w	r3, r2, r3
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
 8004b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b7c:	f7fb fba0 	bl	80002c0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	011c      	lsls	r4, r3, #4
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd0:	4692      	mov	sl, r2
 8004bd2:	469b      	mov	fp, r3
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8004bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bde:	464b      	mov	r3, r9
 8004be0:	eb4b 0303 	adc.w	r3, fp, r3
 8004be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	18db      	adds	r3, r3, r3
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
 8004c02:	4613      	mov	r3, r2
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c12:	f7fb fb55 	bl	80002c0 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	1acb      	subs	r3, r1, r3
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004c34:	fba3 2302 	umull	r2, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c40:	441c      	add	r4, r3
 8004c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6339      	str	r1, [r7, #48]	; 0x30
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c98:	464b      	mov	r3, r9
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cb8:	460b      	mov	r3, r1
 8004cba:	18db      	adds	r3, r3, r3
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	eb42 0303 	adc.w	r3, r2, r3
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cce:	f7fb faf7 	bl	80002c0 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	2164      	movs	r1, #100	; 0x64
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	3332      	adds	r3, #50	; 0x32
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 0207 	and.w	r2, r3, #7
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4422      	add	r2, r4
 8004cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d00:	e106      	b.n	8004f10 <UART_SetConfig+0x4d8>
 8004d02:	bf00      	nop
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40011400 	.word	0x40011400
 8004d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d22:	4642      	mov	r2, r8
 8004d24:	464b      	mov	r3, r9
 8004d26:	1891      	adds	r1, r2, r2
 8004d28:	6239      	str	r1, [r7, #32]
 8004d2a:	415b      	adcs	r3, r3
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d32:	4641      	mov	r1, r8
 8004d34:	1854      	adds	r4, r2, r1
 8004d36:	4649      	mov	r1, r9
 8004d38:	eb43 0501 	adc.w	r5, r3, r1
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	00eb      	lsls	r3, r5, #3
 8004d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4a:	00e2      	lsls	r2, r4, #3
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	461d      	mov	r5, r3
 8004d50:	4643      	mov	r3, r8
 8004d52:	18e3      	adds	r3, r4, r3
 8004d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d58:	464b      	mov	r3, r9
 8004d5a:	eb45 0303 	adc.w	r3, r5, r3
 8004d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d7e:	4629      	mov	r1, r5
 8004d80:	008b      	lsls	r3, r1, #2
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d88:	4621      	mov	r1, r4
 8004d8a:	008a      	lsls	r2, r1, #2
 8004d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d90:	f7fb fa96 	bl	80002c0 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	011c      	lsls	r4, r3, #4
 8004da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	1891      	adds	r1, r2, r2
 8004dba:	61b9      	str	r1, [r7, #24]
 8004dbc:	415b      	adcs	r3, r3
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	1851      	adds	r1, r2, r1
 8004dc8:	6139      	str	r1, [r7, #16]
 8004dca:	4649      	mov	r1, r9
 8004dcc:	414b      	adcs	r3, r1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4651      	mov	r1, sl
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4642      	mov	r2, r8
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df8:	464b      	mov	r3, r9
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	008b      	lsls	r3, r1, #2
 8004e20:	4641      	mov	r1, r8
 8004e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e26:	4641      	mov	r1, r8
 8004e28:	008a      	lsls	r2, r1, #2
 8004e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e2e:	f7fb fa47 	bl	80002c0 <__aeabi_uldivmod>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	4b38      	ldr	r3, [pc, #224]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2264      	movs	r2, #100	; 0x64
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	1acb      	subs	r3, r1, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e58:	441c      	add	r4, r3
 8004e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5e:	2200      	movs	r2, #0
 8004e60:	673b      	str	r3, [r7, #112]	; 0x70
 8004e62:	677a      	str	r2, [r7, #116]	; 0x74
 8004e64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e68:	4642      	mov	r2, r8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	1891      	adds	r1, r2, r2
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	415b      	adcs	r3, r3
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e78:	4641      	mov	r1, r8
 8004e7a:	1851      	adds	r1, r2, r1
 8004e7c:	6039      	str	r1, [r7, #0]
 8004e7e:	4649      	mov	r1, r9
 8004e80:	414b      	adcs	r3, r1
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e90:	4659      	mov	r1, fp
 8004e92:	00cb      	lsls	r3, r1, #3
 8004e94:	4651      	mov	r1, sl
 8004e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	00ca      	lsls	r2, r1, #3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	189b      	adds	r3, r3, r2
 8004ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eaa:	464b      	mov	r3, r9
 8004eac:	460a      	mov	r2, r1
 8004eae:	eb42 0303 	adc.w	r3, r2, r3
 8004eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ebe:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ecc:	4649      	mov	r1, r9
 8004ece:	008b      	lsls	r3, r1, #2
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	008a      	lsls	r2, r1, #2
 8004eda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ede:	f7fb f9ef 	bl	80002c0 <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x4e4>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4422      	add	r2, r4
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <MX_FATFS_Init+0x18>)
 8004f26:	4805      	ldr	r0, [pc, #20]	; (8004f3c <MX_FATFS_Init+0x1c>)
 8004f28:	f001 f88a 	bl	8006040 <FATFS_LinkDriver>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <MX_FATFS_Init+0x20>)
 8004f32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f34:	bf00      	nop
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	2000054c 	.word	0x2000054c
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	20000548 	.word	0x20000548

08004f44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f9d9 	bl	8005318 <USER_SPI_initialize>
 8004f66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fab7 	bl	80054f0 <USER_SPI_status>
 8004f82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004f9c:	7bf8      	ldrb	r0, [r7, #15]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	f000 faba 	bl	800551c <USER_SPI_read>
 8004fa8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8004fc2:	7bf8      	ldrb	r0, [r7, #15]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	f000 fb0d 	bl	80055e8 <USER_SPI_write>
 8004fce:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	603a      	str	r2, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8004fe8:	79b9      	ldrb	r1, [r7, #6]
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fb76 	bl	80056e0 <USER_SPI_ioctl>
 8004ff4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005008:	f7fc f946 	bl	8001298 <HAL_GetTick>
 800500c:	4603      	mov	r3, r0
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <SPI_Timer_On+0x20>)
 8005010:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <SPI_Timer_On+0x24>)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000554 	.word	0x20000554
 8005024:	20000558 	.word	0x20000558

08005028 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800502c:	f7fc f934 	bl	8001298 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <SPI_Timer_Status+0x24>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <SPI_Timer_Status+0x28>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf34      	ite	cc
 8005040:	2301      	movcc	r3, #1
 8005042:	2300      	movcs	r3, #0
 8005044:	b2db      	uxtb	r3, r3
}
 8005046:	4618      	mov	r0, r3
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000554 	.word	0x20000554
 8005050:	20000558 	.word	0x20000558

08005054 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800505e:	f107 020f 	add.w	r2, r7, #15
 8005062:	1df9      	adds	r1, r7, #7
 8005064:	2332      	movs	r3, #50	; 0x32
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2301      	movs	r3, #1
 800506a:	4804      	ldr	r0, [pc, #16]	; (800507c <xchg_spi+0x28>)
 800506c:	f7fe fcb0 	bl	80039d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200000f8 	.word	0x200000f8

08005080 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e00a      	b.n	80050a6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	18d4      	adds	r4, r2, r3
 8005096:	20ff      	movs	r0, #255	; 0xff
 8005098:	f7ff ffdc 	bl	8005054 <xchg_spi>
 800509c:	4603      	mov	r3, r0
 800509e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3f0      	bcc.n	8005090 <rcvr_spi_multi+0x10>
	}
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e009      	b.n	80050dc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ffbf 	bl	8005054 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3f1      	bcc.n	80050c8 <xmit_spi_multi+0x10>
	}
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80050f6:	f7fc f8cf 	bl	8001298 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005100:	20ff      	movs	r0, #255	; 0xff
 8005102:	f7ff ffa7 	bl	8005054 <xchg_spi>
 8005106:	4603      	mov	r3, r0
 8005108:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	d007      	beq.n	8005120 <wait_ready+0x32>
 8005110:	f7fc f8c2 	bl	8001298 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	429a      	cmp	r2, r3
 800511e:	d8ef      	bhi.n	8005100 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2bff      	cmp	r3, #255	; 0xff
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005138:	2201      	movs	r2, #1
 800513a:	2102      	movs	r1, #2
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <despiselect+0x18>)
 800513e:	f7fd f80d 	bl	800215c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005142:	20ff      	movs	r0, #255	; 0xff
 8005144:	f7ff ff86 	bl	8005054 <xchg_spi>

}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40020400 	.word	0x40020400

08005150 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005154:	2200      	movs	r2, #0
 8005156:	2102      	movs	r1, #2
 8005158:	4809      	ldr	r0, [pc, #36]	; (8005180 <spiselect+0x30>)
 800515a:	f7fc ffff 	bl	800215c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800515e:	20ff      	movs	r0, #255	; 0xff
 8005160:	f7ff ff78 	bl	8005054 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005168:	f7ff ffc1 	bl	80050ee <wait_ready>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <spiselect+0x26>
 8005172:	2301      	movs	r3, #1
 8005174:	e002      	b.n	800517c <spiselect+0x2c>

	despiselect();
 8005176:	f7ff ffdd 	bl	8005134 <despiselect>
	return 0;	/* Timeout */
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40020400 	.word	0x40020400

08005184 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800518e:	20c8      	movs	r0, #200	; 0xc8
 8005190:	f7ff ff36 	bl	8005000 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005194:	20ff      	movs	r0, #255	; 0xff
 8005196:	f7ff ff5d 	bl	8005054 <xchg_spi>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2bff      	cmp	r3, #255	; 0xff
 80051a2:	d104      	bne.n	80051ae <rcvr_datablock+0x2a>
 80051a4:	f7ff ff40 	bl	8005028 <SPI_Timer_Status>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f2      	bne.n	8005194 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2bfe      	cmp	r3, #254	; 0xfe
 80051b2:	d001      	beq.n	80051b8 <rcvr_datablock+0x34>
 80051b4:	2300      	movs	r3, #0
 80051b6:	e00a      	b.n	80051ce <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ff60 	bl	8005080 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80051c0:	20ff      	movs	r0, #255	; 0xff
 80051c2:	f7ff ff47 	bl	8005054 <xchg_spi>
 80051c6:	20ff      	movs	r0, #255	; 0xff
 80051c8:	f7ff ff44 	bl	8005054 <xchg_spi>

	return 1;						/* Function succeeded */
 80051cc:	2301      	movs	r3, #1
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80051e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051e6:	f7ff ff82 	bl	80050ee <wait_ready>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <xmit_datablock+0x1e>
 80051f0:	2300      	movs	r3, #0
 80051f2:	e01e      	b.n	8005232 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff2c 	bl	8005054 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	2bfd      	cmp	r3, #253	; 0xfd
 8005200:	d016      	beq.n	8005230 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ff56 	bl	80050b8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800520c:	20ff      	movs	r0, #255	; 0xff
 800520e:	f7ff ff21 	bl	8005054 <xchg_spi>
 8005212:	20ff      	movs	r0, #255	; 0xff
 8005214:	f7ff ff1e 	bl	8005054 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005218:	20ff      	movs	r0, #255	; 0xff
 800521a:	f7ff ff1b 	bl	8005054 <xchg_spi>
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b05      	cmp	r3, #5
 800522a:	d001      	beq.n	8005230 <xmit_datablock+0x5a>
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <xmit_datablock+0x5c>
	}
	return 1;
 8005230:	2301      	movs	r3, #1
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	6039      	str	r1, [r7, #0]
 8005244:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da0e      	bge.n	800526c <send_cmd+0x32>
		cmd &= 0x7F;
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005256:	2100      	movs	r1, #0
 8005258:	2037      	movs	r0, #55	; 0x37
 800525a:	f7ff ffee 	bl	800523a <send_cmd>
 800525e:	4603      	mov	r3, r0
 8005260:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d901      	bls.n	800526c <send_cmd+0x32>
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	e051      	b.n	8005310 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d008      	beq.n	8005284 <send_cmd+0x4a>
		despiselect();
 8005272:	f7ff ff5f 	bl	8005134 <despiselect>
		if (!spiselect()) return 0xFF;
 8005276:	f7ff ff6b 	bl	8005150 <spiselect>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <send_cmd+0x4a>
 8005280:	23ff      	movs	r3, #255	; 0xff
 8005282:	e045      	b.n	8005310 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	b2db      	uxtb	r3, r3
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fee1 	bl	8005054 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fedb 	bl	8005054 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fed5 	bl	8005054 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fecf 	bl	8005054 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff feca 	bl	8005054 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <send_cmd+0x94>
 80052ca:	2395      	movs	r3, #149	; 0x95
 80052cc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d101      	bne.n	80052d8 <send_cmd+0x9e>
 80052d4:	2387      	movs	r3, #135	; 0x87
 80052d6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff feba 	bl	8005054 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d102      	bne.n	80052ec <send_cmd+0xb2>
 80052e6:	20ff      	movs	r0, #255	; 0xff
 80052e8:	f7ff feb4 	bl	8005054 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80052ec:	230a      	movs	r3, #10
 80052ee:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80052f0:	20ff      	movs	r0, #255	; 0xff
 80052f2:	f7ff feaf 	bl	8005054 <xchg_spi>
 80052f6:	4603      	mov	r3, r0
 80052f8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80052fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da05      	bge.n	800530e <send_cmd+0xd4>
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	3b01      	subs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800530e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <USER_SPI_initialize+0x14>
 8005328:	2301      	movs	r3, #1
 800532a:	e0d6      	b.n	80054da <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800532c:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <USER_SPI_initialize+0x2a>
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e0cb      	b.n	80054da <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005342:	4b69      	ldr	r3, [pc, #420]	; (80054e8 <USER_SPI_initialize+0x1d0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800534c:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <USER_SPI_initialize+0x1d0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005354:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005356:	230a      	movs	r3, #10
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e005      	b.n	8005368 <USER_SPI_initialize+0x50>
 800535c:	20ff      	movs	r0, #255	; 0xff
 800535e:	f7ff fe79 	bl	8005054 <xchg_spi>
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	3b01      	subs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f6      	bne.n	800535c <USER_SPI_initialize+0x44>

	ty = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005372:	2100      	movs	r1, #0
 8005374:	2000      	movs	r0, #0
 8005376:	f7ff ff60 	bl	800523a <send_cmd>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 808b 	bne.w	8005498 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005386:	f7ff fe3b 	bl	8005000 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800538a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800538e:	2008      	movs	r0, #8
 8005390:	f7ff ff53 	bl	800523a <send_cmd>
 8005394:	4603      	mov	r3, r0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d151      	bne.n	800543e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
 800539e:	e00d      	b.n	80053bc <USER_SPI_initialize+0xa4>
 80053a0:	7bfc      	ldrb	r4, [r7, #15]
 80053a2:	20ff      	movs	r0, #255	; 0xff
 80053a4:	f7ff fe56 	bl	8005054 <xchg_spi>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	f104 0310 	add.w	r3, r4, #16
 80053b0:	443b      	add	r3, r7
 80053b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	3301      	adds	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d9ee      	bls.n	80053a0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80053c2:	7abb      	ldrb	r3, [r7, #10]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d167      	bne.n	8005498 <USER_SPI_initialize+0x180>
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	2baa      	cmp	r3, #170	; 0xaa
 80053cc:	d164      	bne.n	8005498 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80053ce:	bf00      	nop
 80053d0:	f7ff fe2a 	bl	8005028 <SPI_Timer_Status>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <USER_SPI_initialize+0xd2>
 80053da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80053de:	20a9      	movs	r0, #169	; 0xa9
 80053e0:	f7ff ff2b 	bl	800523a <send_cmd>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80053ea:	f7ff fe1d 	bl	8005028 <SPI_Timer_Status>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d051      	beq.n	8005498 <USER_SPI_initialize+0x180>
 80053f4:	2100      	movs	r1, #0
 80053f6:	203a      	movs	r0, #58	; 0x3a
 80053f8:	f7ff ff1f 	bl	800523a <send_cmd>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d14a      	bne.n	8005498 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]
 8005406:	e00d      	b.n	8005424 <USER_SPI_initialize+0x10c>
 8005408:	7bfc      	ldrb	r4, [r7, #15]
 800540a:	20ff      	movs	r0, #255	; 0xff
 800540c:	f7ff fe22 	bl	8005054 <xchg_spi>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	f104 0310 	add.w	r3, r4, #16
 8005418:	443b      	add	r3, r7
 800541a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	3301      	adds	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d9ee      	bls.n	8005408 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800542a:	7a3b      	ldrb	r3, [r7, #8]
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <USER_SPI_initialize+0x120>
 8005434:	230c      	movs	r3, #12
 8005436:	e000      	b.n	800543a <USER_SPI_initialize+0x122>
 8005438:	2304      	movs	r3, #4
 800543a:	737b      	strb	r3, [r7, #13]
 800543c:	e02c      	b.n	8005498 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800543e:	2100      	movs	r1, #0
 8005440:	20a9      	movs	r0, #169	; 0xa9
 8005442:	f7ff fefa 	bl	800523a <send_cmd>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d804      	bhi.n	8005456 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800544c:	2302      	movs	r3, #2
 800544e:	737b      	strb	r3, [r7, #13]
 8005450:	23a9      	movs	r3, #169	; 0xa9
 8005452:	73bb      	strb	r3, [r7, #14]
 8005454:	e003      	b.n	800545e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005456:	2301      	movs	r3, #1
 8005458:	737b      	strb	r3, [r7, #13]
 800545a:	2301      	movs	r3, #1
 800545c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800545e:	bf00      	nop
 8005460:	f7ff fde2 	bl	8005028 <SPI_Timer_Status>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <USER_SPI_initialize+0x162>
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fee3 	bl	800523a <send_cmd>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f2      	bne.n	8005460 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800547a:	f7ff fdd5 	bl	8005028 <SPI_Timer_Status>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <USER_SPI_initialize+0x17c>
 8005484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005488:	2010      	movs	r0, #16
 800548a:	f7ff fed6 	bl	800523a <send_cmd>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <USER_SPI_initialize+0x180>
				ty = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005498:	4a14      	ldr	r2, [pc, #80]	; (80054ec <USER_SPI_initialize+0x1d4>)
 800549a:	7b7b      	ldrb	r3, [r7, #13]
 800549c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800549e:	f7ff fe49 	bl	8005134 <despiselect>

	if (ty) {			/* OK */
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d012      	beq.n	80054ce <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <USER_SPI_initialize+0x1d0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <USER_SPI_initialize+0x1d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0210 	orr.w	r2, r2, #16
 80054ba:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e002      	b.n	80054d4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <USER_SPI_initialize+0x1cc>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	b2db      	uxtb	r3, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000020 	.word	0x20000020
 80054e8:	200000f8 	.word	0x200000f8
 80054ec:	20000550 	.word	0x20000550

080054f0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USER_SPI_status+0x14>
 8005500:	2301      	movs	r3, #1
 8005502:	e002      	b.n	800550a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <USER_SPI_status+0x28>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000020 	.word	0x20000020

0800551c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <USER_SPI_read+0x1c>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <USER_SPI_read+0x20>
 8005538:	2304      	movs	r3, #4
 800553a:	e04d      	b.n	80055d8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800553c:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <USER_SPI_read+0xc4>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <USER_SPI_read+0x32>
 800554a:	2303      	movs	r3, #3
 800554c:	e044      	b.n	80055d8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <USER_SPI_read+0xc8>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <USER_SPI_read+0x44>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	025b      	lsls	r3, r3, #9
 800555e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d111      	bne.n	800558a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	2011      	movs	r0, #17
 800556a:	f7ff fe66 	bl	800523a <send_cmd>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d129      	bne.n	80055c8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005578:	68b8      	ldr	r0, [r7, #8]
 800557a:	f7ff fe03 	bl	8005184 <rcvr_datablock>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d021      	beq.n	80055c8 <USER_SPI_read+0xac>
			count = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	e01e      	b.n	80055c8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	2012      	movs	r0, #18
 800558e:	f7ff fe54 	bl	800523a <send_cmd>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d117      	bne.n	80055c8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f7ff fdf1 	bl	8005184 <rcvr_datablock>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <USER_SPI_read+0xa2>
				buff += 512;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ed      	bne.n	8005598 <USER_SPI_read+0x7c>
 80055bc:	e000      	b.n	80055c0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80055be:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80055c0:	2100      	movs	r1, #0
 80055c2:	200c      	movs	r0, #12
 80055c4:	f7ff fe39 	bl	800523a <send_cmd>
		}
	}
	despiselect();
 80055c8:	f7ff fdb4 	bl	8005134 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf14      	ite	ne
 80055d2:	2301      	movne	r3, #1
 80055d4:	2300      	moveq	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000020 	.word	0x20000020
 80055e4:	20000550 	.word	0x20000550

080055e8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <USER_SPI_write+0x1c>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <USER_SPI_write+0x20>
 8005604:	2304      	movs	r3, #4
 8005606:	e063      	b.n	80056d0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005608:	4b33      	ldr	r3, [pc, #204]	; (80056d8 <USER_SPI_write+0xf0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <USER_SPI_write+0x32>
 8005616:	2303      	movs	r3, #3
 8005618:	e05a      	b.n	80056d0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800561a:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <USER_SPI_write+0xf0>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <USER_SPI_write+0x44>
 8005628:	2302      	movs	r3, #2
 800562a:	e051      	b.n	80056d0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <USER_SPI_write+0xf4>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <USER_SPI_write+0x56>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	025b      	lsls	r3, r3, #9
 800563c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d110      	bne.n	8005666 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	2018      	movs	r0, #24
 8005648:	f7ff fdf7 	bl	800523a <send_cmd>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d136      	bne.n	80056c0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005652:	21fe      	movs	r1, #254	; 0xfe
 8005654:	68b8      	ldr	r0, [r7, #8]
 8005656:	f7ff fdbe 	bl	80051d6 <xmit_datablock>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02f      	beq.n	80056c0 <USER_SPI_write+0xd8>
			count = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	e02c      	b.n	80056c0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <USER_SPI_write+0xf4>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	f003 0306 	and.w	r3, r3, #6
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <USER_SPI_write+0x92>
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	2097      	movs	r0, #151	; 0x97
 8005676:	f7ff fde0 	bl	800523a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	2019      	movs	r0, #25
 800567e:	f7ff fddc 	bl	800523a <send_cmd>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11b      	bne.n	80056c0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005688:	21fc      	movs	r1, #252	; 0xfc
 800568a:	68b8      	ldr	r0, [r7, #8]
 800568c:	f7ff fda3 	bl	80051d6 <xmit_datablock>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <USER_SPI_write+0xc4>
				buff += 512;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800569c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ee      	bne.n	8005688 <USER_SPI_write+0xa0>
 80056aa:	e000      	b.n	80056ae <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80056ac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80056ae:	21fd      	movs	r1, #253	; 0xfd
 80056b0:	2000      	movs	r0, #0
 80056b2:	f7ff fd90 	bl	80051d6 <xmit_datablock>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <USER_SPI_write+0xd8>
 80056bc:	2301      	movs	r3, #1
 80056be:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80056c0:	f7ff fd38 	bl	8005134 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bf14      	ite	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	2300      	moveq	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000020 	.word	0x20000020
 80056dc:	20000550 	.word	0x20000550

080056e0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	; 0x30
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	603a      	str	r2, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
 80056ec:	460b      	mov	r3, r1
 80056ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <USER_SPI_ioctl+0x1a>
 80056f6:	2304      	movs	r3, #4
 80056f8:	e15a      	b.n	80059b0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80056fa:	4baf      	ldr	r3, [pc, #700]	; (80059b8 <USER_SPI_ioctl+0x2d8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USER_SPI_ioctl+0x2c>
 8005708:	2303      	movs	r3, #3
 800570a:	e151      	b.n	80059b0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005712:	79bb      	ldrb	r3, [r7, #6]
 8005714:	2b04      	cmp	r3, #4
 8005716:	f200 8136 	bhi.w	8005986 <USER_SPI_ioctl+0x2a6>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <USER_SPI_ioctl+0x40>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005735 	.word	0x08005735
 8005724:	08005749 	.word	0x08005749
 8005728:	08005987 	.word	0x08005987
 800572c:	080057f5 	.word	0x080057f5
 8005730:	080058eb 	.word	0x080058eb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005734:	f7ff fd0c 	bl	8005150 <spiselect>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8127 	beq.w	800598e <USER_SPI_ioctl+0x2ae>
 8005740:	2300      	movs	r3, #0
 8005742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005746:	e122      	b.n	800598e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005748:	2100      	movs	r1, #0
 800574a:	2009      	movs	r0, #9
 800574c:	f7ff fd75 	bl	800523a <send_cmd>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 811d 	bne.w	8005992 <USER_SPI_ioctl+0x2b2>
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	2110      	movs	r1, #16
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fd10 	bl	8005184 <rcvr_datablock>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8113 	beq.w	8005992 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800576c:	7b3b      	ldrb	r3, [r7, #12]
 800576e:	099b      	lsrs	r3, r3, #6
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d111      	bne.n	800579a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005776:	7d7b      	ldrb	r3, [r7, #21]
 8005778:	461a      	mov	r2, r3
 800577a:	7d3b      	ldrb	r3, [r7, #20]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	4413      	add	r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800578a:	4413      	add	r3, r2
 800578c:	3301      	adds	r3, #1
 800578e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	029a      	lsls	r2, r3, #10
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e028      	b.n	80057ec <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800579a:	7c7b      	ldrb	r3, [r7, #17]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	7dbb      	ldrb	r3, [r7, #22]
 80057a4:	09db      	lsrs	r3, r3, #7
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	7d7b      	ldrb	r3, [r7, #21]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3302      	adds	r3, #2
 80057be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80057c2:	7d3b      	ldrb	r3, [r7, #20]
 80057c4:	099b      	lsrs	r3, r3, #6
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	7cbb      	ldrb	r3, [r7, #18]
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057d8:	4413      	add	r3, r2
 80057da:	3301      	adds	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80057de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057e2:	3b09      	subs	r3, #9
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	409a      	lsls	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80057f2:	e0ce      	b.n	8005992 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80057f4:	4b71      	ldr	r3, [pc, #452]	; (80059bc <USER_SPI_ioctl+0x2dc>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d031      	beq.n	8005864 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005800:	2100      	movs	r1, #0
 8005802:	208d      	movs	r0, #141	; 0x8d
 8005804:	f7ff fd19 	bl	800523a <send_cmd>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80c3 	bne.w	8005996 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005810:	20ff      	movs	r0, #255	; 0xff
 8005812:	f7ff fc1f 	bl	8005054 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005816:	f107 030c 	add.w	r3, r7, #12
 800581a:	2110      	movs	r1, #16
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fcb1 	bl	8005184 <rcvr_datablock>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80b6 	beq.w	8005996 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800582a:	2330      	movs	r3, #48	; 0x30
 800582c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005830:	e007      	b.n	8005842 <USER_SPI_ioctl+0x162>
 8005832:	20ff      	movs	r0, #255	; 0xff
 8005834:	f7ff fc0e 	bl	8005054 <xchg_spi>
 8005838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800583c:	3b01      	subs	r3, #1
 800583e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005842:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f3      	bne.n	8005832 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800584a:	7dbb      	ldrb	r3, [r7, #22]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	2310      	movs	r3, #16
 8005854:	fa03 f202 	lsl.w	r2, r3, r2
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005862:	e098      	b.n	8005996 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005864:	2100      	movs	r1, #0
 8005866:	2009      	movs	r0, #9
 8005868:	f7ff fce7 	bl	800523a <send_cmd>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 8091 	bne.w	8005996 <USER_SPI_ioctl+0x2b6>
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	2110      	movs	r1, #16
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fc82 	bl	8005184 <rcvr_datablock>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8087 	beq.w	8005996 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005888:	4b4c      	ldr	r3, [pc, #304]	; (80059bc <USER_SPI_ioctl+0x2dc>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d012      	beq.n	80058ba <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005894:	7dbb      	ldrb	r3, [r7, #22]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800589c:	7dfa      	ldrb	r2, [r7, #23]
 800589e:	09d2      	lsrs	r2, r2, #7
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	4413      	add	r3, r2
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	7e7b      	ldrb	r3, [r7, #25]
 80058a8:	099b      	lsrs	r3, r3, #6
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e013      	b.n	80058e2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80058ba:	7dbb      	ldrb	r3, [r7, #22]
 80058bc:	109b      	asrs	r3, r3, #2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	3301      	adds	r3, #1
 80058c6:	7dfa      	ldrb	r2, [r7, #23]
 80058c8:	00d2      	lsls	r2, r2, #3
 80058ca:	f002 0218 	and.w	r2, r2, #24
 80058ce:	7df9      	ldrb	r1, [r7, #23]
 80058d0:	0949      	lsrs	r1, r1, #5
 80058d2:	b2c9      	uxtb	r1, r1
 80058d4:	440a      	add	r2, r1
 80058d6:	3201      	adds	r2, #1
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80058e8:	e055      	b.n	8005996 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80058ea:	4b34      	ldr	r3, [pc, #208]	; (80059bc <USER_SPI_ioctl+0x2dc>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 0306 	and.w	r3, r3, #6
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d051      	beq.n	800599a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80058f6:	f107 020c 	add.w	r2, r7, #12
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	210b      	movs	r1, #11
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff feee 	bl	80056e0 <USER_SPI_ioctl>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d149      	bne.n	800599e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800590a:	7b3b      	ldrb	r3, [r7, #12]
 800590c:	099b      	lsrs	r3, r3, #6
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <USER_SPI_ioctl+0x23e>
 8005914:	7dbb      	ldrb	r3, [r7, #22]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d041      	beq.n	80059a2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800592e:	4b23      	ldr	r3, [pc, #140]	; (80059bc <USER_SPI_ioctl+0x2dc>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	025b      	lsls	r3, r3, #9
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	025b      	lsls	r3, r3, #9
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005948:	2020      	movs	r0, #32
 800594a:	f7ff fc76 	bl	800523a <send_cmd>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d128      	bne.n	80059a6 <USER_SPI_ioctl+0x2c6>
 8005954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005956:	2021      	movs	r0, #33	; 0x21
 8005958:	f7ff fc6f 	bl	800523a <send_cmd>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d121      	bne.n	80059a6 <USER_SPI_ioctl+0x2c6>
 8005962:	2100      	movs	r1, #0
 8005964:	2026      	movs	r0, #38	; 0x26
 8005966:	f7ff fc68 	bl	800523a <send_cmd>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11a      	bne.n	80059a6 <USER_SPI_ioctl+0x2c6>
 8005970:	f247 5030 	movw	r0, #30000	; 0x7530
 8005974:	f7ff fbbb 	bl	80050ee <wait_ready>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d013      	beq.n	80059a6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800597e:	2300      	movs	r3, #0
 8005980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005984:	e00f      	b.n	80059a6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005986:	2304      	movs	r3, #4
 8005988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800598c:	e00c      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		break;
 800598e:	bf00      	nop
 8005990:	e00a      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		break;
 8005992:	bf00      	nop
 8005994:	e008      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		break;
 8005996:	bf00      	nop
 8005998:	e006      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <USER_SPI_ioctl+0x2c8>
		break;
 80059a6:	bf00      	nop
	}

	despiselect();
 80059a8:	f7ff fbc4 	bl	8005134 <despiselect>

	return res;
 80059ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	; 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000020 	.word	0x20000020
 80059bc:	20000550 	.word	0x20000550

080059c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <disk_status+0x30>)
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	79fa      	ldrb	r2, [r7, #7]
 80059d8:	4905      	ldr	r1, [pc, #20]	; (80059f0 <disk_status+0x30>)
 80059da:	440a      	add	r2, r1
 80059dc:	7a12      	ldrb	r2, [r2, #8]
 80059de:	4610      	mov	r0, r2
 80059e0:	4798      	blx	r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000057c 	.word	0x2000057c

080059f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <disk_read+0x3c>)
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	689c      	ldr	r4, [r3, #8]
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	4a07      	ldr	r2, [pc, #28]	; (8005a30 <disk_read+0x3c>)
 8005a14:	4413      	add	r3, r2
 8005a16:	7a18      	ldrb	r0, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	47a0      	blx	r4
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd90      	pop	{r4, r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2000057c 	.word	0x2000057c

08005a34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <disk_write+0x3c>)
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68dc      	ldr	r4, [r3, #12]
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	4a07      	ldr	r2, [pc, #28]	; (8005a70 <disk_write+0x3c>)
 8005a54:	4413      	add	r3, r2
 8005a56:	7a18      	ldrb	r0, [r3, #8]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	47a0      	blx	r4
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000057c 	.word	0x2000057c

08005a74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	603a      	str	r2, [r7, #0]
 8005a7e:	71fb      	strb	r3, [r7, #7]
 8005a80:	460b      	mov	r3, r1
 8005a82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <disk_ioctl+0x38>)
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	4906      	ldr	r1, [pc, #24]	; (8005aac <disk_ioctl+0x38>)
 8005a94:	440a      	add	r2, r1
 8005a96:	7a10      	ldrb	r0, [r2, #8]
 8005a98:	79b9      	ldrb	r1, [r7, #6]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4798      	blx	r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000057c 	.word	0x2000057c

08005ab0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	887a      	ldrh	r2, [r7, #2]
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b3e:	b480      	push	{r7}
 8005b40:	b087      	sub	sp, #28
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f3      	bne.n	8005b4e <mem_set+0x10>
}
 8005b66:	bf00      	nop
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d825      	bhi.n	8005bd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005b88:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <dec_lock+0x74>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	4413      	add	r3, r2
 8005b90:	330c      	adds	r3, #12
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	d101      	bne.n	8005ba2 <dec_lock+0x2e>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <dec_lock+0x3a>
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <dec_lock+0x74>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	89fa      	ldrh	r2, [r7, #14]
 8005bba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bbc:	89fb      	ldrh	r3, [r7, #14]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <dec_lock+0x5a>
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <dec_lock+0x74>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	737b      	strb	r3, [r7, #13]
 8005bd2:	e001      	b.n	8005bd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005bd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	2000055c 	.word	0x2000055c

08005bec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d034      	beq.n	8005c6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7858      	ldrb	r0, [r3, #1]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c10:	2301      	movs	r3, #1
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f7ff ff0e 	bl	8005a34 <disk_write>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
 8005c22:	e022      	b.n	8005c6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	1ad2      	subs	r2, r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d217      	bcs.n	8005c6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	789b      	ldrb	r3, [r3, #2]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e010      	b.n	8005c64 <sync_window+0x78>
					wsect += fs->fsize;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7858      	ldrb	r0, [r3, #1]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c56:	2301      	movs	r3, #1
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	f7ff feeb 	bl	8005a34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d8eb      	bhi.n	8005c42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d01b      	beq.n	8005cc4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ffad 	bl	8005bec <sync_window>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7858      	ldrb	r0, [r3, #1]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	f7ff fea3 	bl	80059f4 <disk_read>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff87 	bl	8005bec <sync_window>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d158      	bne.n	8005d9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d148      	bne.n	8005d82 <sync_fs+0xb2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d144      	bne.n	8005d82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3330      	adds	r3, #48	; 0x30
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff ff1b 	bl	8005b3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3330      	adds	r3, #48	; 0x30
 8005d0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fecb 	bl	8005ab0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3330      	adds	r3, #48	; 0x30
 8005d1e:	4921      	ldr	r1, [pc, #132]	; (8005da4 <sync_fs+0xd4>)
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fee0 	bl	8005ae6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3330      	adds	r3, #48	; 0x30
 8005d2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d2e:	491e      	ldr	r1, [pc, #120]	; (8005da8 <sync_fs+0xd8>)
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fed8 	bl	8005ae6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3330      	adds	r3, #48	; 0x30
 8005d3a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7ff fece 	bl	8005ae6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3330      	adds	r3, #48	; 0x30
 8005d4e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7ff fec4 	bl	8005ae6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7858      	ldrb	r0, [r3, #1]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	2301      	movs	r3, #1
 8005d78:	f7ff fe5c 	bl	8005a34 <disk_write>
			fs->fsi_flag = 0;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fe72 	bl	8005a74 <disk_ioctl>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <sync_fs+0xca>
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	41615252 	.word	0x41615252
 8005da8:	61417272 	.word	0x61417272

08005dac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	331a      	adds	r3, #26
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fe74 	bl	8005ab0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d109      	bne.n	8005de4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f103 0214 	add.w	r2, r3, #20
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7ff fe66 	bl	8005ab0 <st_word>
	}
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005df6:	2309      	movs	r3, #9
 8005df8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01c      	beq.n	8005e3a <validate+0x4e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d018      	beq.n	8005e3a <validate+0x4e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <validate+0x4e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	889a      	ldrh	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	88db      	ldrh	r3, [r3, #6]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d10c      	bne.n	8005e3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fdca 	bl	80059c0 <disk_status>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <validate+0x4e>
			res = FR_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <validate+0x5a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	e000      	b.n	8005e48 <validate+0x5c>
 8005e46:	2300      	movs	r3, #0
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	6013      	str	r3, [r2, #0]
	return res;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f107 0208 	add.w	r2, r7, #8
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ffc0 	bl	8005dec <validate>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d168      	bne.n	8005f48 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7d1b      	ldrb	r3, [r3, #20]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d062      	beq.n	8005f48 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7d1b      	ldrb	r3, [r3, #20]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da15      	bge.n	8005eb8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	7858      	ldrb	r0, [r3, #1]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f7ff fdca 	bl	8005a34 <disk_write>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <f_sync+0x54>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e04f      	b.n	8005f4a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7d1b      	ldrb	r3, [r3, #20]
 8005eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005eb8:	f7ff f844 	bl	8004f44 <get_fattime>
 8005ebc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7ff fed4 	bl	8005c74 <move_window>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d138      	bne.n	8005f48 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	330b      	adds	r3, #11
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	330b      	adds	r3, #11
 8005ee6:	f042 0220 	orr.w	r2, r2, #32
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	f7ff ff57 	bl	8005dac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f103 021c 	add.w	r2, r3, #28
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7ff fdeb 	bl	8005ae6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3316      	adds	r3, #22
 8005f14:	6939      	ldr	r1, [r7, #16]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fde5 	bl	8005ae6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3312      	adds	r3, #18
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fdc4 	bl	8005ab0 <st_word>
					fs->wflag = 1;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fecd 	bl	8005cd0 <sync_fs>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7d1b      	ldrb	r3, [r3, #20]
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff ff7b 	bl	8005e56 <f_sync>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f107 0208 	add.w	r2, r7, #8
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ff3a 	bl	8005dec <validate>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10c      	bne.n	8005f9c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fdf4 	bl	8005b74 <dec_lock>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fc0:	7a5b      	ldrb	r3, [r3, #9]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d131      	bne.n	800602c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fca:	7a5b      	ldrb	r3, [r3, #9]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fd8:	7a5b      	ldrb	r3, [r3, #9]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005fe8:	7a5b      	ldrb	r3, [r3, #9]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	79fa      	ldrb	r2, [r7, #7]
 8005ff4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8005ff8:	7a5b      	ldrb	r3, [r3, #9]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	b2d1      	uxtb	r1, r2
 8006000:	4a0e      	ldr	r2, [pc, #56]	; (800603c <FATFS_LinkDriverEx+0x94>)
 8006002:	7251      	strb	r1, [r2, #9]
 8006004:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006006:	7dbb      	ldrb	r3, [r7, #22]
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3301      	adds	r3, #1
 8006014:	223a      	movs	r2, #58	; 0x3a
 8006016:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3302      	adds	r3, #2
 800601c:	222f      	movs	r2, #47	; 0x2f
 800601e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3303      	adds	r3, #3
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	2000057c 	.word	0x2000057c

08006040 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800604a:	2200      	movs	r2, #0
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ffaa 	bl	8005fa8 <FATFS_LinkDriverEx>
 8006054:	4603      	mov	r3, r0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <siprintf>:
 8006060:	b40e      	push	{r1, r2, r3}
 8006062:	b500      	push	{lr}
 8006064:	b09c      	sub	sp, #112	; 0x70
 8006066:	ab1d      	add	r3, sp, #116	; 0x74
 8006068:	9002      	str	r0, [sp, #8]
 800606a:	9006      	str	r0, [sp, #24]
 800606c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006070:	4809      	ldr	r0, [pc, #36]	; (8006098 <siprintf+0x38>)
 8006072:	9107      	str	r1, [sp, #28]
 8006074:	9104      	str	r1, [sp, #16]
 8006076:	4909      	ldr	r1, [pc, #36]	; (800609c <siprintf+0x3c>)
 8006078:	f853 2b04 	ldr.w	r2, [r3], #4
 800607c:	9105      	str	r1, [sp, #20]
 800607e:	6800      	ldr	r0, [r0, #0]
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	a902      	add	r1, sp, #8
 8006084:	f000 f9cc 	bl	8006420 <_svfiprintf_r>
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	b01c      	add	sp, #112	; 0x70
 8006090:	f85d eb04 	ldr.w	lr, [sp], #4
 8006094:	b003      	add	sp, #12
 8006096:	4770      	bx	lr
 8006098:	20000070 	.word	0x20000070
 800609c:	ffff0208 	.word	0xffff0208

080060a0 <_vsniprintf_r>:
 80060a0:	b530      	push	{r4, r5, lr}
 80060a2:	4614      	mov	r4, r2
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	b09b      	sub	sp, #108	; 0x6c
 80060a8:	4605      	mov	r5, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	da05      	bge.n	80060ba <_vsniprintf_r+0x1a>
 80060ae:	238b      	movs	r3, #139	; 0x8b
 80060b0:	6003      	str	r3, [r0, #0]
 80060b2:	f04f 30ff 	mov.w	r0, #4294967295
 80060b6:	b01b      	add	sp, #108	; 0x6c
 80060b8:	bd30      	pop	{r4, r5, pc}
 80060ba:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80060c2:	bf14      	ite	ne
 80060c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060c8:	4623      	moveq	r3, r4
 80060ca:	9302      	str	r3, [sp, #8]
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060d2:	9100      	str	r1, [sp, #0]
 80060d4:	9104      	str	r1, [sp, #16]
 80060d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80060da:	4669      	mov	r1, sp
 80060dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060de:	f000 f99f 	bl	8006420 <_svfiprintf_r>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	bfbc      	itt	lt
 80060e6:	238b      	movlt	r3, #139	; 0x8b
 80060e8:	602b      	strlt	r3, [r5, #0]
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d0e3      	beq.n	80060b6 <_vsniprintf_r+0x16>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e7df      	b.n	80060b6 <_vsniprintf_r+0x16>
	...

080060f8 <vsniprintf>:
 80060f8:	b507      	push	{r0, r1, r2, lr}
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	460a      	mov	r2, r1
 8006100:	4601      	mov	r1, r0
 8006102:	4803      	ldr	r0, [pc, #12]	; (8006110 <vsniprintf+0x18>)
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	f7ff ffcb 	bl	80060a0 <_vsniprintf_r>
 800610a:	b003      	add	sp, #12
 800610c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006110:	20000070 	.word	0x20000070

08006114 <memset>:
 8006114:	4402      	add	r2, r0
 8006116:	4603      	mov	r3, r0
 8006118:	4293      	cmp	r3, r2
 800611a:	d100      	bne.n	800611e <memset+0xa>
 800611c:	4770      	bx	lr
 800611e:	f803 1b01 	strb.w	r1, [r3], #1
 8006122:	e7f9      	b.n	8006118 <memset+0x4>

08006124 <__errno>:
 8006124:	4b01      	ldr	r3, [pc, #4]	; (800612c <__errno+0x8>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000070 	.word	0x20000070

08006130 <__libc_init_array>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4d0d      	ldr	r5, [pc, #52]	; (8006168 <__libc_init_array+0x38>)
 8006134:	4c0d      	ldr	r4, [pc, #52]	; (800616c <__libc_init_array+0x3c>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	2600      	movs	r6, #0
 800613c:	42a6      	cmp	r6, r4
 800613e:	d109      	bne.n	8006154 <__libc_init_array+0x24>
 8006140:	4d0b      	ldr	r5, [pc, #44]	; (8006170 <__libc_init_array+0x40>)
 8006142:	4c0c      	ldr	r4, [pc, #48]	; (8006174 <__libc_init_array+0x44>)
 8006144:	f000 fc6a 	bl	8006a1c <_init>
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	2600      	movs	r6, #0
 800614e:	42a6      	cmp	r6, r4
 8006150:	d105      	bne.n	800615e <__libc_init_array+0x2e>
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f855 3b04 	ldr.w	r3, [r5], #4
 8006158:	4798      	blx	r3
 800615a:	3601      	adds	r6, #1
 800615c:	e7ee      	b.n	800613c <__libc_init_array+0xc>
 800615e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006162:	4798      	blx	r3
 8006164:	3601      	adds	r6, #1
 8006166:	e7f2      	b.n	800614e <__libc_init_array+0x1e>
 8006168:	08006b10 	.word	0x08006b10
 800616c:	08006b10 	.word	0x08006b10
 8006170:	08006b10 	.word	0x08006b10
 8006174:	08006b14 	.word	0x08006b14

08006178 <__retarget_lock_acquire_recursive>:
 8006178:	4770      	bx	lr

0800617a <__retarget_lock_release_recursive>:
 800617a:	4770      	bx	lr

0800617c <_free_r>:
 800617c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800617e:	2900      	cmp	r1, #0
 8006180:	d044      	beq.n	800620c <_free_r+0x90>
 8006182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006186:	9001      	str	r0, [sp, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f1a1 0404 	sub.w	r4, r1, #4
 800618e:	bfb8      	it	lt
 8006190:	18e4      	addlt	r4, r4, r3
 8006192:	f000 f8df 	bl	8006354 <__malloc_lock>
 8006196:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <_free_r+0x94>)
 8006198:	9801      	ldr	r0, [sp, #4]
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	b933      	cbnz	r3, 80061ac <_free_r+0x30>
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6014      	str	r4, [r2, #0]
 80061a2:	b003      	add	sp, #12
 80061a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a8:	f000 b8da 	b.w	8006360 <__malloc_unlock>
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	d908      	bls.n	80061c2 <_free_r+0x46>
 80061b0:	6825      	ldr	r5, [r4, #0]
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf01      	itttt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	1949      	addeq	r1, r1, r5
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	e7ed      	b.n	800619e <_free_r+0x22>
 80061c2:	461a      	mov	r2, r3
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b10b      	cbz	r3, 80061cc <_free_r+0x50>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x46>
 80061cc:	6811      	ldr	r1, [r2, #0]
 80061ce:	1855      	adds	r5, r2, r1
 80061d0:	42a5      	cmp	r5, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x70>
 80061d4:	6824      	ldr	r4, [r4, #0]
 80061d6:	4421      	add	r1, r4
 80061d8:	1854      	adds	r4, r2, r1
 80061da:	42a3      	cmp	r3, r4
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	d1e0      	bne.n	80061a2 <_free_r+0x26>
 80061e0:	681c      	ldr	r4, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	440c      	add	r4, r1
 80061e8:	6014      	str	r4, [r2, #0]
 80061ea:	e7da      	b.n	80061a2 <_free_r+0x26>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x78>
 80061ee:	230c      	movs	r3, #12
 80061f0:	6003      	str	r3, [r0, #0]
 80061f2:	e7d6      	b.n	80061a2 <_free_r+0x26>
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1949      	addeq	r1, r1, r5
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	6054      	str	r4, [r2, #4]
 800620a:	e7ca      	b.n	80061a2 <_free_r+0x26>
 800620c:	b003      	add	sp, #12
 800620e:	bd30      	pop	{r4, r5, pc}
 8006210:	200006c8 	.word	0x200006c8

08006214 <sbrk_aligned>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4e0e      	ldr	r6, [pc, #56]	; (8006250 <sbrk_aligned+0x3c>)
 8006218:	460c      	mov	r4, r1
 800621a:	6831      	ldr	r1, [r6, #0]
 800621c:	4605      	mov	r5, r0
 800621e:	b911      	cbnz	r1, 8006226 <sbrk_aligned+0x12>
 8006220:	f000 fba6 	bl	8006970 <_sbrk_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fba1 	bl	8006970 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d00a      	beq.n	8006248 <sbrk_aligned+0x34>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d007      	beq.n	800624c <sbrk_aligned+0x38>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fb96 	bl	8006970 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d101      	bne.n	800624c <sbrk_aligned+0x38>
 8006248:	f04f 34ff 	mov.w	r4, #4294967295
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	200006cc 	.word	0x200006cc

08006254 <_malloc_r>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	1ccd      	adds	r5, r1, #3
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	2d00      	cmp	r5, #0
 8006268:	4607      	mov	r7, r0
 800626a:	db01      	blt.n	8006270 <_malloc_r+0x1c>
 800626c:	42a9      	cmp	r1, r5
 800626e:	d905      	bls.n	800627c <_malloc_r+0x28>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	2600      	movs	r6, #0
 8006276:	4630      	mov	r0, r6
 8006278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006350 <_malloc_r+0xfc>
 8006280:	f000 f868 	bl	8006354 <__malloc_lock>
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	461c      	mov	r4, r3
 800628a:	bb5c      	cbnz	r4, 80062e4 <_malloc_r+0x90>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	f7ff ffc0 	bl	8006214 <sbrk_aligned>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	4604      	mov	r4, r0
 8006298:	d155      	bne.n	8006346 <_malloc_r+0xf2>
 800629a:	f8d8 4000 	ldr.w	r4, [r8]
 800629e:	4626      	mov	r6, r4
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	d145      	bne.n	8006330 <_malloc_r+0xdc>
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d048      	beq.n	800633a <_malloc_r+0xe6>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	4631      	mov	r1, r6
 80062ac:	4638      	mov	r0, r7
 80062ae:	eb04 0903 	add.w	r9, r4, r3
 80062b2:	f000 fb5d 	bl	8006970 <_sbrk_r>
 80062b6:	4581      	cmp	r9, r0
 80062b8:	d13f      	bne.n	800633a <_malloc_r+0xe6>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	1a6d      	subs	r5, r5, r1
 80062be:	4629      	mov	r1, r5
 80062c0:	4638      	mov	r0, r7
 80062c2:	f7ff ffa7 	bl	8006214 <sbrk_aligned>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d037      	beq.n	800633a <_malloc_r+0xe6>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	442b      	add	r3, r5
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	f8d8 3000 	ldr.w	r3, [r8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d038      	beq.n	800634a <_malloc_r+0xf6>
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	42a2      	cmp	r2, r4
 80062dc:	d12b      	bne.n	8006336 <_malloc_r+0xe2>
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e00f      	b.n	8006304 <_malloc_r+0xb0>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	1b52      	subs	r2, r2, r5
 80062e8:	d41f      	bmi.n	800632a <_malloc_r+0xd6>
 80062ea:	2a0b      	cmp	r2, #11
 80062ec:	d917      	bls.n	800631e <_malloc_r+0xca>
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	6025      	str	r5, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	6059      	strne	r1, [r3, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	bf08      	it	eq
 80062fc:	f8c8 1000 	streq.w	r1, [r8]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4638      	mov	r0, r7
 8006306:	f104 060b 	add.w	r6, r4, #11
 800630a:	f000 f829 	bl	8006360 <__malloc_unlock>
 800630e:	f026 0607 	bic.w	r6, r6, #7
 8006312:	1d23      	adds	r3, r4, #4
 8006314:	1af2      	subs	r2, r6, r3
 8006316:	d0ae      	beq.n	8006276 <_malloc_r+0x22>
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	50a3      	str	r3, [r4, r2]
 800631c:	e7ab      	b.n	8006276 <_malloc_r+0x22>
 800631e:	42a3      	cmp	r3, r4
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	d1dd      	bne.n	80062e0 <_malloc_r+0x8c>
 8006324:	f8c8 2000 	str.w	r2, [r8]
 8006328:	e7ec      	b.n	8006304 <_malloc_r+0xb0>
 800632a:	4623      	mov	r3, r4
 800632c:	6864      	ldr	r4, [r4, #4]
 800632e:	e7ac      	b.n	800628a <_malloc_r+0x36>
 8006330:	4634      	mov	r4, r6
 8006332:	6876      	ldr	r6, [r6, #4]
 8006334:	e7b4      	b.n	80062a0 <_malloc_r+0x4c>
 8006336:	4613      	mov	r3, r2
 8006338:	e7cc      	b.n	80062d4 <_malloc_r+0x80>
 800633a:	230c      	movs	r3, #12
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4638      	mov	r0, r7
 8006340:	f000 f80e 	bl	8006360 <__malloc_unlock>
 8006344:	e797      	b.n	8006276 <_malloc_r+0x22>
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	e7dc      	b.n	8006304 <_malloc_r+0xb0>
 800634a:	605b      	str	r3, [r3, #4]
 800634c:	deff      	udf	#255	; 0xff
 800634e:	bf00      	nop
 8006350:	200006c8 	.word	0x200006c8

08006354 <__malloc_lock>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__malloc_lock+0x8>)
 8006356:	f7ff bf0f 	b.w	8006178 <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	200006c4 	.word	0x200006c4

08006360 <__malloc_unlock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_unlock+0x8>)
 8006362:	f7ff bf0a 	b.w	800617a <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	200006c4 	.word	0x200006c4

0800636c <__ssputs_r>:
 800636c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	688e      	ldr	r6, [r1, #8]
 8006372:	461f      	mov	r7, r3
 8006374:	42be      	cmp	r6, r7
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	4682      	mov	sl, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4690      	mov	r8, r2
 800637e:	d82c      	bhi.n	80063da <__ssputs_r+0x6e>
 8006380:	898a      	ldrh	r2, [r1, #12]
 8006382:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006386:	d026      	beq.n	80063d6 <__ssputs_r+0x6a>
 8006388:	6965      	ldr	r5, [r4, #20]
 800638a:	6909      	ldr	r1, [r1, #16]
 800638c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006390:	eba3 0901 	sub.w	r9, r3, r1
 8006394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006398:	1c7b      	adds	r3, r7, #1
 800639a:	444b      	add	r3, r9
 800639c:	106d      	asrs	r5, r5, #1
 800639e:	429d      	cmp	r5, r3
 80063a0:	bf38      	it	cc
 80063a2:	461d      	movcc	r5, r3
 80063a4:	0553      	lsls	r3, r2, #21
 80063a6:	d527      	bpl.n	80063f8 <__ssputs_r+0x8c>
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7ff ff53 	bl	8006254 <_malloc_r>
 80063ae:	4606      	mov	r6, r0
 80063b0:	b360      	cbz	r0, 800640c <__ssputs_r+0xa0>
 80063b2:	6921      	ldr	r1, [r4, #16]
 80063b4:	464a      	mov	r2, r9
 80063b6:	f000 faeb 	bl	8006990 <memcpy>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	6126      	str	r6, [r4, #16]
 80063c8:	6165      	str	r5, [r4, #20]
 80063ca:	444e      	add	r6, r9
 80063cc:	eba5 0509 	sub.w	r5, r5, r9
 80063d0:	6026      	str	r6, [r4, #0]
 80063d2:	60a5      	str	r5, [r4, #8]
 80063d4:	463e      	mov	r6, r7
 80063d6:	42be      	cmp	r6, r7
 80063d8:	d900      	bls.n	80063dc <__ssputs_r+0x70>
 80063da:	463e      	mov	r6, r7
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	4632      	mov	r2, r6
 80063e0:	4641      	mov	r1, r8
 80063e2:	f000 faab 	bl	800693c <memmove>
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	1b9b      	subs	r3, r3, r6
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	4433      	add	r3, r6
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	2000      	movs	r0, #0
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	462a      	mov	r2, r5
 80063fa:	f000 fad7 	bl	80069ac <_realloc_r>
 80063fe:	4606      	mov	r6, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d1e0      	bne.n	80063c6 <__ssputs_r+0x5a>
 8006404:	6921      	ldr	r1, [r4, #16]
 8006406:	4650      	mov	r0, sl
 8006408:	f7ff feb8 	bl	800617c <_free_r>
 800640c:	230c      	movs	r3, #12
 800640e:	f8ca 3000 	str.w	r3, [sl]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	f04f 30ff 	mov.w	r0, #4294967295
 800641e:	e7e9      	b.n	80063f4 <__ssputs_r+0x88>

08006420 <_svfiprintf_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	4698      	mov	r8, r3
 8006426:	898b      	ldrh	r3, [r1, #12]
 8006428:	061b      	lsls	r3, r3, #24
 800642a:	b09d      	sub	sp, #116	; 0x74
 800642c:	4607      	mov	r7, r0
 800642e:	460d      	mov	r5, r1
 8006430:	4614      	mov	r4, r2
 8006432:	d50e      	bpl.n	8006452 <_svfiprintf_r+0x32>
 8006434:	690b      	ldr	r3, [r1, #16]
 8006436:	b963      	cbnz	r3, 8006452 <_svfiprintf_r+0x32>
 8006438:	2140      	movs	r1, #64	; 0x40
 800643a:	f7ff ff0b 	bl	8006254 <_malloc_r>
 800643e:	6028      	str	r0, [r5, #0]
 8006440:	6128      	str	r0, [r5, #16]
 8006442:	b920      	cbnz	r0, 800644e <_svfiprintf_r+0x2e>
 8006444:	230c      	movs	r3, #12
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	e0d0      	b.n	80065f0 <_svfiprintf_r+0x1d0>
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	616b      	str	r3, [r5, #20]
 8006452:	2300      	movs	r3, #0
 8006454:	9309      	str	r3, [sp, #36]	; 0x24
 8006456:	2320      	movs	r3, #32
 8006458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006460:	2330      	movs	r3, #48	; 0x30
 8006462:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006608 <_svfiprintf_r+0x1e8>
 8006466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646a:	f04f 0901 	mov.w	r9, #1
 800646e:	4623      	mov	r3, r4
 8006470:	469a      	mov	sl, r3
 8006472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006476:	b10a      	cbz	r2, 800647c <_svfiprintf_r+0x5c>
 8006478:	2a25      	cmp	r2, #37	; 0x25
 800647a:	d1f9      	bne.n	8006470 <_svfiprintf_r+0x50>
 800647c:	ebba 0b04 	subs.w	fp, sl, r4
 8006480:	d00b      	beq.n	800649a <_svfiprintf_r+0x7a>
 8006482:	465b      	mov	r3, fp
 8006484:	4622      	mov	r2, r4
 8006486:	4629      	mov	r1, r5
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ff6f 	bl	800636c <__ssputs_r>
 800648e:	3001      	adds	r0, #1
 8006490:	f000 80a9 	beq.w	80065e6 <_svfiprintf_r+0x1c6>
 8006494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006496:	445a      	add	r2, fp
 8006498:	9209      	str	r2, [sp, #36]	; 0x24
 800649a:	f89a 3000 	ldrb.w	r3, [sl]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80a1 	beq.w	80065e6 <_svfiprintf_r+0x1c6>
 80064a4:	2300      	movs	r3, #0
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ae:	f10a 0a01 	add.w	sl, sl, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	9307      	str	r3, [sp, #28]
 80064b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ba:	931a      	str	r3, [sp, #104]	; 0x68
 80064bc:	4654      	mov	r4, sl
 80064be:	2205      	movs	r2, #5
 80064c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c4:	4850      	ldr	r0, [pc, #320]	; (8006608 <_svfiprintf_r+0x1e8>)
 80064c6:	f7f9 feab 	bl	8000220 <memchr>
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	b9d8      	cbnz	r0, 8006506 <_svfiprintf_r+0xe6>
 80064ce:	06d0      	lsls	r0, r2, #27
 80064d0:	bf44      	itt	mi
 80064d2:	2320      	movmi	r3, #32
 80064d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064d8:	0711      	lsls	r1, r2, #28
 80064da:	bf44      	itt	mi
 80064dc:	232b      	movmi	r3, #43	; 0x2b
 80064de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e2:	f89a 3000 	ldrb.w	r3, [sl]
 80064e6:	2b2a      	cmp	r3, #42	; 0x2a
 80064e8:	d015      	beq.n	8006516 <_svfiprintf_r+0xf6>
 80064ea:	9a07      	ldr	r2, [sp, #28]
 80064ec:	4654      	mov	r4, sl
 80064ee:	2000      	movs	r0, #0
 80064f0:	f04f 0c0a 	mov.w	ip, #10
 80064f4:	4621      	mov	r1, r4
 80064f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fa:	3b30      	subs	r3, #48	; 0x30
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d94d      	bls.n	800659c <_svfiprintf_r+0x17c>
 8006500:	b1b0      	cbz	r0, 8006530 <_svfiprintf_r+0x110>
 8006502:	9207      	str	r2, [sp, #28]
 8006504:	e014      	b.n	8006530 <_svfiprintf_r+0x110>
 8006506:	eba0 0308 	sub.w	r3, r0, r8
 800650a:	fa09 f303 	lsl.w	r3, r9, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	46a2      	mov	sl, r4
 8006514:	e7d2      	b.n	80064bc <_svfiprintf_r+0x9c>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	9103      	str	r1, [sp, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bfbb      	ittet	lt
 8006522:	425b      	neglt	r3, r3
 8006524:	f042 0202 	orrlt.w	r2, r2, #2
 8006528:	9307      	strge	r3, [sp, #28]
 800652a:	9307      	strlt	r3, [sp, #28]
 800652c:	bfb8      	it	lt
 800652e:	9204      	strlt	r2, [sp, #16]
 8006530:	7823      	ldrb	r3, [r4, #0]
 8006532:	2b2e      	cmp	r3, #46	; 0x2e
 8006534:	d10c      	bne.n	8006550 <_svfiprintf_r+0x130>
 8006536:	7863      	ldrb	r3, [r4, #1]
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d134      	bne.n	80065a6 <_svfiprintf_r+0x186>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	9203      	str	r2, [sp, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	bfb8      	it	lt
 8006548:	f04f 33ff 	movlt.w	r3, #4294967295
 800654c:	3402      	adds	r4, #2
 800654e:	9305      	str	r3, [sp, #20]
 8006550:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006618 <_svfiprintf_r+0x1f8>
 8006554:	7821      	ldrb	r1, [r4, #0]
 8006556:	2203      	movs	r2, #3
 8006558:	4650      	mov	r0, sl
 800655a:	f7f9 fe61 	bl	8000220 <memchr>
 800655e:	b138      	cbz	r0, 8006570 <_svfiprintf_r+0x150>
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	eba0 000a 	sub.w	r0, r0, sl
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	4082      	lsls	r2, r0
 800656a:	4313      	orrs	r3, r2
 800656c:	3401      	adds	r4, #1
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006574:	4825      	ldr	r0, [pc, #148]	; (800660c <_svfiprintf_r+0x1ec>)
 8006576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657a:	2206      	movs	r2, #6
 800657c:	f7f9 fe50 	bl	8000220 <memchr>
 8006580:	2800      	cmp	r0, #0
 8006582:	d038      	beq.n	80065f6 <_svfiprintf_r+0x1d6>
 8006584:	4b22      	ldr	r3, [pc, #136]	; (8006610 <_svfiprintf_r+0x1f0>)
 8006586:	bb1b      	cbnz	r3, 80065d0 <_svfiprintf_r+0x1b0>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	3307      	adds	r3, #7
 800658c:	f023 0307 	bic.w	r3, r3, #7
 8006590:	3308      	adds	r3, #8
 8006592:	9303      	str	r3, [sp, #12]
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	4433      	add	r3, r6
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	e768      	b.n	800646e <_svfiprintf_r+0x4e>
 800659c:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a0:	460c      	mov	r4, r1
 80065a2:	2001      	movs	r0, #1
 80065a4:	e7a6      	b.n	80064f4 <_svfiprintf_r+0xd4>
 80065a6:	2300      	movs	r3, #0
 80065a8:	3401      	adds	r4, #1
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	4619      	mov	r1, r3
 80065ae:	f04f 0c0a 	mov.w	ip, #10
 80065b2:	4620      	mov	r0, r4
 80065b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b8:	3a30      	subs	r2, #48	; 0x30
 80065ba:	2a09      	cmp	r2, #9
 80065bc:	d903      	bls.n	80065c6 <_svfiprintf_r+0x1a6>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0c6      	beq.n	8006550 <_svfiprintf_r+0x130>
 80065c2:	9105      	str	r1, [sp, #20]
 80065c4:	e7c4      	b.n	8006550 <_svfiprintf_r+0x130>
 80065c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ca:	4604      	mov	r4, r0
 80065cc:	2301      	movs	r3, #1
 80065ce:	e7f0      	b.n	80065b2 <_svfiprintf_r+0x192>
 80065d0:	ab03      	add	r3, sp, #12
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	462a      	mov	r2, r5
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <_svfiprintf_r+0x1f4>)
 80065d8:	a904      	add	r1, sp, #16
 80065da:	4638      	mov	r0, r7
 80065dc:	f3af 8000 	nop.w
 80065e0:	1c42      	adds	r2, r0, #1
 80065e2:	4606      	mov	r6, r0
 80065e4:	d1d6      	bne.n	8006594 <_svfiprintf_r+0x174>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	065b      	lsls	r3, r3, #25
 80065ea:	f53f af2d 	bmi.w	8006448 <_svfiprintf_r+0x28>
 80065ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f0:	b01d      	add	sp, #116	; 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	462a      	mov	r2, r5
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <_svfiprintf_r+0x1f4>)
 80065fe:	a904      	add	r1, sp, #16
 8006600:	4638      	mov	r0, r7
 8006602:	f000 f879 	bl	80066f8 <_printf_i>
 8006606:	e7eb      	b.n	80065e0 <_svfiprintf_r+0x1c0>
 8006608:	08006ad4 	.word	0x08006ad4
 800660c:	08006ade 	.word	0x08006ade
 8006610:	00000000 	.word	0x00000000
 8006614:	0800636d 	.word	0x0800636d
 8006618:	08006ada 	.word	0x08006ada

0800661c <_printf_common>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	4616      	mov	r6, r2
 8006622:	4699      	mov	r9, r3
 8006624:	688a      	ldr	r2, [r1, #8]
 8006626:	690b      	ldr	r3, [r1, #16]
 8006628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800662c:	4293      	cmp	r3, r2
 800662e:	bfb8      	it	lt
 8006630:	4613      	movlt	r3, r2
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006638:	4607      	mov	r7, r0
 800663a:	460c      	mov	r4, r1
 800663c:	b10a      	cbz	r2, 8006642 <_printf_common+0x26>
 800663e:	3301      	adds	r3, #1
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	0699      	lsls	r1, r3, #26
 8006646:	bf42      	ittt	mi
 8006648:	6833      	ldrmi	r3, [r6, #0]
 800664a:	3302      	addmi	r3, #2
 800664c:	6033      	strmi	r3, [r6, #0]
 800664e:	6825      	ldr	r5, [r4, #0]
 8006650:	f015 0506 	ands.w	r5, r5, #6
 8006654:	d106      	bne.n	8006664 <_printf_common+0x48>
 8006656:	f104 0a19 	add.w	sl, r4, #25
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	6832      	ldr	r2, [r6, #0]
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	42ab      	cmp	r3, r5
 8006662:	dc26      	bgt.n	80066b2 <_printf_common+0x96>
 8006664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006668:	1e13      	subs	r3, r2, #0
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	bf18      	it	ne
 800666e:	2301      	movne	r3, #1
 8006670:	0692      	lsls	r2, r2, #26
 8006672:	d42b      	bmi.n	80066cc <_printf_common+0xb0>
 8006674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006678:	4649      	mov	r1, r9
 800667a:	4638      	mov	r0, r7
 800667c:	47c0      	blx	r8
 800667e:	3001      	adds	r0, #1
 8006680:	d01e      	beq.n	80066c0 <_printf_common+0xa4>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	6922      	ldr	r2, [r4, #16]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	2b04      	cmp	r3, #4
 800668c:	bf02      	ittt	eq
 800668e:	68e5      	ldreq	r5, [r4, #12]
 8006690:	6833      	ldreq	r3, [r6, #0]
 8006692:	1aed      	subeq	r5, r5, r3
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	bf0c      	ite	eq
 8006698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800669c:	2500      	movne	r5, #0
 800669e:	4293      	cmp	r3, r2
 80066a0:	bfc4      	itt	gt
 80066a2:	1a9b      	subgt	r3, r3, r2
 80066a4:	18ed      	addgt	r5, r5, r3
 80066a6:	2600      	movs	r6, #0
 80066a8:	341a      	adds	r4, #26
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d11a      	bne.n	80066e4 <_printf_common+0xc8>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e008      	b.n	80066c4 <_printf_common+0xa8>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4652      	mov	r2, sl
 80066b6:	4649      	mov	r1, r9
 80066b8:	4638      	mov	r0, r7
 80066ba:	47c0      	blx	r8
 80066bc:	3001      	adds	r0, #1
 80066be:	d103      	bne.n	80066c8 <_printf_common+0xac>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7c6      	b.n	800665a <_printf_common+0x3e>
 80066cc:	18e1      	adds	r1, r4, r3
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	2030      	movs	r0, #48	; 0x30
 80066d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066d6:	4422      	add	r2, r4
 80066d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066e0:	3302      	adds	r3, #2
 80066e2:	e7c7      	b.n	8006674 <_printf_common+0x58>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4622      	mov	r2, r4
 80066e8:	4649      	mov	r1, r9
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c0      	blx	r8
 80066ee:	3001      	adds	r0, #1
 80066f0:	d0e6      	beq.n	80066c0 <_printf_common+0xa4>
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7d9      	b.n	80066aa <_printf_common+0x8e>
	...

080066f8 <_printf_i>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	7e0f      	ldrb	r7, [r1, #24]
 80066fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006700:	2f78      	cmp	r7, #120	; 0x78
 8006702:	4691      	mov	r9, r2
 8006704:	4680      	mov	r8, r0
 8006706:	460c      	mov	r4, r1
 8006708:	469a      	mov	sl, r3
 800670a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800670e:	d807      	bhi.n	8006720 <_printf_i+0x28>
 8006710:	2f62      	cmp	r7, #98	; 0x62
 8006712:	d80a      	bhi.n	800672a <_printf_i+0x32>
 8006714:	2f00      	cmp	r7, #0
 8006716:	f000 80d4 	beq.w	80068c2 <_printf_i+0x1ca>
 800671a:	2f58      	cmp	r7, #88	; 0x58
 800671c:	f000 80c0 	beq.w	80068a0 <_printf_i+0x1a8>
 8006720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006728:	e03a      	b.n	80067a0 <_printf_i+0xa8>
 800672a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800672e:	2b15      	cmp	r3, #21
 8006730:	d8f6      	bhi.n	8006720 <_printf_i+0x28>
 8006732:	a101      	add	r1, pc, #4	; (adr r1, 8006738 <_printf_i+0x40>)
 8006734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006738:	08006791 	.word	0x08006791
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006721 	.word	0x08006721
 8006744:	08006721 	.word	0x08006721
 8006748:	08006721 	.word	0x08006721
 800674c:	08006721 	.word	0x08006721
 8006750:	080067a5 	.word	0x080067a5
 8006754:	08006721 	.word	0x08006721
 8006758:	08006721 	.word	0x08006721
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	080068a9 	.word	0x080068a9
 8006768:	080067d1 	.word	0x080067d1
 800676c:	08006863 	.word	0x08006863
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068cb 	.word	0x080068cb
 800677c:	08006721 	.word	0x08006721
 8006780:	080067d1 	.word	0x080067d1
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	0800686b 	.word	0x0800686b
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	602a      	str	r2, [r5, #0]
 8006798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067a0:	2301      	movs	r3, #1
 80067a2:	e09f      	b.n	80068e4 <_printf_i+0x1ec>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	0607      	lsls	r7, r0, #24
 80067aa:	f103 0104 	add.w	r1, r3, #4
 80067ae:	6029      	str	r1, [r5, #0]
 80067b0:	d501      	bpl.n	80067b6 <_printf_i+0xbe>
 80067b2:	681e      	ldr	r6, [r3, #0]
 80067b4:	e003      	b.n	80067be <_printf_i+0xc6>
 80067b6:	0646      	lsls	r6, r0, #25
 80067b8:	d5fb      	bpl.n	80067b2 <_printf_i+0xba>
 80067ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067be:	2e00      	cmp	r6, #0
 80067c0:	da03      	bge.n	80067ca <_printf_i+0xd2>
 80067c2:	232d      	movs	r3, #45	; 0x2d
 80067c4:	4276      	negs	r6, r6
 80067c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ca:	485a      	ldr	r0, [pc, #360]	; (8006934 <_printf_i+0x23c>)
 80067cc:	230a      	movs	r3, #10
 80067ce:	e012      	b.n	80067f6 <_printf_i+0xfe>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	1d19      	adds	r1, r3, #4
 80067d6:	6029      	str	r1, [r5, #0]
 80067d8:	0605      	lsls	r5, r0, #24
 80067da:	d501      	bpl.n	80067e0 <_printf_i+0xe8>
 80067dc:	681e      	ldr	r6, [r3, #0]
 80067de:	e002      	b.n	80067e6 <_printf_i+0xee>
 80067e0:	0641      	lsls	r1, r0, #25
 80067e2:	d5fb      	bpl.n	80067dc <_printf_i+0xe4>
 80067e4:	881e      	ldrh	r6, [r3, #0]
 80067e6:	4853      	ldr	r0, [pc, #332]	; (8006934 <_printf_i+0x23c>)
 80067e8:	2f6f      	cmp	r7, #111	; 0x6f
 80067ea:	bf0c      	ite	eq
 80067ec:	2308      	moveq	r3, #8
 80067ee:	230a      	movne	r3, #10
 80067f0:	2100      	movs	r1, #0
 80067f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067f6:	6865      	ldr	r5, [r4, #4]
 80067f8:	60a5      	str	r5, [r4, #8]
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	bfa2      	ittt	ge
 80067fe:	6821      	ldrge	r1, [r4, #0]
 8006800:	f021 0104 	bicge.w	r1, r1, #4
 8006804:	6021      	strge	r1, [r4, #0]
 8006806:	b90e      	cbnz	r6, 800680c <_printf_i+0x114>
 8006808:	2d00      	cmp	r5, #0
 800680a:	d04b      	beq.n	80068a4 <_printf_i+0x1ac>
 800680c:	4615      	mov	r5, r2
 800680e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006812:	fb03 6711 	mls	r7, r3, r1, r6
 8006816:	5dc7      	ldrb	r7, [r0, r7]
 8006818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800681c:	4637      	mov	r7, r6
 800681e:	42bb      	cmp	r3, r7
 8006820:	460e      	mov	r6, r1
 8006822:	d9f4      	bls.n	800680e <_printf_i+0x116>
 8006824:	2b08      	cmp	r3, #8
 8006826:	d10b      	bne.n	8006840 <_printf_i+0x148>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	07de      	lsls	r6, r3, #31
 800682c:	d508      	bpl.n	8006840 <_printf_i+0x148>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	6861      	ldr	r1, [r4, #4]
 8006832:	4299      	cmp	r1, r3
 8006834:	bfde      	ittt	le
 8006836:	2330      	movle	r3, #48	; 0x30
 8006838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800683c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006840:	1b52      	subs	r2, r2, r5
 8006842:	6122      	str	r2, [r4, #16]
 8006844:	f8cd a000 	str.w	sl, [sp]
 8006848:	464b      	mov	r3, r9
 800684a:	aa03      	add	r2, sp, #12
 800684c:	4621      	mov	r1, r4
 800684e:	4640      	mov	r0, r8
 8006850:	f7ff fee4 	bl	800661c <_printf_common>
 8006854:	3001      	adds	r0, #1
 8006856:	d14a      	bne.n	80068ee <_printf_i+0x1f6>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	b004      	add	sp, #16
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f043 0320 	orr.w	r3, r3, #32
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	4833      	ldr	r0, [pc, #204]	; (8006938 <_printf_i+0x240>)
 800686c:	2778      	movs	r7, #120	; 0x78
 800686e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	6829      	ldr	r1, [r5, #0]
 8006876:	061f      	lsls	r7, r3, #24
 8006878:	f851 6b04 	ldr.w	r6, [r1], #4
 800687c:	d402      	bmi.n	8006884 <_printf_i+0x18c>
 800687e:	065f      	lsls	r7, r3, #25
 8006880:	bf48      	it	mi
 8006882:	b2b6      	uxthmi	r6, r6
 8006884:	07df      	lsls	r7, r3, #31
 8006886:	bf48      	it	mi
 8006888:	f043 0320 	orrmi.w	r3, r3, #32
 800688c:	6029      	str	r1, [r5, #0]
 800688e:	bf48      	it	mi
 8006890:	6023      	strmi	r3, [r4, #0]
 8006892:	b91e      	cbnz	r6, 800689c <_printf_i+0x1a4>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	f023 0320 	bic.w	r3, r3, #32
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	2310      	movs	r3, #16
 800689e:	e7a7      	b.n	80067f0 <_printf_i+0xf8>
 80068a0:	4824      	ldr	r0, [pc, #144]	; (8006934 <_printf_i+0x23c>)
 80068a2:	e7e4      	b.n	800686e <_printf_i+0x176>
 80068a4:	4615      	mov	r5, r2
 80068a6:	e7bd      	b.n	8006824 <_printf_i+0x12c>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	6826      	ldr	r6, [r4, #0]
 80068ac:	6961      	ldr	r1, [r4, #20]
 80068ae:	1d18      	adds	r0, r3, #4
 80068b0:	6028      	str	r0, [r5, #0]
 80068b2:	0635      	lsls	r5, r6, #24
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	d501      	bpl.n	80068bc <_printf_i+0x1c4>
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	e002      	b.n	80068c2 <_printf_i+0x1ca>
 80068bc:	0670      	lsls	r0, r6, #25
 80068be:	d5fb      	bpl.n	80068b8 <_printf_i+0x1c0>
 80068c0:	8019      	strh	r1, [r3, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6123      	str	r3, [r4, #16]
 80068c6:	4615      	mov	r5, r2
 80068c8:	e7bc      	b.n	8006844 <_printf_i+0x14c>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	602a      	str	r2, [r5, #0]
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	2100      	movs	r1, #0
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7f9 fca2 	bl	8000220 <memchr>
 80068dc:	b108      	cbz	r0, 80068e2 <_printf_i+0x1ea>
 80068de:	1b40      	subs	r0, r0, r5
 80068e0:	6060      	str	r0, [r4, #4]
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	2300      	movs	r3, #0
 80068e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ec:	e7aa      	b.n	8006844 <_printf_i+0x14c>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	462a      	mov	r2, r5
 80068f2:	4649      	mov	r1, r9
 80068f4:	4640      	mov	r0, r8
 80068f6:	47d0      	blx	sl
 80068f8:	3001      	adds	r0, #1
 80068fa:	d0ad      	beq.n	8006858 <_printf_i+0x160>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	079b      	lsls	r3, r3, #30
 8006900:	d413      	bmi.n	800692a <_printf_i+0x232>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	4298      	cmp	r0, r3
 8006908:	bfb8      	it	lt
 800690a:	4618      	movlt	r0, r3
 800690c:	e7a6      	b.n	800685c <_printf_i+0x164>
 800690e:	2301      	movs	r3, #1
 8006910:	4632      	mov	r2, r6
 8006912:	4649      	mov	r1, r9
 8006914:	4640      	mov	r0, r8
 8006916:	47d0      	blx	sl
 8006918:	3001      	adds	r0, #1
 800691a:	d09d      	beq.n	8006858 <_printf_i+0x160>
 800691c:	3501      	adds	r5, #1
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	9903      	ldr	r1, [sp, #12]
 8006922:	1a5b      	subs	r3, r3, r1
 8006924:	42ab      	cmp	r3, r5
 8006926:	dcf2      	bgt.n	800690e <_printf_i+0x216>
 8006928:	e7eb      	b.n	8006902 <_printf_i+0x20a>
 800692a:	2500      	movs	r5, #0
 800692c:	f104 0619 	add.w	r6, r4, #25
 8006930:	e7f5      	b.n	800691e <_printf_i+0x226>
 8006932:	bf00      	nop
 8006934:	08006ae5 	.word	0x08006ae5
 8006938:	08006af6 	.word	0x08006af6

0800693c <memmove>:
 800693c:	4288      	cmp	r0, r1
 800693e:	b510      	push	{r4, lr}
 8006940:	eb01 0402 	add.w	r4, r1, r2
 8006944:	d902      	bls.n	800694c <memmove+0x10>
 8006946:	4284      	cmp	r4, r0
 8006948:	4623      	mov	r3, r4
 800694a:	d807      	bhi.n	800695c <memmove+0x20>
 800694c:	1e43      	subs	r3, r0, #1
 800694e:	42a1      	cmp	r1, r4
 8006950:	d008      	beq.n	8006964 <memmove+0x28>
 8006952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800695a:	e7f8      	b.n	800694e <memmove+0x12>
 800695c:	4402      	add	r2, r0
 800695e:	4601      	mov	r1, r0
 8006960:	428a      	cmp	r2, r1
 8006962:	d100      	bne.n	8006966 <memmove+0x2a>
 8006964:	bd10      	pop	{r4, pc}
 8006966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800696a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800696e:	e7f7      	b.n	8006960 <memmove+0x24>

08006970 <_sbrk_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d06      	ldr	r5, [pc, #24]	; (800698c <_sbrk_r+0x1c>)
 8006974:	2300      	movs	r3, #0
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fa fbb4 	bl	80010e8 <_sbrk>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_sbrk_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_sbrk_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	200006c0 	.word	0x200006c0

08006990 <memcpy>:
 8006990:	440a      	add	r2, r1
 8006992:	4291      	cmp	r1, r2
 8006994:	f100 33ff 	add.w	r3, r0, #4294967295
 8006998:	d100      	bne.n	800699c <memcpy+0xc>
 800699a:	4770      	bx	lr
 800699c:	b510      	push	{r4, lr}
 800699e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a6:	4291      	cmp	r1, r2
 80069a8:	d1f9      	bne.n	800699e <memcpy+0xe>
 80069aa:	bd10      	pop	{r4, pc}

080069ac <_realloc_r>:
 80069ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b0:	4680      	mov	r8, r0
 80069b2:	4614      	mov	r4, r2
 80069b4:	460e      	mov	r6, r1
 80069b6:	b921      	cbnz	r1, 80069c2 <_realloc_r+0x16>
 80069b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	4611      	mov	r1, r2
 80069be:	f7ff bc49 	b.w	8006254 <_malloc_r>
 80069c2:	b92a      	cbnz	r2, 80069d0 <_realloc_r+0x24>
 80069c4:	f7ff fbda 	bl	800617c <_free_r>
 80069c8:	4625      	mov	r5, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d0:	f000 f81b 	bl	8006a0a <_malloc_usable_size_r>
 80069d4:	4284      	cmp	r4, r0
 80069d6:	4607      	mov	r7, r0
 80069d8:	d802      	bhi.n	80069e0 <_realloc_r+0x34>
 80069da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069de:	d812      	bhi.n	8006a06 <_realloc_r+0x5a>
 80069e0:	4621      	mov	r1, r4
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7ff fc36 	bl	8006254 <_malloc_r>
 80069e8:	4605      	mov	r5, r0
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0ed      	beq.n	80069ca <_realloc_r+0x1e>
 80069ee:	42bc      	cmp	r4, r7
 80069f0:	4622      	mov	r2, r4
 80069f2:	4631      	mov	r1, r6
 80069f4:	bf28      	it	cs
 80069f6:	463a      	movcs	r2, r7
 80069f8:	f7ff ffca 	bl	8006990 <memcpy>
 80069fc:	4631      	mov	r1, r6
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7ff fbbc 	bl	800617c <_free_r>
 8006a04:	e7e1      	b.n	80069ca <_realloc_r+0x1e>
 8006a06:	4635      	mov	r5, r6
 8006a08:	e7df      	b.n	80069ca <_realloc_r+0x1e>

08006a0a <_malloc_usable_size_r>:
 8006a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0e:	1f18      	subs	r0, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfbc      	itt	lt
 8006a14:	580b      	ldrlt	r3, [r1, r0]
 8006a16:	18c0      	addlt	r0, r0, r3
 8006a18:	4770      	bx	lr
	...

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
